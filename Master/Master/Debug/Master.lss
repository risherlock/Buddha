
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001cf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c84  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014a  00800100  00800100  00001cf8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007f61  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d00  00000000  00000000  0000a091  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002572  00000000  00000000  0000bd91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ae8  00000000  00000000  0000e304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d99  00000000  00000000  0000edec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003169  00000000  00000000  00010b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  00013cee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9c c0       	rjmp	.+312    	; 0x13a <__ctors_end>
       2:	00 00       	nop
       4:	c3 c0       	rjmp	.+390    	; 0x18c <__bad_interrupt>
       6:	00 00       	nop
       8:	c1 c0       	rjmp	.+386    	; 0x18c <__bad_interrupt>
       a:	00 00       	nop
       c:	bf c0       	rjmp	.+382    	; 0x18c <__bad_interrupt>
       e:	00 00       	nop
      10:	bd c0       	rjmp	.+378    	; 0x18c <__bad_interrupt>
      12:	00 00       	nop
      14:	bb c0       	rjmp	.+374    	; 0x18c <__bad_interrupt>
      16:	00 00       	nop
      18:	b9 c0       	rjmp	.+370    	; 0x18c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b7 c0       	rjmp	.+366    	; 0x18c <__bad_interrupt>
      1e:	00 00       	nop
      20:	b5 c0       	rjmp	.+362    	; 0x18c <__bad_interrupt>
      22:	00 00       	nop
      24:	b3 c0       	rjmp	.+358    	; 0x18c <__bad_interrupt>
      26:	00 00       	nop
      28:	b1 c0       	rjmp	.+354    	; 0x18c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c2       	rjmp	.+1178   	; 0x4c8 <__vector_11>
      2e:	00 00       	nop
      30:	ad c0       	rjmp	.+346    	; 0x18c <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__vector_13>
      38:	a9 c0       	rjmp	.+338    	; 0x18c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a7 c0       	rjmp	.+334    	; 0x18c <__bad_interrupt>
      3e:	00 00       	nop
      40:	a5 c0       	rjmp	.+330    	; 0x18c <__bad_interrupt>
      42:	00 00       	nop
      44:	a3 c0       	rjmp	.+326    	; 0x18c <__bad_interrupt>
      46:	00 00       	nop
      48:	a2 c0       	rjmp	.+324    	; 0x18e <__vector_18>
      4a:	00 00       	nop
      4c:	9f c0       	rjmp	.+318    	; 0x18c <__bad_interrupt>
      4e:	00 00       	nop
      50:	9d c0       	rjmp	.+314    	; 0x18c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__vector_21>
      58:	99 c0       	rjmp	.+306    	; 0x18c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	97 c0       	rjmp	.+302    	; 0x18c <__bad_interrupt>
      5e:	00 00       	nop
      60:	95 c0       	rjmp	.+298    	; 0x18c <__bad_interrupt>
      62:	00 00       	nop
      64:	93 c0       	rjmp	.+294    	; 0x18c <__bad_interrupt>
      66:	00 00       	nop
      68:	91 c0       	rjmp	.+290    	; 0x18c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8f c0       	rjmp	.+286    	; 0x18c <__bad_interrupt>
      6e:	00 00       	nop
      70:	e2 c1       	rjmp	.+964    	; 0x436 <__vector_28>
      72:	00 00       	nop
      74:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__vector_29>
      78:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <__vector_30>
      7c:	87 c0       	rjmp	.+270    	; 0x18c <__bad_interrupt>
      7e:	00 00       	nop
      80:	57 c2       	rjmp	.+1198   	; 0x530 <__vector_32>
      82:	00 00       	nop
      84:	83 c0       	rjmp	.+262    	; 0x18c <__bad_interrupt>
      86:	00 00       	nop
      88:	81 c0       	rjmp	.+258    	; 0x18c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	60 01       	movw	r12, r0
      8e:	64 01       	movw	r12, r8
      90:	54 01       	movw	r10, r8
      92:	5a 01       	movw	r10, r20
      94:	7f 01       	movw	r14, r30
      96:	7f 01       	movw	r14, r30
      98:	68 01       	movw	r12, r16
      9a:	6e 01       	movw	r12, r28
      9c:	74 01       	movw	r14, r8
      9e:	7a 01       	movw	r14, r20
      a0:	e9 08       	sbc	r14, r9
      a2:	f2 08       	sbc	r15, r2
      a4:	22 09       	sbc	r18, r2
      a6:	91 09       	sbc	r25, r1
      a8:	b7 09       	sbc	r27, r7
      aa:	ef 09       	sbc	r30, r15
      ac:	15 0a       	sbc	r1, r21
      ae:	ad 0a       	sbc	r10, r29
      b0:	d8 0a       	sbc	r13, r24
      b2:	e0 0a       	sbc	r14, r16
      b4:	5c 09       	sbc	r21, r12
      b6:	4b 0a       	sbc	r4, r27
      b8:	71 0a       	sbc	r7, r17

000000ba <__trampolines_end>:
      ba:	00 00       	nop
      bc:	00 01       	movw	r0, r0
      be:	02 00       	.word	0x0002	; ????
      c0:	09 0a       	sbc	r0, r25
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	04 03       	mulsu	r16, r20
      c8:	08 07       	cpc	r16, r24
	...

000000da <digital_pin_to_bit_mask_PGM>:
      da:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      ea:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000fa <digital_pin_to_port_PGM>:
      fa:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     10a:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

0000011a <port_to_input_PGM>:
     11a:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

00000124 <port_to_output_PGM>:
     124:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

0000012e <port_to_mode_PGM>:
     12e:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

00000138 <__ctors_start>:
     138:	15 0d       	add	r17, r5

0000013a <__ctors_end>:
     13a:	11 24       	eor	r1, r1
     13c:	1f be       	out	0x3f, r1	; 63
     13e:	cf ef       	ldi	r28, 0xFF	; 255
     140:	d0 e4       	ldi	r29, 0x40	; 64
     142:	de bf       	out	0x3e, r29	; 62
     144:	cd bf       	out	0x3d, r28	; 61

00000146 <__do_copy_data>:
     146:	11 e0       	ldi	r17, 0x01	; 1
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b1 e0       	ldi	r27, 0x01	; 1
     14c:	e4 e8       	ldi	r30, 0x84	; 132
     14e:	fc e1       	ldi	r31, 0x1C	; 28
     150:	00 e0       	ldi	r16, 0x00	; 0
     152:	0b bf       	out	0x3b, r16	; 59
     154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x14>
     156:	07 90       	elpm	r0, Z+
     158:	0d 92       	st	X+, r0
     15a:	a0 30       	cpi	r26, 0x00	; 0
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0x10>

00000160 <__do_clear_bss>:
     160:	22 e0       	ldi	r18, 0x02	; 2
     162:	a0 e0       	ldi	r26, 0x00	; 0
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
     16a:	aa 34       	cpi	r26, 0x4A	; 74
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>

00000170 <__do_global_ctors>:
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	cd e9       	ldi	r28, 0x9D	; 157
     174:	d0 e0       	ldi	r29, 0x00	; 0
     176:	04 c0       	rjmp	.+8      	; 0x180 <__do_global_ctors+0x10>
     178:	21 97       	sbiw	r28, 0x01	; 1
     17a:	fe 01       	movw	r30, r28
     17c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__tablejump2__>
     180:	cc 39       	cpi	r28, 0x9C	; 156
     182:	d1 07       	cpc	r29, r17
     184:	c9 f7       	brne	.-14     	; 0x178 <__do_global_ctors+0x8>
     186:	2e d7       	rcall	.+3676   	; 0xfe4 <main>
     188:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <_exit>

0000018c <__bad_interrupt>:
     18c:	39 cf       	rjmp	.-398    	; 0x0 <__vectors>

0000018e <__vector_18>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     18e:	1f 92       	push	r1
     190:	0f 92       	push	r0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	2f 93       	push	r18
     19a:	3f 93       	push	r19
     19c:	8f 93       	push	r24
     19e:	9f 93       	push	r25
     1a0:	af 93       	push	r26
     1a2:	bf 93       	push	r27
     1a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
     1a8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
     1ac:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
     1b0:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
     1b4:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1b8:	23 e0       	ldi	r18, 0x03	; 3
     1ba:	23 0f       	add	r18, r19
     1bc:	2d 37       	cpi	r18, 0x7D	; 125
     1be:	20 f4       	brcc	.+8      	; 0x1c8 <__vector_18+0x3a>
     1c0:	01 96       	adiw	r24, 0x01	; 1
     1c2:	a1 1d       	adc	r26, r1
     1c4:	b1 1d       	adc	r27, r1
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <__vector_18+0x44>
     1c8:	26 e8       	ldi	r18, 0x86	; 134
     1ca:	23 0f       	add	r18, r19
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	a1 1d       	adc	r26, r1
     1d0:	b1 1d       	adc	r27, r1
     1d2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     1d6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
     1da:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
     1de:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
     1e2:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
     1e6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
     1ea:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
     1ee:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
     1f2:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
     1f6:	01 96       	adiw	r24, 0x01	; 1
     1f8:	a1 1d       	adc	r26, r1
     1fa:	b1 1d       	adc	r27, r1
     1fc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
     200:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
     204:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
     208:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
     20c:	bf 91       	pop	r27
     20e:	af 91       	pop	r26
     210:	9f 91       	pop	r25
     212:	8f 91       	pop	r24
     214:	3f 91       	pop	r19
     216:	2f 91       	pop	r18
     218:	0f 90       	pop	r0
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	0f 90       	pop	r0
     21e:	1f 90       	pop	r1
     220:	18 95       	reti

00000222 <micros>:
     222:	3f b7       	in	r19, 0x3f	; 63
     224:	f8 94       	cli
     226:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
     22a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
     22e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
     232:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
     236:	26 b5       	in	r18, 0x26	; 38
     238:	a8 9b       	sbis	0x15, 0	; 21
     23a:	05 c0       	rjmp	.+10     	; 0x246 <micros+0x24>
     23c:	2f 3f       	cpi	r18, 0xFF	; 255
     23e:	19 f0       	breq	.+6      	; 0x246 <micros+0x24>
     240:	01 96       	adiw	r24, 0x01	; 1
     242:	a1 1d       	adc	r26, r1
     244:	b1 1d       	adc	r27, r1
     246:	3f bf       	out	0x3f, r19	; 63
     248:	ba 2f       	mov	r27, r26
     24a:	a9 2f       	mov	r26, r25
     24c:	98 2f       	mov	r25, r24
     24e:	88 27       	eor	r24, r24
     250:	82 0f       	add	r24, r18
     252:	91 1d       	adc	r25, r1
     254:	a1 1d       	adc	r26, r1
     256:	b1 1d       	adc	r27, r1
     258:	bc 01       	movw	r22, r24
     25a:	cd 01       	movw	r24, r26
     25c:	66 0f       	add	r22, r22
     25e:	77 1f       	adc	r23, r23
     260:	88 1f       	adc	r24, r24
     262:	99 1f       	adc	r25, r25
     264:	66 0f       	add	r22, r22
     266:	77 1f       	adc	r23, r23
     268:	88 1f       	adc	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	08 95       	ret

0000026e <init>:
	// return = 4 cycles
}

void init()
{
	sei();
     26e:	78 94       	sei
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     270:	84 b5       	in	r24, 0x24	; 36
     272:	82 60       	ori	r24, 0x02	; 2
     274:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     276:	84 b5       	in	r24, 0x24	; 36
     278:	81 60       	ori	r24, 0x01	; 1
     27a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     27c:	85 b5       	in	r24, 0x25	; 37
     27e:	82 60       	ori	r24, 0x02	; 2
     280:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     282:	85 b5       	in	r24, 0x25	; 37
     284:	81 60       	ori	r24, 0x01	; 1
     286:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     288:	ee e6       	ldi	r30, 0x6E	; 110
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	81 60       	ori	r24, 0x01	; 1
     290:	80 83       	st	Z, r24
     292:	08 95       	ret

00000294 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	fc 01       	movw	r30, r24
     298:	31 97       	sbiw	r30, 0x01	; 1
     29a:	ea 30       	cpi	r30, 0x0A	; 10
     29c:	f1 05       	cpc	r31, r1
     29e:	78 f5       	brcc	.+94     	; 0x2fe <turnOffPWM+0x6a>
     2a0:	ea 5b       	subi	r30, 0xBA	; 186
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     2a8:	e0 e8       	ldi	r30, 0x80	; 128
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	8f 77       	andi	r24, 0x7F	; 127
     2b0:	80 83       	st	Z, r24
     2b2:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     2b4:	e0 e8       	ldi	r30, 0x80	; 128
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	8f 7d       	andi	r24, 0xDF	; 223
     2bc:	80 83       	st	Z, r24
     2be:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     2c0:	84 b5       	in	r24, 0x24	; 36
     2c2:	8f 77       	andi	r24, 0x7F	; 127
     2c4:	84 bd       	out	0x24, r24	; 36
     2c6:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     2c8:	84 b5       	in	r24, 0x24	; 36
     2ca:	8f 7d       	andi	r24, 0xDF	; 223
     2cc:	84 bd       	out	0x24, r24	; 36
     2ce:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     2d0:	e0 eb       	ldi	r30, 0xB0	; 176
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	80 81       	ld	r24, Z
     2d6:	8f 77       	andi	r24, 0x7F	; 127
     2d8:	80 83       	st	Z, r24
     2da:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     2dc:	e0 eb       	ldi	r30, 0xB0	; 176
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	80 81       	ld	r24, Z
     2e2:	8f 7d       	andi	r24, 0xDF	; 223
     2e4:	80 83       	st	Z, r24
     2e6:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     2e8:	e0 e9       	ldi	r30, 0x90	; 144
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	8f 77       	andi	r24, 0x7F	; 127
     2f0:	80 83       	st	Z, r24
     2f2:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     2f4:	e0 e9       	ldi	r30, 0x90	; 144
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	8f 7d       	andi	r24, 0xDF	; 223
     2fc:	80 83       	st	Z, r24
     2fe:	08 95       	ret

00000300 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	fc 01       	movw	r30, r24
     308:	e6 52       	subi	r30, 0x26	; 38
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     30e:	fc 01       	movw	r30, r24
     310:	e6 50       	subi	r30, 0x06	; 6
     312:	ff 4f       	sbci	r31, 0xFF	; 255
     314:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     316:	88 23       	and	r24, r24
     318:	79 f1       	breq	.+94     	; 0x378 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	fc 01       	movw	r30, r24
     322:	e2 5d       	subi	r30, 0xD2	; 210
     324:	fe 4f       	sbci	r31, 0xFE	; 254
     326:	a5 91       	lpm	r26, Z+
     328:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     32a:	fc 01       	movw	r30, r24
     32c:	ec 5d       	subi	r30, 0xDC	; 220
     32e:	fe 4f       	sbci	r31, 0xFE	; 254
     330:	c5 91       	lpm	r28, Z+
     332:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     334:	61 11       	cpse	r22, r1
     336:	0c c0       	rjmp	.+24     	; 0x350 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     338:	9f b7       	in	r25, 0x3f	; 63
                cli();
     33a:	f8 94       	cli
		*reg &= ~bit;
     33c:	8c 91       	ld	r24, X
     33e:	e2 2f       	mov	r30, r18
     340:	e0 95       	com	r30
     342:	8e 23       	and	r24, r30
     344:	8c 93       	st	X, r24
		*out &= ~bit;
     346:	28 81       	ld	r18, Y
     348:	e2 23       	and	r30, r18
     34a:	e8 83       	st	Y, r30
		SREG = oldSREG;
     34c:	9f bf       	out	0x3f, r25	; 63
     34e:	14 c0       	rjmp	.+40     	; 0x378 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     350:	62 30       	cpi	r22, 0x02	; 2
     352:	61 f4       	brne	.+24     	; 0x36c <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     354:	9f b7       	in	r25, 0x3f	; 63
                cli();
     356:	f8 94       	cli
		*reg &= ~bit;
     358:	8c 91       	ld	r24, X
     35a:	32 2f       	mov	r19, r18
     35c:	30 95       	com	r19
     35e:	83 23       	and	r24, r19
     360:	8c 93       	st	X, r24
		*out |= bit;
     362:	e8 81       	ld	r30, Y
     364:	e2 2b       	or	r30, r18
     366:	e8 83       	st	Y, r30
		SREG = oldSREG;
     368:	9f bf       	out	0x3f, r25	; 63
     36a:	06 c0       	rjmp	.+12     	; 0x378 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     36c:	8f b7       	in	r24, 0x3f	; 63
                cli();
     36e:	f8 94       	cli
		*reg |= bit;
     370:	ec 91       	ld	r30, X
     372:	e2 2b       	or	r30, r18
     374:	ec 93       	st	X, r30
		SREG = oldSREG;
     376:	8f bf       	out	0x3f, r24	; 63
	}
}
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     384:	28 2f       	mov	r18, r24
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	f9 01       	movw	r30, r18
     38a:	e6 54       	subi	r30, 0x46	; 70
     38c:	ff 4f       	sbci	r31, 0xFF	; 255
     38e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     390:	f9 01       	movw	r30, r18
     392:	e6 52       	subi	r30, 0x26	; 38
     394:	ff 4f       	sbci	r31, 0xFF	; 255
     396:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     398:	f9 01       	movw	r30, r18
     39a:	e6 50       	subi	r30, 0x06	; 6
     39c:	ff 4f       	sbci	r31, 0xFF	; 255
     39e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     3a0:	cc 23       	and	r28, r28
     3a2:	c9 f0       	breq	.+50     	; 0x3d6 <digitalWrite+0x58>
     3a4:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     3a6:	81 11       	cpse	r24, r1
     3a8:	75 df       	rcall	.-278    	; 0x294 <turnOffPWM>

	out = portOutputRegister(port);
     3aa:	ec 2f       	mov	r30, r28
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	ec 5d       	subi	r30, 0xDC	; 220
     3b4:	fe 4f       	sbci	r31, 0xFE	; 254
     3b6:	a5 91       	lpm	r26, Z+
     3b8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     3ba:	8f b7       	in	r24, 0x3f	; 63
	cli();
     3bc:	f8 94       	cli

	if (val == LOW) {
     3be:	d1 11       	cpse	r29, r1
     3c0:	06 c0       	rjmp	.+12     	; 0x3ce <digitalWrite+0x50>
		*out &= ~bit;
     3c2:	9c 91       	ld	r25, X
     3c4:	e1 2f       	mov	r30, r17
     3c6:	e0 95       	com	r30
     3c8:	e9 23       	and	r30, r25
     3ca:	ec 93       	st	X, r30
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <digitalWrite+0x56>
	} else {
		*out |= bit;
     3ce:	ec 91       	ld	r30, X
     3d0:	e1 2b       	or	r30, r17
     3d2:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     3d4:	8f bf       	out	0x3f, r24	; 63
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	08 95       	ret

000003de <digitalRead>:

int digitalRead(uint8_t pin)
{
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     3e2:	28 2f       	mov	r18, r24
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	f9 01       	movw	r30, r18
     3e8:	e6 54       	subi	r30, 0x46	; 70
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     3ee:	f9 01       	movw	r30, r18
     3f0:	e6 52       	subi	r30, 0x26	; 38
     3f2:	ff 4f       	sbci	r31, 0xFF	; 255
     3f4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     3f6:	f9 01       	movw	r30, r18
     3f8:	e6 50       	subi	r30, 0x06	; 6
     3fa:	ff 4f       	sbci	r31, 0xFF	; 255
     3fc:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     3fe:	cc 23       	and	r28, r28
     400:	89 f0       	breq	.+34     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     402:	81 11       	cpse	r24, r1
     404:	47 df       	rcall	.-370    	; 0x294 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     406:	ec 2f       	mov	r30, r28
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	ee 0f       	add	r30, r30
     40c:	ff 1f       	adc	r31, r31
     40e:	e6 5e       	subi	r30, 0xE6	; 230
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	a5 91       	lpm	r26, Z+
     414:	b4 91       	lpm	r27, Z
     416:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     418:	ed 23       	and	r30, r29
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	21 f4       	brne	.+8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <_ZN12ModbusMaster16WriteCharacterCBEh>:

/************************************************
SERIAL CALLBACK FUNCTIONS FOR MODBUSMASTER
*************************************************/

void ModbusMaster::WriteCharacterCB(uint8_t character){
     42e:	86 2f       	mov	r24, r22
	uart1_putc(character);
     430:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <_Z10uart1_putch>
     434:	08 95       	ret

00000436 <__vector_28>:
	return;
}

ISR (USART1_RX_vect){
     436:	1f 92       	push	r1
     438:	0f 92       	push	r0
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	0f 92       	push	r0
     43e:	11 24       	eor	r1, r1
     440:	0b b6       	in	r0, 0x3b	; 59
     442:	0f 92       	push	r0
     444:	2f 93       	push	r18
     446:	3f 93       	push	r19
     448:	4f 93       	push	r20
     44a:	5f 93       	push	r21
     44c:	6f 93       	push	r22
     44e:	7f 93       	push	r23
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
     454:	af 93       	push	r26
     456:	bf 93       	push	r27
     458:	ef 93       	push	r30
     45a:	ff 93       	push	r31
	modbus_master.ReadCharacterCB(UDR1);
     45c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     460:	80 ee       	ldi	r24, 0xE0	; 224
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	9f d6       	rcall	.+3390   	; 0x11a4 <_ZN12ModbusMaster15ReadCharacterCBEh>
}
     466:	ff 91       	pop	r31
     468:	ef 91       	pop	r30
     46a:	bf 91       	pop	r27
     46c:	af 91       	pop	r26
     46e:	9f 91       	pop	r25
     470:	8f 91       	pop	r24
     472:	7f 91       	pop	r23
     474:	6f 91       	pop	r22
     476:	5f 91       	pop	r21
     478:	4f 91       	pop	r20
     47a:	3f 91       	pop	r19
     47c:	2f 91       	pop	r18
     47e:	0f 90       	pop	r0
     480:	0b be       	out	0x3b, r0	; 59
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <_ZN12ModbusMaster14TimeoutStartCBEv>:
	this->TimeoutResetCB();
	TIMSK &= ~(_BV(TOIE2));
}

void ModbusMaster::TimeoutResetCB(void){
	TCNT2 = 0;
     48c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	tmr2_overflow_count=0;
     490:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZL19tmr2_overflow_count>

void ModbusMaster::TimeoutStartCB(void){
	this->TimeoutResetCB();
	
	// PS:1024, En timer OF interrupt
	TCCR |= _BV(CS22) | _BV(CS20);
     494:	e1 eb       	ldi	r30, 0xB1	; 177
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	85 60       	ori	r24, 0x05	; 5
     49c:	80 83       	st	Z, r24
	TIMSK |= _BV(TOIE2);
     49e:	e0 e7       	ldi	r30, 0x70	; 112
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 81       	ld	r24, Z
     4a4:	81 60       	ori	r24, 0x01	; 1
     4a6:	80 83       	st	Z, r24
     4a8:	08 95       	ret

000004aa <_ZN12ModbusMaster13TimeoutStopCBEv>:
	this->TimeoutResetCB();
	TIMSK &= ~(_BV(TOIE2));
}

void ModbusMaster::TimeoutResetCB(void){
	TCNT2 = 0;
     4aa:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	tmr2_overflow_count=0;
     4ae:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZL19tmr2_overflow_count>
	TIMSK |= _BV(TOIE2);
}

void ModbusMaster::TimeoutStopCB(void){
	this->TimeoutResetCB();
	TIMSK &= ~(_BV(TOIE2));
     4b2:	e0 e7       	ldi	r30, 0x70	; 112
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	8e 7f       	andi	r24, 0xFE	; 254
     4ba:	80 83       	st	Z, r24
     4bc:	08 95       	ret

000004be <_ZN12ModbusMaster14TimeoutResetCBEv>:
}

void ModbusMaster::TimeoutResetCB(void){
	TCNT2 = 0;
     4be:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	tmr2_overflow_count=0;
     4c2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZL19tmr2_overflow_count>
     4c6:	08 95       	ret

000004c8 <__vector_11>:
		
}


ISR(TIMER2_OVF_vect, ISR_NOBLOCK){
     4c8:	78 94       	sei
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	11 24       	eor	r1, r1
     4d4:	0b b6       	in	r0, 0x3b	; 59
     4d6:	0f 92       	push	r0
     4d8:	2f 93       	push	r18
     4da:	3f 93       	push	r19
     4dc:	4f 93       	push	r20
     4de:	5f 93       	push	r21
     4e0:	6f 93       	push	r22
     4e2:	7f 93       	push	r23
     4e4:	8f 93       	push	r24
     4e6:	9f 93       	push	r25
     4e8:	af 93       	push	r26
     4ea:	bf 93       	push	r27
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
	
	tmr2_overflow_count++;
     4f0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZL19tmr2_overflow_count>
     4f4:	8f 5f       	subi	r24, 0xFF	; 255
	
	// 80 produces 1sec timeout (20Mhz)
	if (tmr2_overflow_count>=80){
     4f6:	80 35       	cpi	r24, 0x50	; 80
     4f8:	18 f4       	brcc	.+6      	; 0x500 <__vector_11+0x38>
}


ISR(TIMER2_OVF_vect, ISR_NOBLOCK){
	
	tmr2_overflow_count++;
     4fa:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_ZL19tmr2_overflow_count>
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <__vector_11+0x42>
	
	// 80 produces 1sec timeout (20Mhz)
	if (tmr2_overflow_count>=80){
		tmr2_overflow_count=0;
     500:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZL19tmr2_overflow_count>
		modbus_master.TimeoutCB();	
     504:	80 ee       	ldi	r24, 0xE0	; 224
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	ad d5       	rcall	.+2906   	; 0x1064 <_ZN12ModbusMaster9TimeoutCBEv>
	}
	
}
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	0f 90       	pop	r0
     524:	0b be       	out	0x3b, r0	; 59
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <__vector_32>:
#ifdef IR_TIMER_USE_ESP32
void IRTimer()
#else
ISR (TIMER_INTR_NAME)
#endif
{
     530:	1f 92       	push	r1
     532:	0f 92       	push	r0
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	0f 92       	push	r0
     538:	11 24       	eor	r1, r1
     53a:	0b b6       	in	r0, 0x3b	; 59
     53c:	0f 92       	push	r0
     53e:	2f 93       	push	r18
     540:	3f 93       	push	r19
     542:	4f 93       	push	r20
     544:	5f 93       	push	r21
     546:	6f 93       	push	r22
     548:	7f 93       	push	r23
     54a:	8f 93       	push	r24
     54c:	9f 93       	push	r25
     54e:	af 93       	push	r26
     550:	bf 93       	push	r27
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
	TIMER_RESET;

	// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
	// digitalRead() is very slow. Optimisation is possible, but makes the code unportable
	uint8_t  irdata = (uint8_t)digitalRead(irparams.recvpin);
     55a:	ca e0       	ldi	r28, 0x0A	; 10
     55c:	d1 e0       	ldi	r29, 0x01	; 1
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	3e df       	rcall	.-388    	; 0x3de <digitalRead>

	irparams.timer++;  // One more 50uS tick
     562:	2d 81       	ldd	r18, Y+5	; 0x05
     564:	3e 81       	ldd	r19, Y+6	; 0x06
     566:	2f 5f       	subi	r18, 0xFF	; 255
     568:	3f 4f       	sbci	r19, 0xFF	; 255
     56a:	3e 83       	std	Y+6, r19	; 0x06
     56c:	2d 83       	std	Y+5, r18	; 0x05
	if (irparams.rawlen >= RAWBUF)  irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
     56e:	9c 81       	ldd	r25, Y+4	; 0x04
     570:	95 36       	cpi	r25, 0x65	; 101
     572:	18 f0       	brcs	.+6      	; 0x57a <__vector_32+0x4a>
     574:	96 e0       	ldi	r25, 0x06	; 6
     576:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <irparams>

	switch(irparams.rcvstate) {
     57a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <irparams>
     57e:	94 30       	cpi	r25, 0x04	; 4
     580:	09 f4       	brne	.+2      	; 0x584 <__vector_32+0x54>
     582:	5a c0       	rjmp	.+180    	; 0x638 <__vector_32+0x108>
     584:	28 f4       	brcc	.+10     	; 0x590 <__vector_32+0x60>
     586:	92 30       	cpi	r25, 0x02	; 2
     588:	51 f0       	breq	.+20     	; 0x59e <__vector_32+0x6e>
     58a:	93 30       	cpi	r25, 0x03	; 3
     58c:	b9 f1       	breq	.+110    	; 0x5fc <__vector_32+0xcc>
     58e:	8a c0       	rjmp	.+276    	; 0x6a4 <__vector_32+0x174>
     590:	95 30       	cpi	r25, 0x05	; 5
     592:	09 f4       	brne	.+2      	; 0x596 <__vector_32+0x66>
     594:	7a c0       	rjmp	.+244    	; 0x68a <__vector_32+0x15a>
     596:	96 30       	cpi	r25, 0x06	; 6
     598:	09 f4       	brne	.+2      	; 0x59c <__vector_32+0x6c>
     59a:	7e c0       	rjmp	.+252    	; 0x698 <__vector_32+0x168>
     59c:	83 c0       	rjmp	.+262    	; 0x6a4 <__vector_32+0x174>
		//......................................................................
		case STATE_IDLE: // In the middle of a gap
			if (irdata == MARK) {
     59e:	81 11       	cpse	r24, r1
     5a0:	9d c0       	rjmp	.+314    	; 0x6dc <__vector_32+0x1ac>
				if (irparams.timer < GAP_TICKS)  {  // Not big enough to be a gap.
     5a2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <irparams+0x5>
     5a6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <irparams+0x6>
     5aa:	84 36       	cpi	r24, 0x64	; 100
     5ac:	91 05       	cpc	r25, r1
     5ae:	28 f4       	brcc	.+10     	; 0x5ba <__vector_32+0x8a>
					irparams.timer = 0;
     5b0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <irparams+0x6>
     5b4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <irparams+0x5>
     5b8:	96 c0       	rjmp	.+300    	; 0x6e6 <__vector_32+0x1b6>

				} else {
					// Gap just ended; Record duration; Start recording transmission
					irparams.overflow                  = false;
     5ba:	aa e0       	ldi	r26, 0x0A	; 10
     5bc:	b1 e0       	ldi	r27, 0x01	; 1
     5be:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <irparams+0xd1>
					irparams.rawlen                    = 0;
     5c2:	14 96       	adiw	r26, 0x04	; 4
     5c4:	1c 92       	st	X, r1
     5c6:	14 97       	sbiw	r26, 0x04	; 4
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     5c8:	14 96       	adiw	r26, 0x04	; 4
     5ca:	ec 91       	ld	r30, X
     5cc:	14 97       	sbiw	r26, 0x04	; 4
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	8e 0f       	add	r24, r30
     5d2:	14 96       	adiw	r26, 0x04	; 4
     5d4:	8c 93       	st	X, r24
     5d6:	14 97       	sbiw	r26, 0x04	; 4
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	15 96       	adiw	r26, 0x05	; 5
     5dc:	8d 91       	ld	r24, X+
     5de:	9c 91       	ld	r25, X
     5e0:	16 97       	sbiw	r26, 0x06	; 6
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	e6 5f       	subi	r30, 0xF6	; 246
     5e8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ea:	90 87       	std	Z+8, r25	; 0x08
     5ec:	87 83       	std	Z+7, r24	; 0x07
					irparams.timer                     = 0;
     5ee:	16 96       	adiw	r26, 0x06	; 6
     5f0:	1c 92       	st	X, r1
     5f2:	1e 92       	st	-X, r1
     5f4:	15 97       	sbiw	r26, 0x05	; 5
					irparams.rcvstate                  = STATE_MARK;
     5f6:	83 e0       	ldi	r24, 0x03	; 3
     5f8:	8c 93       	st	X, r24
     5fa:	75 c0       	rjmp	.+234    	; 0x6e6 <__vector_32+0x1b6>
				}
			}
			break;
		//......................................................................
		case STATE_MARK:  // Timing Mark
			if (irdata == SPACE) {   // Mark ended; Record time
     5fc:	81 30       	cpi	r24, 0x01	; 1
     5fe:	09 f0       	breq	.+2      	; 0x602 <__vector_32+0xd2>
     600:	51 c0       	rjmp	.+162    	; 0x6a4 <__vector_32+0x174>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     602:	aa e0       	ldi	r26, 0x0A	; 10
     604:	b1 e0       	ldi	r27, 0x01	; 1
     606:	14 96       	adiw	r26, 0x04	; 4
     608:	ec 91       	ld	r30, X
     60a:	14 97       	sbiw	r26, 0x04	; 4
     60c:	8e 0f       	add	r24, r30
     60e:	14 96       	adiw	r26, 0x04	; 4
     610:	8c 93       	st	X, r24
     612:	14 97       	sbiw	r26, 0x04	; 4
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	15 96       	adiw	r26, 0x05	; 5
     618:	8d 91       	ld	r24, X+
     61a:	9c 91       	ld	r25, X
     61c:	16 97       	sbiw	r26, 0x06	; 6
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	e6 5f       	subi	r30, 0xF6	; 246
     624:	fe 4f       	sbci	r31, 0xFE	; 254
     626:	90 87       	std	Z+8, r25	; 0x08
     628:	87 83       	std	Z+7, r24	; 0x07
				irparams.timer                     = 0;
     62a:	16 96       	adiw	r26, 0x06	; 6
     62c:	1c 92       	st	X, r1
     62e:	1e 92       	st	-X, r1
     630:	15 97       	sbiw	r26, 0x05	; 5
				irparams.rcvstate                  = STATE_SPACE;
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	8c 93       	st	X, r24
     636:	52 c0       	rjmp	.+164    	; 0x6dc <__vector_32+0x1ac>
			}
			break;
		//......................................................................
		case STATE_SPACE:  // Timing Space
			if (irdata == MARK) {  // Space just ended; Record time
     638:	81 11       	cpse	r24, r1
     63a:	1c c0       	rjmp	.+56     	; 0x674 <__vector_32+0x144>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     63c:	aa e0       	ldi	r26, 0x0A	; 10
     63e:	b1 e0       	ldi	r27, 0x01	; 1
     640:	14 96       	adiw	r26, 0x04	; 4
     642:	ec 91       	ld	r30, X
     644:	14 97       	sbiw	r26, 0x04	; 4
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	8e 0f       	add	r24, r30
     64a:	14 96       	adiw	r26, 0x04	; 4
     64c:	8c 93       	st	X, r24
     64e:	14 97       	sbiw	r26, 0x04	; 4
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	15 96       	adiw	r26, 0x05	; 5
     654:	8d 91       	ld	r24, X+
     656:	9c 91       	ld	r25, X
     658:	16 97       	sbiw	r26, 0x06	; 6
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	e6 5f       	subi	r30, 0xF6	; 246
     660:	fe 4f       	sbci	r31, 0xFE	; 254
     662:	90 87       	std	Z+8, r25	; 0x08
     664:	87 83       	std	Z+7, r24	; 0x07
				irparams.timer                     = 0;
     666:	16 96       	adiw	r26, 0x06	; 6
     668:	1c 92       	st	X, r1
     66a:	1e 92       	st	-X, r1
     66c:	15 97       	sbiw	r26, 0x05	; 5
				irparams.rcvstate                  = STATE_MARK;
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	8c 93       	st	X, r24
     672:	39 c0       	rjmp	.+114    	; 0x6e6 <__vector_32+0x1b6>

			} else if (irparams.timer > GAP_TICKS) {  // Space
     674:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <irparams+0x5>
     678:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <irparams+0x6>
     67c:	85 36       	cpi	r24, 0x65	; 101
     67e:	91 05       	cpc	r25, r1
     680:	68 f1       	brcs	.+90     	; 0x6dc <__vector_32+0x1ac>
					// A long Space, indicates gap between codes
					// Flag the current code as ready for processing
					// Switch to STOP
					// Don't reset timer; keep counting Space width
					irparams.rcvstate = STATE_STOP;
     682:	85 e0       	ldi	r24, 0x05	; 5
     684:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <irparams>
     688:	29 c0       	rjmp	.+82     	; 0x6dc <__vector_32+0x1ac>
			}
			break;
		//......................................................................
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
     68a:	81 11       	cpse	r24, r1
     68c:	27 c0       	rjmp	.+78     	; 0x6dc <__vector_32+0x1ac>
     68e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <irparams+0x6>
     692:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <irparams+0x5>
     696:	27 c0       	rjmp	.+78     	; 0x6e6 <__vector_32+0x1b6>
		 	break;
		//......................................................................
		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <irparams+0xd1>
			irparams.rcvstate = STATE_STOP;
     69e:	95 e0       	ldi	r25, 0x05	; 5
     6a0:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <irparams>
		 	break;
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
     6a4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <irparams+0x3>
     6a8:	99 23       	and	r25, r25
     6aa:	09 f1       	breq	.+66     	; 0x6ee <__vector_32+0x1be>
		if (irdata == MARK)
     6ac:	81 11       	cpse	r24, r1
     6ae:	0b c0       	rjmp	.+22     	; 0x6c6 <__vector_32+0x196>
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
     6b0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <irparams+0x2>
     6b4:	88 23       	and	r24, r24
     6b6:	29 f0       	breq	.+10     	; 0x6c2 <__vector_32+0x192>
     6b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <irparams+0x2>
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	5f de       	rcall	.-834    	; 0x37e <digitalWrite>
     6c0:	16 c0       	rjmp	.+44     	; 0x6ee <__vector_32+0x1be>
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
     6c2:	2d 9a       	sbi	0x05, 5	; 5
     6c4:	14 c0       	rjmp	.+40     	; 0x6ee <__vector_32+0x1be>
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
     6c6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <irparams+0x2>
     6ca:	88 23       	and	r24, r24
     6cc:	29 f0       	breq	.+10     	; 0x6d8 <__vector_32+0x1a8>
     6ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <irparams+0x2>
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	54 de       	rcall	.-856    	; 0x37e <digitalWrite>
     6d6:	0b c0       	rjmp	.+22     	; 0x6ee <__vector_32+0x1be>
				else BLINKLED_OFF() ;   // if no user defined LED pin, turn default LED pin for the hardware on
     6d8:	2d 98       	cbi	0x05, 5	; 5
	}
}
     6da:	09 c0       	rjmp	.+18     	; 0x6ee <__vector_32+0x1be>
			irparams.rcvstate = STATE_STOP;
		 	break;
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
     6dc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <irparams+0x3>
     6e0:	81 11       	cpse	r24, r1
     6e2:	f1 cf       	rjmp	.-30     	; 0x6c6 <__vector_32+0x196>
     6e4:	04 c0       	rjmp	.+8      	; 0x6ee <__vector_32+0x1be>
     6e6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <irparams+0x3>
     6ea:	81 11       	cpse	r24, r1
     6ec:	e1 cf       	rjmp	.-62     	; 0x6b0 <__vector_32+0x180>
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
				else BLINKLED_OFF() ;   // if no user defined LED pin, turn default LED pin for the hardware on
	}
}
     6ee:	ff 91       	pop	r31
     6f0:	ef 91       	pop	r30
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	bf 91       	pop	r27
     6f8:	af 91       	pop	r26
     6fa:	9f 91       	pop	r25
     6fc:	8f 91       	pop	r24
     6fe:	7f 91       	pop	r23
     700:	6f 91       	pop	r22
     702:	5f 91       	pop	r21
     704:	4f 91       	pop	r20
     706:	3f 91       	pop	r19
     708:	2f 91       	pop	r18
     70a:	0f 90       	pop	r0
     70c:	0b be       	out	0x3b, r0	; 59
     70e:	0f 90       	pop	r0
     710:	0f be       	out	0x3f, r0	; 63
     712:	0f 90       	pop	r0
     714:	1f 90       	pop	r1
     716:	18 95       	reti

00000718 <_ZN6IRsend11enableIROutEi>:
// To turn the output on and off, we leave the PWM running, but connect and disconnect the output pin.
// A few hours staring at the ATmega documentation and this will all make sense.
// See my Secrets of Arduino PWM at http://arcfn.com/2009/07/secrets-of-arduino-pwm.html for details.
//
void  IRsend::enableIROut (int khz)
{
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	eb 01       	movw	r28, r22
// FIXME: implement ESP32 support, see IR_TIMER_USE_ESP32 in boarddefs.h
#ifndef ESP32
	// Disable the Timer2 Interrupt (which is used for receiving IR)
	TIMER_DISABLE_INTR; //Timer2 Overflow Interrupt
     71e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>

	pinMode(TIMER_PWM_PIN, OUTPUT);
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	86 e0       	ldi	r24, 0x06	; 6
     726:	ec dd       	rcall	.-1064   	; 0x300 <pinMode>
	digitalWrite(TIMER_PWM_PIN, LOW); // When not sending PWM, we want it low
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	86 e0       	ldi	r24, 0x06	; 6
     72c:	28 de       	rcall	.-944    	; 0x37e <digitalWrite>
	// COM2A = 00: disconnect OC2A
	// COM2B = 00: disconnect OC2B; to send signal set to 10: OC2B non-inverted
	// WGM2 = 101: phase-correct PWM with OCRA as top
	// CS2  = 000: no prescaling
	// The top value for the timer.  The modulation frequency will be SYSCLOCK / 2 / OCR2A.
	TIMER_CONFIG_KHZ(khz);
     72e:	9e 01       	movw	r18, r28
     730:	dd 0f       	add	r29, r29
     732:	44 0b       	sbc	r20, r20
     734:	55 0b       	sbc	r21, r21
     736:	60 e4       	ldi	r22, 0x40	; 64
     738:	7f e1       	ldi	r23, 0x1F	; 31
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     748:	81 e1       	ldi	r24, 0x11	; 17
     74a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     74e:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     752:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
     756:	ab ea       	ldi	r26, 0xAB	; 171
     758:	ba ea       	ldi	r27, 0xAA	; 170
     75a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__umulhisi3>
     75e:	96 95       	lsr	r25
     760:	87 95       	ror	r24
     762:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     766:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
#endif
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <_ZN6IRsend17custom_delay_usecEm>:

//+=============================================================================
// Custom delay function that circumvents Arduino's delayMicroseconds limit

void IRsend::custom_delay_usec(unsigned long uSecs) {
     770:	8f 92       	push	r8
     772:	9f 92       	push	r9
     774:	af 92       	push	r10
     776:	bf 92       	push	r11
     778:	cf 92       	push	r12
     77a:	df 92       	push	r13
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
  if (uSecs > 4) {
     780:	45 30       	cpi	r20, 0x05	; 5
     782:	51 05       	cpc	r21, r1
     784:	61 05       	cpc	r22, r1
     786:	71 05       	cpc	r23, r1
     788:	f8 f0       	brcs	.+62     	; 0x7c8 <_ZN6IRsend17custom_delay_usecEm+0x58>
     78a:	6a 01       	movw	r12, r20
     78c:	7b 01       	movw	r14, r22
    unsigned long start = micros();
     78e:	49 dd       	rcall	.-1390   	; 0x222 <micros>
     790:	4b 01       	movw	r8, r22
     792:	5c 01       	movw	r10, r24
    unsigned long endMicros = start + uSecs - 4;
     794:	84 e0       	ldi	r24, 0x04	; 4
     796:	c8 1a       	sub	r12, r24
     798:	d1 08       	sbc	r13, r1
     79a:	e1 08       	sbc	r14, r1
     79c:	f1 08       	sbc	r15, r1
     79e:	c8 0c       	add	r12, r8
     7a0:	d9 1c       	adc	r13, r9
     7a2:	ea 1c       	adc	r14, r10
     7a4:	fb 1c       	adc	r15, r11
    if (endMicros < start) { // Check if overflow
     7a6:	c8 14       	cp	r12, r8
     7a8:	d9 04       	cpc	r13, r9
     7aa:	ea 04       	cpc	r14, r10
     7ac:	fb 04       	cpc	r15, r11
      while ( micros() > start ) {} // wait until overflow
     7ae:	30 f4       	brcc	.+12     	; 0x7bc <_ZN6IRsend17custom_delay_usecEm+0x4c>
     7b0:	38 dd       	rcall	.-1424   	; 0x222 <micros>
     7b2:	86 16       	cp	r8, r22
     7b4:	97 06       	cpc	r9, r23
     7b6:	a8 06       	cpc	r10, r24
     7b8:	b9 06       	cpc	r11, r25
    }
    while ( micros() < endMicros ) {} // normal wait
     7ba:	d0 f3       	brcs	.-12     	; 0x7b0 <_ZN6IRsend17custom_delay_usecEm+0x40>
     7bc:	32 dd       	rcall	.-1436   	; 0x222 <micros>
     7be:	6c 15       	cp	r22, r12
     7c0:	7d 05       	cpc	r23, r13
     7c2:	8e 05       	cpc	r24, r14
     7c4:	9f 05       	cpc	r25, r15
     7c6:	d0 f3       	brcs	.-12     	; 0x7bc <_ZN6IRsend17custom_delay_usecEm+0x4c>
  } 
  //else {
  //  __asm__("nop\n\t"); // must have or compiler optimizes out
  //}
}
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	df 90       	pop	r13
     7ce:	cf 90       	pop	r12
     7d0:	bf 90       	pop	r11
     7d2:	af 90       	pop	r10
     7d4:	9f 90       	pop	r9
     7d6:	8f 90       	pop	r8
     7d8:	08 95       	ret

000007da <_ZN6IRsend4markEj>:
//+=============================================================================
// Sends an IR mark for the specified number of microseconds.
// The mark output is modulated at the PWM frequency.
//
void  IRsend::mark (unsigned int time)
{
     7da:	9c 01       	movw	r18, r24
	TIMER_ENABLE_PWM; // Enable pin 3 PWM output
     7dc:	e0 e9       	ldi	r30, 0x90	; 144
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	90 81       	ld	r25, Z
     7e2:	90 68       	ori	r25, 0x80	; 128
     7e4:	90 83       	st	Z, r25
	if (time > 0) custom_delay_usec(time);
     7e6:	61 15       	cp	r22, r1
     7e8:	71 05       	cpc	r23, r1
     7ea:	29 f0       	breq	.+10     	; 0x7f6 <_ZN6IRsend4markEj+0x1c>
     7ec:	c9 01       	movw	r24, r18
     7ee:	ab 01       	movw	r20, r22
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	bd cf       	rjmp	.-134    	; 0x770 <_ZN6IRsend17custom_delay_usecEm>
     7f6:	08 95       	ret

000007f8 <_ZN6IRsend5spaceEj>:
// Leave pin off for time (given in microseconds)
// Sends an IR space for the specified number of microseconds.
// A space is no output, so the PWM output is disabled.
//
void  IRsend::space (unsigned int time)
{
     7f8:	9c 01       	movw	r18, r24
	TIMER_DISABLE_PWM; // Disable pin 3 PWM output
     7fa:	e0 e9       	ldi	r30, 0x90	; 144
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	90 81       	ld	r25, Z
     800:	9f 77       	andi	r25, 0x7F	; 127
     802:	90 83       	st	Z, r25
	if (time > 0) IRsend::custom_delay_usec(time);
     804:	61 15       	cp	r22, r1
     806:	71 05       	cpc	r23, r1
     808:	29 f0       	breq	.+10     	; 0x814 <_ZN6IRsend5spaceEj+0x1c>
     80a:	c9 01       	movw	r24, r18
     80c:	ab 01       	movw	r20, r22
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	ae cf       	rjmp	.-164    	; 0x770 <_ZN6IRsend17custom_delay_usecEm>
     814:	08 95       	ret

00000816 <_ZN6IRsend7sendNECEmi>:
#define NEC_RPT_SPACE   2250

//+=============================================================================
#if SEND_NEC
void  IRsend::sendNEC (unsigned long data,  int nbits)
{
     816:	8f 92       	push	r8
     818:	9f 92       	push	r9
     81a:	af 92       	push	r10
     81c:	bf 92       	push	r11
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	ec 01       	movw	r28, r24
     82c:	4a 01       	movw	r8, r20
     82e:	5b 01       	movw	r10, r22
     830:	79 01       	movw	r14, r18
	// Set IR carrier frequency
	enableIROut(38);
     832:	66 e2       	ldi	r22, 0x26	; 38
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	70 df       	rcall	.-288    	; 0x718 <_ZN6IRsend11enableIROutEi>

	// Header
	mark(NEC_HDR_MARK);
     838:	68 e2       	ldi	r22, 0x28	; 40
     83a:	73 e2       	ldi	r23, 0x23	; 35
     83c:	ce 01       	movw	r24, r28
     83e:	cd df       	rcall	.-102    	; 0x7da <_ZN6IRsend4markEj>
	space(NEC_HDR_SPACE);
     840:	64 e9       	ldi	r22, 0x94	; 148
     842:	71 e1       	ldi	r23, 0x11	; 17
     844:	ce 01       	movw	r24, r28
     846:	d8 df       	rcall	.-80     	; 0x7f8 <_ZN6IRsend5spaceEj>

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
     848:	c7 01       	movw	r24, r14
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	c1 2c       	mov	r12, r1
     84e:	d1 2c       	mov	r13, r1
     850:	76 01       	movw	r14, r12
     852:	c3 94       	inc	r12
     854:	04 c0       	rjmp	.+8      	; 0x85e <_ZN6IRsend7sendNECEmi+0x48>
     856:	cc 0c       	add	r12, r12
     858:	dd 1c       	adc	r13, r13
     85a:	ee 1c       	adc	r14, r14
     85c:	ff 1c       	adc	r15, r15
     85e:	8a 95       	dec	r24
     860:	d2 f7       	brpl	.-12     	; 0x856 <_ZN6IRsend7sendNECEmi+0x40>
     862:	c1 14       	cp	r12, r1
     864:	d1 04       	cpc	r13, r1
     866:	e1 04       	cpc	r14, r1
     868:	f1 04       	cpc	r15, r1
     86a:	21 f1       	breq	.+72     	; 0x8b4 <_ZN6IRsend7sendNECEmi+0x9e>
		if (data & mask) {
     86c:	d5 01       	movw	r26, r10
     86e:	c4 01       	movw	r24, r8
     870:	8c 21       	and	r24, r12
     872:	9d 21       	and	r25, r13
     874:	ae 21       	and	r26, r14
     876:	bf 21       	and	r27, r15
     878:	89 2b       	or	r24, r25
     87a:	8a 2b       	or	r24, r26
     87c:	8b 2b       	or	r24, r27
     87e:	49 f0       	breq	.+18     	; 0x892 <_ZN6IRsend7sendNECEmi+0x7c>
			mark(NEC_BIT_MARK);
     880:	60 e3       	ldi	r22, 0x30	; 48
     882:	72 e0       	ldi	r23, 0x02	; 2
     884:	ce 01       	movw	r24, r28
     886:	a9 df       	rcall	.-174    	; 0x7da <_ZN6IRsend4markEj>
			space(NEC_ONE_SPACE);
     888:	6a e9       	ldi	r22, 0x9A	; 154
     88a:	76 e0       	ldi	r23, 0x06	; 6
     88c:	ce 01       	movw	r24, r28
     88e:	b4 df       	rcall	.-152    	; 0x7f8 <_ZN6IRsend5spaceEj>
     890:	08 c0       	rjmp	.+16     	; 0x8a2 <_ZN6IRsend7sendNECEmi+0x8c>
		} else {
			mark(NEC_BIT_MARK);
     892:	60 e3       	ldi	r22, 0x30	; 48
     894:	72 e0       	ldi	r23, 0x02	; 2
     896:	ce 01       	movw	r24, r28
     898:	a0 df       	rcall	.-192    	; 0x7da <_ZN6IRsend4markEj>
			space(NEC_ZERO_SPACE);
     89a:	60 e3       	ldi	r22, 0x30	; 48
     89c:	72 e0       	ldi	r23, 0x02	; 2
     89e:	ce 01       	movw	r24, r28
     8a0:	ab df       	rcall	.-170    	; 0x7f8 <_ZN6IRsend5spaceEj>
     8a2:	f6 94       	lsr	r15
	// Header
	mark(NEC_HDR_MARK);
	space(NEC_HDR_SPACE);

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
     8a4:	e7 94       	ror	r14
     8a6:	d7 94       	ror	r13
     8a8:	c7 94       	ror	r12
     8aa:	c1 14       	cp	r12, r1
     8ac:	d1 04       	cpc	r13, r1
     8ae:	e1 04       	cpc	r14, r1
     8b0:	f1 04       	cpc	r15, r1
     8b2:	e1 f6       	brne	.-72     	; 0x86c <_ZN6IRsend7sendNECEmi+0x56>
			space(NEC_ZERO_SPACE);
		}
	}

	// Footer
	mark(NEC_BIT_MARK);
     8b4:	60 e3       	ldi	r22, 0x30	; 48
     8b6:	72 e0       	ldi	r23, 0x02	; 2
     8b8:	ce 01       	movw	r24, r28
     8ba:	8f df       	rcall	.-226    	; 0x7da <_ZN6IRsend4markEj>
	space(0);  // Always end with the LED off
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	ce 01       	movw	r24, r28
     8c2:	9a df       	rcall	.-204    	; 0x7f8 <_ZN6IRsend5spaceEj>
     8c4:	df 91       	pop	r29
}
     8c6:	cf 91       	pop	r28
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	af 90       	pop	r10
     8d4:	9f 90       	pop	r9
     8d6:	8f 90       	pop	r8
     8d8:	08 95       	ret

000008da <_Z7ampInith>:
     8da:	cf 93       	push	r28
#ifndef COMMONFUNCTIONS_H_
#define COMMONFUNCTIONS_H_

unsigned long toMillis(unsigned long min, unsigned long sec){
	return (((min*60+sec)*(unsigned long)1000));
}
     8dc:	df 93       	push	r29
     8de:	c8 2f       	mov	r28, r24
     8e0:	c6 dc       	rcall	.-1652   	; 0x26e <init>
     8e2:	dc 2f       	mov	r29, r28
     8e4:	dd 0f       	add	r29, r29
     8e6:	dd 0f       	add	r29, r29
     8e8:	dc 0f       	add	r29, r28
     8ea:	d0 32       	cpi	r29, 0x20	; 32
     8ec:	08 f4       	brcc	.+2      	; 0x8f0 <_Z7ampInith+0x16>
     8ee:	d0 e2       	ldi	r29, 0x20	; 32
     8f0:	c0 e0       	ldi	r28, 0x00	; 0
     8f2:	20 e2       	ldi	r18, 0x20	; 32
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	4d e9       	ldi	r20, 0x9D	; 157
     8f8:	52 e6       	ldi	r21, 0x62	; 98
     8fa:	6f ef       	ldi	r22, 0xFF	; 255
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	8c ed       	ldi	r24, 0xDC	; 220
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	89 df       	rcall	.-238    	; 0x816 <_ZN6IRsend7sendNECEmi>
     904:	2f e7       	ldi	r18, 0x7F	; 127
     906:	82 e3       	ldi	r24, 0x32	; 50
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	21 50       	subi	r18, 0x01	; 1
     90c:	80 40       	sbci	r24, 0x00	; 0
     90e:	90 40       	sbci	r25, 0x00	; 0
     910:	e1 f7       	brne	.-8      	; 0x90a <_Z7ampInith+0x30>
     912:	00 c0       	rjmp	.+0      	; 0x914 <_Z7ampInith+0x3a>
     914:	00 00       	nop
     916:	20 e2       	ldi	r18, 0x20	; 32
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	47 e9       	ldi	r20, 0x97	; 151
     91c:	58 e6       	ldi	r21, 0x68	; 104
     91e:	6f ef       	ldi	r22, 0xFF	; 255
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	8c ed       	ldi	r24, 0xDC	; 220
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	77 df       	rcall	.-274    	; 0x816 <_ZN6IRsend7sendNECEmi>
     928:	2f e7       	ldi	r18, 0x7F	; 127
     92a:	82 e3       	ldi	r24, 0x32	; 50
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	21 50       	subi	r18, 0x01	; 1
     930:	80 40       	sbci	r24, 0x00	; 0
     932:	90 40       	sbci	r25, 0x00	; 0
     934:	e1 f7       	brne	.-8      	; 0x92e <_Z7ampInith+0x54>
     936:	00 c0       	rjmp	.+0      	; 0x938 <_Z7ampInith+0x5e>
     938:	00 00       	nop
     93a:	cf 5f       	subi	r28, 0xFF	; 255
     93c:	dc 17       	cp	r29, r28
     93e:	c8 f6       	brcc	.-78     	; 0x8f2 <_Z7ampInith+0x18>
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	08 95       	ret

00000946 <_Z12ampStopAudiov>:
     946:	cf 93       	push	r28
     948:	c1 e2       	ldi	r28, 0x21	; 33
     94a:	20 e2       	ldi	r18, 0x20	; 32
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	4d e9       	ldi	r20, 0x9D	; 157
     950:	52 e6       	ldi	r21, 0x62	; 98
     952:	6f ef       	ldi	r22, 0xFF	; 255
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	8c ed       	ldi	r24, 0xDC	; 220
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	5d df       	rcall	.-326    	; 0x816 <_ZN6IRsend7sendNECEmi>
     95c:	2f e7       	ldi	r18, 0x7F	; 127
     95e:	82 e3       	ldi	r24, 0x32	; 50
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	21 50       	subi	r18, 0x01	; 1
     964:	80 40       	sbci	r24, 0x00	; 0
     966:	90 40       	sbci	r25, 0x00	; 0
     968:	e1 f7       	brne	.-8      	; 0x962 <_Z12ampStopAudiov+0x1c>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <_Z12ampStopAudiov+0x26>
     96c:	00 00       	nop
     96e:	20 e2       	ldi	r18, 0x20	; 32
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	47 e9       	ldi	r20, 0x97	; 151
     974:	58 e6       	ldi	r21, 0x68	; 104
     976:	6f ef       	ldi	r22, 0xFF	; 255
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	8c ed       	ldi	r24, 0xDC	; 220
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	4b df       	rcall	.-362    	; 0x816 <_ZN6IRsend7sendNECEmi>
     980:	2f e7       	ldi	r18, 0x7F	; 127
     982:	82 e3       	ldi	r24, 0x32	; 50
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	21 50       	subi	r18, 0x01	; 1
     988:	80 40       	sbci	r24, 0x00	; 0
     98a:	90 40       	sbci	r25, 0x00	; 0
     98c:	e1 f7       	brne	.-8      	; 0x986 <_Z12ampStopAudiov+0x40>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <_Z12ampStopAudiov+0x4a>
     990:	00 00       	nop
     992:	c1 50       	subi	r28, 0x01	; 1
     994:	d1 f6       	brne	.-76     	; 0x94a <_Z12ampStopAudiov+0x4>
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <_Z12ampPlayAudioh8language>:
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	d8 2f       	mov	r29, r24
     9a0:	81 32       	cpi	r24, 0x21	; 33
     9a2:	08 f0       	brcs	.+2      	; 0x9a6 <_Z12ampPlayAudioh8language+0xc>
     9a4:	d0 e2       	ldi	r29, 0x20	; 32
     9a6:	61 30       	cpi	r22, 0x01	; 1
     9a8:	01 f1       	breq	.+64     	; 0x9ea <_Z12ampPlayAudioh8language+0x50>
     9aa:	18 f0       	brcs	.+6      	; 0x9b2 <_Z12ampPlayAudioh8language+0x18>
     9ac:	62 30       	cpi	r22, 0x02	; 2
     9ae:	c9 f1       	breq	.+114    	; 0xa22 <_Z12ampPlayAudioh8language+0x88>
     9b0:	53 c0       	rjmp	.+166    	; 0xa58 <_Z12ampPlayAudioh8language+0xbe>
     9b2:	20 e2       	ldi	r18, 0x20	; 32
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	4f e6       	ldi	r20, 0x6F	; 111
     9b8:	50 e9       	ldi	r21, 0x90	; 144
     9ba:	6f ef       	ldi	r22, 0xFF	; 255
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	8c ed       	ldi	r24, 0xDC	; 220
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	29 df       	rcall	.-430    	; 0x816 <_ZN6IRsend7sendNECEmi>
     9c4:	2f e7       	ldi	r18, 0x7F	; 127
     9c6:	82 e3       	ldi	r24, 0x32	; 50
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	21 50       	subi	r18, 0x01	; 1
     9cc:	80 40       	sbci	r24, 0x00	; 0
     9ce:	90 40       	sbci	r25, 0x00	; 0
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <_Z12ampPlayAudioh8language+0x30>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <_Z12ampPlayAudioh8language+0x3a>
     9d4:	00 00       	nop
     9d6:	20 e2       	ldi	r18, 0x20	; 32
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	4f ec       	ldi	r20, 0xCF	; 207
     9dc:	50 e3       	ldi	r21, 0x30	; 48
     9de:	6f ef       	ldi	r22, 0xFF	; 255
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	8c ed       	ldi	r24, 0xDC	; 220
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	17 df       	rcall	.-466    	; 0x816 <_ZN6IRsend7sendNECEmi>
     9e8:	37 c0       	rjmp	.+110    	; 0xa58 <_Z12ampPlayAudioh8language+0xbe>
     9ea:	20 e2       	ldi	r18, 0x20	; 32
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	4f e6       	ldi	r20, 0x6F	; 111
     9f0:	50 e9       	ldi	r21, 0x90	; 144
     9f2:	6f ef       	ldi	r22, 0xFF	; 255
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	8c ed       	ldi	r24, 0xDC	; 220
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	0d df       	rcall	.-486    	; 0x816 <_ZN6IRsend7sendNECEmi>
     9fc:	2f e7       	ldi	r18, 0x7F	; 127
     9fe:	82 e3       	ldi	r24, 0x32	; 50
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	21 50       	subi	r18, 0x01	; 1
     a04:	80 40       	sbci	r24, 0x00	; 0
     a06:	90 40       	sbci	r25, 0x00	; 0
     a08:	e1 f7       	brne	.-8      	; 0xa02 <_Z12ampPlayAudioh8language+0x68>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <_Z12ampPlayAudioh8language+0x72>
     a0c:	00 00       	nop
     a0e:	20 e2       	ldi	r18, 0x20	; 32
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	47 ee       	ldi	r20, 0xE7	; 231
     a14:	58 e1       	ldi	r21, 0x18	; 24
     a16:	6f ef       	ldi	r22, 0xFF	; 255
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	8c ed       	ldi	r24, 0xDC	; 220
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	fb de       	rcall	.-522    	; 0x816 <_ZN6IRsend7sendNECEmi>
     a20:	1b c0       	rjmp	.+54     	; 0xa58 <_Z12ampPlayAudioh8language+0xbe>
     a22:	20 e2       	ldi	r18, 0x20	; 32
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	4f e6       	ldi	r20, 0x6F	; 111
     a28:	50 e9       	ldi	r21, 0x90	; 144
     a2a:	6f ef       	ldi	r22, 0xFF	; 255
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	8c ed       	ldi	r24, 0xDC	; 220
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	f1 de       	rcall	.-542    	; 0x816 <_ZN6IRsend7sendNECEmi>
     a34:	2f e7       	ldi	r18, 0x7F	; 127
     a36:	82 e3       	ldi	r24, 0x32	; 50
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	21 50       	subi	r18, 0x01	; 1
     a3c:	80 40       	sbci	r24, 0x00	; 0
     a3e:	90 40       	sbci	r25, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <_Z12ampPlayAudioh8language+0xa0>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <_Z12ampPlayAudioh8language+0xaa>
     a44:	00 00       	nop
     a46:	20 e2       	ldi	r18, 0x20	; 32
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	45 e8       	ldi	r20, 0x85	; 133
     a4c:	5a e7       	ldi	r21, 0x7A	; 122
     a4e:	6f ef       	ldi	r22, 0xFF	; 255
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	8c ed       	ldi	r24, 0xDC	; 220
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	df de       	rcall	.-578    	; 0x816 <_ZN6IRsend7sendNECEmi>
     a58:	2f e7       	ldi	r18, 0x7F	; 127
     a5a:	82 e3       	ldi	r24, 0x32	; 50
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	21 50       	subi	r18, 0x01	; 1
     a60:	80 40       	sbci	r24, 0x00	; 0
     a62:	90 40       	sbci	r25, 0x00	; 0
     a64:	e1 f7       	brne	.-8      	; 0xa5e <_Z12ampPlayAudioh8language+0xc4>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <_Z12ampPlayAudioh8language+0xce>
     a68:	00 00       	nop
     a6a:	20 e2       	ldi	r18, 0x20	; 32
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	4f e6       	ldi	r20, 0x6F	; 111
     a70:	50 e9       	ldi	r21, 0x90	; 144
     a72:	6f ef       	ldi	r22, 0xFF	; 255
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	8c ed       	ldi	r24, 0xDC	; 220
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	cd de       	rcall	.-614    	; 0x816 <_ZN6IRsend7sendNECEmi>
     a7c:	c0 e0       	ldi	r28, 0x00	; 0
     a7e:	20 e2       	ldi	r18, 0x20	; 32
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	47 e6       	ldi	r20, 0x67	; 103
     a84:	58 e9       	ldi	r21, 0x98	; 152
     a86:	6f ef       	ldi	r22, 0xFF	; 255
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	8c ed       	ldi	r24, 0xDC	; 220
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	c3 de       	rcall	.-634    	; 0x816 <_ZN6IRsend7sendNECEmi>
     a90:	2f e7       	ldi	r18, 0x7F	; 127
     a92:	82 e3       	ldi	r24, 0x32	; 50
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	21 50       	subi	r18, 0x01	; 1
     a98:	80 40       	sbci	r24, 0x00	; 0
     a9a:	90 40       	sbci	r25, 0x00	; 0
     a9c:	e1 f7       	brne	.-8      	; 0xa96 <_Z12ampPlayAudioh8language+0xfc>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <_Z12ampPlayAudioh8language+0x106>
     aa0:	00 00       	nop
     aa2:	cf 5f       	subi	r28, 0xFF	; 255
     aa4:	dc 17       	cp	r29, r28
     aa6:	58 f7       	brcc	.-42     	; 0xa7e <_Z12ampPlayAudioh8language+0xe4>
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <_Z14chooseLanguageh>:
		else if(!(PINA & _BV(HINDI_LANGUAGE_PIN))){
			ampPlayAudio(volume, HINDI);//3
			break;
		}
	}*/
	ampPlayAudio(volume, NEPALI);
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	74 cf       	rjmp	.-280    	; 0x99a <_Z12ampPlayAudioh8language>
     ab2:	08 95       	ret

00000ab4 <_Z14resetToInitialv>:
#define OFF 0
#define UP 1
#define DOWN 0

void resetToInitial(){
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER,AUDIENCE_LIGHT,0,6000);
     ab4:	20 e7       	ldi	r18, 0x70	; 112
     ab6:	37 e1       	ldi	r19, 0x17	; 23
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	65 e0       	ldi	r22, 0x05	; 5
     abc:	85 e4       	ldi	r24, 0x45	; 69
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	75 d6       	rcall	.+3306   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, BUDDHA_RIGHT_ELBOW, ON);
     ac2:	41 e0       	ldi	r20, 0x01	; 1
     ac4:	68 e0       	ldi	r22, 0x08	; 8
     ac6:	86 e4       	ldi	r24, 0x46	; 70
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	af d5       	rcall	.+2910   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, BUDDHA_LEFT_ELBOW, ON);
     acc:	41 e0       	ldi	r20, 0x01	; 1
     ace:	6a e0       	ldi	r22, 0x0A	; 10
     ad0:	86 e4       	ldi	r24, 0x46	; 70
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	aa d5       	rcall	.+2900   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_ONE, ON);
     ad6:	41 e0       	ldi	r20, 0x01	; 1
     ad8:	65 e0       	ldi	r22, 0x05	; 5
     ada:	86 e4       	ldi	r24, 0x46	; 70
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a5 d5       	rcall	.+2890   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_TWO, ON);
     ae0:	41 e0       	ldi	r20, 0x01	; 1
     ae2:	6e e0       	ldi	r22, 0x0E	; 14
     ae4:	86 e4       	ldi	r24, 0x46	; 70
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	a0 d5       	rcall	.+2880   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_THREE, ON);
     aea:	41 e0       	ldi	r20, 0x01	; 1
     aec:	62 e0       	ldi	r22, 0x02	; 2
     aee:	86 e4       	ldi	r24, 0x46	; 70
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	9b d5       	rcall	.+2870   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_FOUR, ON);
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	86 e4       	ldi	r24, 0x46	; 70
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	96 d5       	rcall	.+2860   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_FIVE, ON);
     afe:	41 e0       	ldi	r20, 0x01	; 1
     b00:	6c e0       	ldi	r22, 0x0C	; 12
     b02:	86 e4       	ldi	r24, 0x46	; 70
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	91 c5       	rjmp	.+2850   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
     b08:	08 95       	ret

00000b0a <_Z10playScriptv>:
     b0a:	0f 93       	push	r16
}

void playScript(){
	//TIME 0:0
	SlaveCtrlAPI::waitTill(toMillis(0,0));
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	cb 01       	movw	r24, r22
     b12:	7a d7       	rcall	.+3828   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER,AUDIENCE_LIGHT,0,7000);
     b14:	28 e5       	ldi	r18, 0x58	; 88
     b16:	3b e1       	ldi	r19, 0x1B	; 27
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	65 e0       	ldi	r22, 0x05	; 5
     b1c:	85 e4       	ldi	r24, 0x45	; 69
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	45 d6       	rcall	.+3210   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
	//DMX 9933cc (purple value) 20 second for 1 round ko speed
	SlaveCtrlAPI::dmxSweepAngle(DMX, PAN_MOTOR, 45, 255);
     b22:	2f ef       	ldi	r18, 0xFF	; 255
     b24:	4d e2       	ldi	r20, 0x2D	; 45
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	88 e4       	ldi	r24, 0x48	; 72
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	8f d6       	rcall	.+3358   	; 0x184e <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh>
	SlaveCtrlAPI::dmxSunStart(DMX);
     b30:	88 e4       	ldi	r24, 0x48	; 72
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	2b d7       	rcall	.+3670   	; 0x198c <_ZN12SlaveCtrlAPI11dmxSunStartEj>
     b36:	60 ed       	ldi	r22, 0xD0	; 208
	//speed slow
	
	//TIME 1:06
	SlaveCtrlAPI::waitTill(toMillis(1,6));
     b38:	71 e0       	ldi	r23, 0x01	; 1
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	64 d7       	rcall	.+3784   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
	//DMX
	SlaveCtrlAPI::dmxSunStop(DMX);
     b40:	88 e4       	ldi	r24, 0x48	; 72
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	42 d7       	rcall	.+3716   	; 0x19ca <_ZN12SlaveCtrlAPI10dmxSunStopEj>
	
	//TIME 1:39
	SlaveCtrlAPI::waitTill(toMillis(1,39));
     b46:	68 eb       	ldi	r22, 0xB8	; 184
     b48:	72 e8       	ldi	r23, 0x82	; 130
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	5c d7       	rcall	.+3768   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     b50:	2f ef       	ldi	r18, 0xFF	; 255
	SlaveCtrlAPI::dmxSweepAngle(DMX, PAN_MOTOR, 25, 255);
     b52:	49 e1       	ldi	r20, 0x19	; 25
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	88 e4       	ldi	r24, 0x48	; 72
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	78 d6       	rcall	.+3312   	; 0x184e <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh>
     b5e:	2f ef       	ldi	r18, 0xFF	; 255
	SlaveCtrlAPI::dmxSweepAngle(DMX, TILT_MOTOR, 25, 255);
     b60:	49 e1       	ldi	r20, 0x19	; 25
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	88 e4       	ldi	r24, 0x48	; 72
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	71 d6       	rcall	.+3298   	; 0x184e <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh>
     b6c:	01 e0       	ldi	r16, 0x01	; 1
	SlaveCtrlAPI::dmxColour(DMX, 0xFF, 0xFF, 0x66, CONSTANT);
     b6e:	26 e6       	ldi	r18, 0x66	; 102
     b70:	4f ef       	ldi	r20, 0xFF	; 255
     b72:	6f ef       	ldi	r22, 0xFF	; 255
     b74:	88 e4       	ldi	r24, 0x48	; 72
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	b3 d6       	rcall	.+3430   	; 0x18e0 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects>
     b7a:	20 ea       	ldi	r18, 0xA0	; 160
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, RISHI_FOCUS_LIGHT, 127, 4000);
     b7c:	3f e0       	ldi	r19, 0x0F	; 15
     b7e:	4f e7       	ldi	r20, 0x7F	; 127
     b80:	64 e0       	ldi	r22, 0x04	; 4
     b82:	85 e4       	ldi	r24, 0x45	; 69
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	12 d6       	rcall	.+3108   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
	
	//TIME 1:41
	SlaveCtrlAPI::waitTill(toMillis(1,41));
     b88:	68 e8       	ldi	r22, 0x88	; 136
     b8a:	7a e8       	ldi	r23, 0x8A	; 138
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	3b d7       	rcall	.+3702   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     b92:	20 ea       	ldi	r18, 0xA0	; 160
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, BUDDHA_FOCUS_LIGHT, 127, 4000);
     b94:	3f e0       	ldi	r19, 0x0F	; 15
     b96:	4f e7       	ldi	r20, 0x7F	; 127
     b98:	62 e0       	ldi	r22, 0x02	; 2
     b9a:	85 e4       	ldi	r24, 0x45	; 69
     b9c:	90 e0       	ldi	r25, 0x00	; 0
	SlaveCtrlAPI::mouthStart(BUDDHA, BUDDHA_MOUTH_UP_POS, BUDDHA_MOUTH_DOWN_POS);
     b9e:	06 d6       	rcall	.+3084   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
     ba0:	4c e1       	ldi	r20, 0x1C	; 28
     ba2:	52 e0       	ldi	r21, 0x02	; 2
     ba4:	6e ec       	ldi	r22, 0xCE	; 206
     ba6:	72 e0       	ldi	r23, 0x02	; 2
     ba8:	86 e4       	ldi	r24, 0x46	; 70
     baa:	aa d5       	rcall	.+2900   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
	
	//TIME 1:42
	SlaveCtrlAPI::waitTill(toMillis(1,42));
     bac:	60 e7       	ldi	r22, 0x70	; 112
     bae:	7e e8       	ldi	r23, 0x8E	; 142
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	29 d7       	rcall	.+3666   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, ATMOSPHERIC_LIGHT, 127, 7000);
     bb6:	28 e5       	ldi	r18, 0x58	; 88
     bb8:	3b e1       	ldi	r19, 0x1B	; 27
     bba:	4f e7       	ldi	r20, 0x7F	; 127
     bbc:	66 e1       	ldi	r22, 0x16	; 22
     bbe:	85 e4       	ldi	r24, 0x45	; 69
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	f4 d5       	rcall	.+3048   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
	SlaveCtrlAPI::mouthStart(BUDDHA, BUDDHA_MOUTH_UP_POS, BUDDHA_MOUTH_DOWN_POS);
     bc4:	4c e1       	ldi	r20, 0x1C	; 28
     bc6:	52 e0       	ldi	r21, 0x02	; 2
     bc8:	6e ec       	ldi	r22, 0xCE	; 206
     bca:	72 e0       	ldi	r23, 0x02	; 2
     bcc:	86 e4       	ldi	r24, 0x46	; 70
     bce:	98 d5       	rcall	.+2864   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_ONE, OFF);
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	65 e0       	ldi	r22, 0x05	; 5
     bd4:	86 e4       	ldi	r24, 0x46	; 70
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	28 d5       	rcall	.+2640   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_TWO, OFF);
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	6e e0       	ldi	r22, 0x0E	; 14
     bde:	86 e4       	ldi	r24, 0x46	; 70
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	23 d5       	rcall	.+2630   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_THREE, OFF);
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	62 e0       	ldi	r22, 0x02	; 2
     be8:	86 e4       	ldi	r24, 0x46	; 70
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	1e d5       	rcall	.+2620   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_FOUR,OFF);
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	86 e4       	ldi	r24, 0x46	; 70
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	19 d5       	rcall	.+2610   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_FIVE,OFF);
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	6c e0       	ldi	r22, 0x0C	; 12
     bfc:	86 e4       	ldi	r24, 0x46	; 70
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	14 d5       	rcall	.+2600   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	
	//TIME 1:50
	SlaveCtrlAPI::waitTill(toMillis(1,50));
     c02:	60 eb       	ldi	r22, 0xB0	; 176
     c04:	7d ea       	ldi	r23, 0xAD	; 173
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	fe d6       	rcall	.+3580   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_ONE, ON);
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	65 e0       	ldi	r22, 0x05	; 5
     c10:	86 e4       	ldi	r24, 0x46	; 70
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0a d5       	rcall	.+2580   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_TWO, ON);
     c16:	41 e0       	ldi	r20, 0x01	; 1
     c18:	6e e0       	ldi	r22, 0x0E	; 14
     c1a:	86 e4       	ldi	r24, 0x46	; 70
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	05 d5       	rcall	.+2570   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_THREE, ON);
     c20:	41 e0       	ldi	r20, 0x01	; 1
     c22:	62 e0       	ldi	r22, 0x02	; 2
     c24:	86 e4       	ldi	r24, 0x46	; 70
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	00 d5       	rcall	.+2560   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_FOUR, ON);
     c2a:	41 e0       	ldi	r20, 0x01	; 1
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	86 e4       	ldi	r24, 0x46	; 70
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	fb d4       	rcall	.+2550   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
     c34:	41 e0       	ldi	r20, 0x01	; 1
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, RISHI_FIVE, ON);
     c36:	6c e0       	ldi	r22, 0x0C	; 12
     c38:	86 e4       	ldi	r24, 0x46	; 70
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	f6 d4       	rcall	.+2540   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
     c3e:	42 e5       	ldi	r20, 0x52	; 82
	SlaveCtrlAPI::servoPosWrite(BUDDHA, NECK_SERVO, BUDDHA_NECK_LEFT_POS);
     c40:	52 e0       	ldi	r21, 0x02	; 2
     c42:	62 e0       	ldi	r22, 0x02	; 2
     c44:	86 e4       	ldi	r24, 0x46	; 70
     c46:	26 d5       	rcall	.+2636   	; 0x1694 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj>
     c48:	2f ef       	ldi	r18, 0xFF	; 255
     c4a:	8f e4       	ldi	r24, 0x4F	; 79
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c4c:	93 ec       	ldi	r25, 0xC3	; 195
     c4e:	21 50       	subi	r18, 0x01	; 1
     c50:	80 40       	sbci	r24, 0x00	; 0
     c52:	90 40       	sbci	r25, 0x00	; 0
     c54:	e1 f7       	brne	.-8      	; 0xc4e <_Z10playScriptv+0x144>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <_Z10playScriptv+0x14e>
     c58:	00 00       	nop
     c5a:	4e ee       	ldi	r20, 0xEE	; 238
	_delay_ms(4000);
	SlaveCtrlAPI::servoPosWrite(BUDDHA, NECK_SERVO, BUDDHA_NECK_RIGHT_POS);
     c5c:	52 e0       	ldi	r21, 0x02	; 2
     c5e:	62 e0       	ldi	r22, 0x02	; 2
     c60:	86 e4       	ldi	r24, 0x46	; 70
     c62:	18 d5       	rcall	.+2608   	; 0x1694 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj>
     c64:	2f ef       	ldi	r18, 0xFF	; 255
     c66:	8f e4       	ldi	r24, 0x4F	; 79
     c68:	93 ec       	ldi	r25, 0xC3	; 195
     c6a:	21 50       	subi	r18, 0x01	; 1
     c6c:	80 40       	sbci	r24, 0x00	; 0
     c6e:	90 40       	sbci	r25, 0x00	; 0
     c70:	e1 f7       	brne	.-8      	; 0xc6a <_Z10playScriptv+0x160>
     c72:	00 c0       	rjmp	.+0      	; 0xc74 <_Z10playScriptv+0x16a>
     c74:	00 00       	nop
	_delay_ms(4000);
	SlaveCtrlAPI::servoPosWrite(BUDDHA, NECK_SERVO, BUDDHA_NECK_MID_POS);
     c76:	46 eb       	ldi	r20, 0xB6	; 182
     c78:	52 e0       	ldi	r21, 0x02	; 2
     c7a:	62 e0       	ldi	r22, 0x02	; 2
     c7c:	86 e4       	ldi	r24, 0x46	; 70
     c7e:	0a d5       	rcall	.+2580   	; 0x1694 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj>
	
	//TIME 2:35
	SlaveCtrlAPI::waitTill(toMillis(2,35));
     c80:	68 e7       	ldi	r22, 0x78	; 120
     c82:	7d e5       	ldi	r23, 0x5D	; 93
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	bf d6       	rcall	.+3454   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     c8a:	42 e5       	ldi	r20, 0x52	; 82
	SlaveCtrlAPI::servoPosWrite(BUDDHA, NECK_SERVO, BUDDHA_NECK_LEFT_POS);
     c8c:	52 e0       	ldi	r21, 0x02	; 2
     c8e:	62 e0       	ldi	r22, 0x02	; 2
     c90:	86 e4       	ldi	r24, 0x46	; 70
     c92:	00 d5       	rcall	.+2560   	; 0x1694 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj>
     c94:	2f ef       	ldi	r18, 0xFF	; 255
     c96:	8f e4       	ldi	r24, 0x4F	; 79
     c98:	93 ec       	ldi	r25, 0xC3	; 195
     c9a:	21 50       	subi	r18, 0x01	; 1
     c9c:	80 40       	sbci	r24, 0x00	; 0
     c9e:	90 40       	sbci	r25, 0x00	; 0
     ca0:	e1 f7       	brne	.-8      	; 0xc9a <_Z10playScriptv+0x190>
     ca2:	00 c0       	rjmp	.+0      	; 0xca4 <_Z10playScriptv+0x19a>
     ca4:	00 00       	nop
	_delay_ms(4000);
	SlaveCtrlAPI::servoPosWrite(BUDDHA, NECK_SERVO, BUDDHA_NECK_RIGHT_POS);
     ca6:	4e ee       	ldi	r20, 0xEE	; 238
     ca8:	52 e0       	ldi	r21, 0x02	; 2
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	86 e4       	ldi	r24, 0x46	; 70
     cae:	f2 d4       	rcall	.+2532   	; 0x1694 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj>
     cb0:	2f ef       	ldi	r18, 0xFF	; 255
     cb2:	8f e4       	ldi	r24, 0x4F	; 79
     cb4:	93 ec       	ldi	r25, 0xC3	; 195
     cb6:	21 50       	subi	r18, 0x01	; 1
     cb8:	80 40       	sbci	r24, 0x00	; 0
     cba:	90 40       	sbci	r25, 0x00	; 0
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <_Z10playScriptv+0x1ac>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <_Z10playScriptv+0x1b6>
	_delay_ms(4000);
	SlaveCtrlAPI::servoPosWrite(BUDDHA, NECK_SERVO, BUDDHA_NECK_MID_POS);
     cc0:	00 00       	nop
     cc2:	46 eb       	ldi	r20, 0xB6	; 182
     cc4:	52 e0       	ldi	r21, 0x02	; 2
     cc6:	62 e0       	ldi	r22, 0x02	; 2
     cc8:	86 e4       	ldi	r24, 0x46	; 70
	
	//TIME 3:05
	SlaveCtrlAPI::waitTill(toMillis(3,5));
     cca:	e4 d4       	rcall	.+2504   	; 0x1694 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj>
     ccc:	68 ea       	ldi	r22, 0xA8	; 168
     cce:	72 ed       	ldi	r23, 0xD2	; 210
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	99 d6       	rcall	.+3378   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, KOUNDAL_FOCUS_LIGHT, 127, 5000);
     cd6:	28 e8       	ldi	r18, 0x88	; 136
     cd8:	33 e1       	ldi	r19, 0x13	; 19
     cda:	4f e7       	ldi	r20, 0x7F	; 127
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	85 e4       	ldi	r24, 0x45	; 69
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	64 d5       	rcall	.+2760   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
	SlaveCtrlAPI::servoPosWrite(BUDDHA, NECK_SERVO, BUDDHA_NECK_RIGHT_POS);
     ce4:	4e ee       	ldi	r20, 0xEE	; 238
     ce6:	52 e0       	ldi	r21, 0x02	; 2
     ce8:	62 e0       	ldi	r22, 0x02	; 2
     cea:	86 e4       	ldi	r24, 0x46	; 70
     cec:	d3 d4       	rcall	.+2470   	; 0x1694 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj>
     cee:	60 ed       	ldi	r22, 0xD0	; 208
	
	//TIME 3:14
	SlaveCtrlAPI::waitTill(toMillis(3,14));
     cf0:	75 ef       	ldi	r23, 0xF5	; 245
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	88 d6       	rcall	.+3344   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
	SlaveCtrlAPI::dmxColour(DMX, 0xCC, 0x00, 0x00, CONSTANT);
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	6c ec       	ldi	r22, 0xCC	; 204
     cfe:	88 e4       	ldi	r24, 0x48	; 72
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	ee d5       	rcall	.+3036   	; 0x18e0 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects>
     d04:	26 e9       	ldi	r18, 0x96	; 150
	SlaveCtrlAPI::dmxSweepAngle(DMX, PAN_MOTOR, 90, 150);
     d06:	4a e5       	ldi	r20, 0x5A	; 90
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	88 e4       	ldi	r24, 0x48	; 72
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	9e d5       	rcall	.+2876   	; 0x184e <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh>
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, KOUNDAL_FOCUS_LIGHT, 0, 6000);
     d12:	20 e7       	ldi	r18, 0x70	; 112
     d14:	37 e1       	ldi	r19, 0x17	; 23
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	85 e4       	ldi	r24, 0x45	; 69
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	46 d5       	rcall	.+2700   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, RISHI_FOCUS_LIGHT, 0, 6000);
     d20:	20 e7       	ldi	r18, 0x70	; 112
     d22:	37 e1       	ldi	r19, 0x17	; 23
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	64 e0       	ldi	r22, 0x04	; 4
     d28:	85 e4       	ldi	r24, 0x45	; 69
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	3f d5       	rcall	.+2686   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, BUDDHA_FOCUS_LIGHT, 0, 6000);
     d2e:	20 e7       	ldi	r18, 0x70	; 112
     d30:	37 e1       	ldi	r19, 0x17	; 23
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	62 e0       	ldi	r22, 0x02	; 2
     d36:	85 e4       	ldi	r24, 0x45	; 69
     d38:	90 e0       	ldi	r25, 0x00	; 0
		
	//TIME 3:15
	SlaveCtrlAPI::waitTill(toMillis(3,15));
     d3a:	38 d5       	rcall	.+2672   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
     d3c:	68 eb       	ldi	r22, 0xB8	; 184
     d3e:	79 ef       	ldi	r23, 0xF9	; 249
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	90 e0       	ldi	r25, 0x00	; 0
	SlaveCtrlAPI::mouthStop(BUDDHA);
     d44:	61 d6       	rcall	.+3266   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     d46:	86 e4       	ldi	r24, 0x46	; 70
     d48:	12 d5       	rcall	.+2596   	; 0x176e <_ZN12SlaveCtrlAPI9mouthStopEh>
	
	//TIME 3:38
	SlaveCtrlAPI::waitTill(toMillis(3,8));
     d4a:	60 e6       	ldi	r22, 0x60	; 96
     d4c:	7e ed       	ldi	r23, 0xDE	; 222
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	5a d6       	rcall	.+3252   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     d54:	26 e9       	ldi	r18, 0x96	; 150
	SlaveCtrlAPI::dmxSweepAngle(DMX, PAN_MOTOR, 0, 150);
     d56:	40 e0       	ldi	r20, 0x00	; 0
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	88 e4       	ldi	r24, 0x48	; 72
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	76 d5       	rcall	.+2796   	; 0x184e <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh>
     d62:	26 e9       	ldi	r18, 0x96	; 150
	SlaveCtrlAPI::dmxSweepAngle(DMX, TILT_MOTOR, 0, 150);
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	88 e4       	ldi	r24, 0x48	; 72
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	6f d5       	rcall	.+2782   	; 0x184e <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh>
     d70:	41 e0       	ldi	r20, 0x01	; 1
     d72:	6d e0       	ldi	r22, 0x0D	; 13
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, BUDDHA_WAIST_PNEUMATIC, ON);
     d74:	86 e4       	ldi	r24, 0x46	; 70
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	58 d4       	rcall	.+2224   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
     d7a:	60 e3       	ldi	r22, 0x30	; 48
     d7c:	73 e6       	ldi	r23, 0x63	; 99
     d7e:	83 e0       	ldi	r24, 0x03	; 3
	//DMX focuses red behind angulimal
	
	//TIME 3:41
	SlaveCtrlAPI::waitTill(toMillis(3,42));
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	42 d6       	rcall	.+3204   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     d84:	00 e0       	ldi	r16, 0x00	; 0
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	40 e0       	ldi	r20, 0x00	; 0
	SlaveCtrlAPI::dmxColour(DMX, 0xCC, 0x00, 0x00, STROBE);
     d8a:	6c ec       	ldi	r22, 0xCC	; 204
     d8c:	88 e4       	ldi	r24, 0x48	; 72
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	a7 d5       	rcall	.+2894   	; 0x18e0 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects>
     d92:	2f ef       	ldi	r18, 0xFF	; 255
     d94:	87 ea       	ldi	r24, 0xA7	; 167
     d96:	91 e6       	ldi	r25, 0x61	; 97
     d98:	21 50       	subi	r18, 0x01	; 1
     d9a:	80 40       	sbci	r24, 0x00	; 0
     d9c:	90 40       	sbci	r25, 0x00	; 0
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <_Z10playScriptv+0x28e>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <_Z10playScriptv+0x298>
     da2:	00 00       	nop
     da4:	01 e0       	ldi	r16, 0x01	; 1
     da6:	20 e0       	ldi	r18, 0x00	; 0
	//DMX flashed until 3:46
	_delay_ms(2000);
	SlaveCtrlAPI::dmxColour(DMX, 0xCC, 0x00, 0x00, CONSTANT);
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	6c ec       	ldi	r22, 0xCC	; 204
     dac:	88 e4       	ldi	r24, 0x48	; 72
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	97 d5       	rcall	.+2862   	; 0x18e0 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects>
     db2:	2f ef       	ldi	r18, 0xFF	; 255
     db4:	83 ed       	ldi	r24, 0xD3	; 211
     db6:	90 e3       	ldi	r25, 0x30	; 48
     db8:	21 50       	subi	r18, 0x01	; 1
     dba:	80 40       	sbci	r24, 0x00	; 0
     dbc:	90 40       	sbci	r25, 0x00	; 0
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <_Z10playScriptv+0x2ae>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <_Z10playScriptv+0x2b8>
     dc2:	00 00       	nop
     dc4:	00 e0       	ldi	r16, 0x00	; 0
	_delay_ms(1000);
	SlaveCtrlAPI::dmxColour(DMX, 0xCC, 0x00, 0x00, STROBE);
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	6c ec       	ldi	r22, 0xCC	; 204
     dcc:	88 e4       	ldi	r24, 0x48	; 72
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	87 d5       	rcall	.+2830   	; 0x18e0 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects>
     dd2:	2f ef       	ldi	r18, 0xFF	; 255
     dd4:	87 ea       	ldi	r24, 0xA7	; 167
     dd6:	91 e6       	ldi	r25, 0x61	; 97
     dd8:	21 50       	subi	r18, 0x01	; 1
     dda:	80 40       	sbci	r24, 0x00	; 0
     ddc:	90 40       	sbci	r25, 0x00	; 0
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <_Z10playScriptv+0x2ce>
     de0:	00 c0       	rjmp	.+0      	; 0xde2 <_Z10playScriptv+0x2d8>
     de2:	00 00       	nop
	_delay_ms(2000);
	
	//TIME 3:46
	SlaveCtrlAPI::waitTill(toMillis(3,46));
     de4:	60 ed       	ldi	r22, 0xD0	; 208
     de6:	72 e7       	ldi	r23, 0x72	; 114
     de8:	83 e0       	ldi	r24, 0x03	; 3
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0d d6       	rcall	.+3098   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
	SlaveCtrlAPI::dmxColour(DMX, 0xCC, 0x00, 0x00, CONSTANT);
     dee:	01 e0       	ldi	r16, 0x01	; 1
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	6c ec       	ldi	r22, 0xCC	; 204
     df6:	88 e4       	ldi	r24, 0x48	; 72
     df8:	90 e0       	ldi	r25, 0x00	; 0
	//DMX focuses red on angulimal
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, ATMOSPHERIC_LIGHT_R, 100, 5000);
     dfa:	72 d5       	rcall	.+2788   	; 0x18e0 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects>
     dfc:	28 e8       	ldi	r18, 0x88	; 136
     dfe:	33 e1       	ldi	r19, 0x13	; 19
     e00:	44 e6       	ldi	r20, 0x64	; 100
     e02:	66 e1       	ldi	r22, 0x16	; 22
     e04:	85 e4       	ldi	r24, 0x45	; 69
	SlaveCtrlAPI::mouthStart(ANGULIMAL, ANGULIMAL_MOUTH_UP_POS, ANGULIMAL_MOUTH_DOWN_POS);
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	d1 d4       	rcall	.+2466   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
     e0a:	48 ea       	ldi	r20, 0xA8	; 168
     e0c:	52 e0       	ldi	r21, 0x02	; 2
     e0e:	66 e2       	ldi	r22, 0x26	; 38
     e10:	72 e0       	ldi	r23, 0x02	; 2
	
	//TIME 3:54
	SlaveCtrlAPI::waitTill(toMillis(3,54));
     e12:	87 e4       	ldi	r24, 0x47	; 71
     e14:	75 d4       	rcall	.+2282   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
     e16:	60 e1       	ldi	r22, 0x10	; 16
     e18:	72 e9       	ldi	r23, 0x92	; 146
     e1a:	83 e0       	ldi	r24, 0x03	; 3
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, BUDDHA_FOCUS_LIGHT, 100, 6000);
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	f4 d5       	rcall	.+3048   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     e20:	20 e7       	ldi	r18, 0x70	; 112
     e22:	37 e1       	ldi	r19, 0x17	; 23
     e24:	44 e6       	ldi	r20, 0x64	; 100
     e26:	62 e0       	ldi	r22, 0x02	; 2
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, BUDDHA_FOCUS_LIGHT, 127, 5000);
     e28:	85 e4       	ldi	r24, 0x45	; 69
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	bf d4       	rcall	.+2430   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
     e2e:	28 e8       	ldi	r18, 0x88	; 136
     e30:	33 e1       	ldi	r19, 0x13	; 19
     e32:	4f e7       	ldi	r20, 0x7F	; 127
	SlaveCtrlAPI::mouthStart(BUDDHA, BUDDHA_MOUTH_UP_POS, BUDDHA_MOUTH_DOWN_POS);
     e34:	62 e0       	ldi	r22, 0x02	; 2
     e36:	85 e4       	ldi	r24, 0x45	; 69
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	b8 d4       	rcall	.+2416   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
     e3c:	4c e1       	ldi	r20, 0x1C	; 28
     e3e:	52 e0       	ldi	r21, 0x02	; 2
	
	//TIME 4:05
	SlaveCtrlAPI::waitTill(toMillis(4,5));
     e40:	6e ec       	ldi	r22, 0xCE	; 206
     e42:	72 e0       	ldi	r23, 0x02	; 2
     e44:	86 e4       	ldi	r24, 0x46	; 70
     e46:	5c d4       	rcall	.+2232   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
	SlaveCtrlAPI::mouthStop(BUDDHA);
     e48:	68 e0       	ldi	r22, 0x08	; 8
     e4a:	7d eb       	ldi	r23, 0xBD	; 189
     e4c:	83 e0       	ldi	r24, 0x03	; 3
	SlaveCtrlAPI::mouthStart(ANGULIMAL, ANGULIMAL_MOUTH_UP_POS, ANGULIMAL_MOUTH_DOWN_POS);
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	db d5       	rcall	.+2998   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     e52:	86 e4       	ldi	r24, 0x46	; 70
     e54:	8c d4       	rcall	.+2328   	; 0x176e <_ZN12SlaveCtrlAPI9mouthStopEh>
     e56:	48 ea       	ldi	r20, 0xA8	; 168
     e58:	52 e0       	ldi	r21, 0x02	; 2
	
	//TIME 4:13
	SlaveCtrlAPI::waitTill(toMillis(4,13));
     e5a:	66 e2       	ldi	r22, 0x26	; 38
     e5c:	72 e0       	ldi	r23, 0x02	; 2
     e5e:	87 e4       	ldi	r24, 0x47	; 71
     e60:	4f d4       	rcall	.+2206   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
     e62:	68 e4       	ldi	r22, 0x48	; 72
	SlaveCtrlAPI::mouthStop(ANGULIMAL);
     e64:	7c ed       	ldi	r23, 0xDC	; 220
     e66:	83 e0       	ldi	r24, 0x03	; 3
	SlaveCtrlAPI::mouthStart(BUDDHA, BUDDHA_MOUTH_UP_POS, BUDDHA_MOUTH_DOWN_POS);
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	ce d5       	rcall	.+2972   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     e6c:	87 e4       	ldi	r24, 0x47	; 71
     e6e:	7f d4       	rcall	.+2302   	; 0x176e <_ZN12SlaveCtrlAPI9mouthStopEh>
     e70:	4c e1       	ldi	r20, 0x1C	; 28
     e72:	52 e0       	ldi	r21, 0x02	; 2
	
	//TIME 4:30
	SlaveCtrlAPI::waitTill(toMillis(4,30));
     e74:	6e ec       	ldi	r22, 0xCE	; 206
     e76:	72 e0       	ldi	r23, 0x02	; 2
     e78:	86 e4       	ldi	r24, 0x46	; 70
     e7a:	42 d4       	rcall	.+2180   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
	SlaveCtrlAPI::mouthStop(BUDDHA);
     e7c:	60 eb       	ldi	r22, 0xB0	; 176
     e7e:	7e e1       	ldi	r23, 0x1E	; 30
     e80:	84 e0       	ldi	r24, 0x04	; 4
	SlaveCtrlAPI::mouthStart(ANGULIMAL, ANGULIMAL_MOUTH_UP_POS, ANGULIMAL_MOUTH_DOWN_POS);
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	c1 d5       	rcall	.+2946   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     e86:	86 e4       	ldi	r24, 0x46	; 70
     e88:	72 d4       	rcall	.+2276   	; 0x176e <_ZN12SlaveCtrlAPI9mouthStopEh>
     e8a:	48 ea       	ldi	r20, 0xA8	; 168
	
	//TIME 4:39
	SlaveCtrlAPI::waitTill(toMillis(4,39));
     e8c:	52 e0       	ldi	r21, 0x02	; 2
     e8e:	66 e2       	ldi	r22, 0x26	; 38
     e90:	72 e0       	ldi	r23, 0x02	; 2
     e92:	87 e4       	ldi	r24, 0x47	; 71
     e94:	35 d4       	rcall	.+2154   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
	SlaveCtrlAPI::mouthStop(ANGULIMAL);
     e96:	68 ed       	ldi	r22, 0xD8	; 216
     e98:	71 e4       	ldi	r23, 0x41	; 65
	SlaveCtrlAPI::mouthStart(BUDDHA, BUDDHA_MOUTH_UP_POS, BUDDHA_MOUTH_DOWN_POS);
     e9a:	84 e0       	ldi	r24, 0x04	; 4
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	b4 d5       	rcall	.+2920   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     ea0:	87 e4       	ldi	r24, 0x47	; 71
     ea2:	65 d4       	rcall	.+2250   	; 0x176e <_ZN12SlaveCtrlAPI9mouthStopEh>
	
	//TIME 5:25
	SlaveCtrlAPI::waitTill(toMillis(5,25));
     ea4:	4c e1       	ldi	r20, 0x1C	; 28
     ea6:	52 e0       	ldi	r21, 0x02	; 2
     ea8:	6e ec       	ldi	r22, 0xCE	; 206
     eaa:	72 e0       	ldi	r23, 0x02	; 2
     eac:	86 e4       	ldi	r24, 0x46	; 70
	SlaveCtrlAPI::mouthStop(BUDDHA);
     eae:	28 d4       	rcall	.+2128   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
     eb0:	68 e8       	ldi	r22, 0x88	; 136
	SlaveCtrlAPI::dmxColour(DMX, 0xFF, 0xCC, 0x00, CONSTANT);
     eb2:	75 ef       	ldi	r23, 0xF5	; 245
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	a7 d5       	rcall	.+2894   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     eba:	86 e4       	ldi	r24, 0x46	; 70
     ebc:	58 d4       	rcall	.+2224   	; 0x176e <_ZN12SlaveCtrlAPI9mouthStopEh>
	SlaveCtrlAPI::mouthStart(ANGULIMAL, ANGULIMAL_MOUTH_UP_POS, ANGULIMAL_MOUTH_DOWN_POS);
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	4c ec       	ldi	r20, 0xCC	; 204
     ec2:	6f ef       	ldi	r22, 0xFF	; 255
     ec4:	88 e4       	ldi	r24, 0x48	; 72
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0b d5       	rcall	.+2582   	; 0x18e0 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects>
	
	//TIME 5:50
	SlaveCtrlAPI::waitTill(toMillis(5,50));
     eca:	48 ea       	ldi	r20, 0xA8	; 168
     ecc:	52 e0       	ldi	r21, 0x02	; 2
     ece:	66 e2       	ldi	r22, 0x26	; 38
     ed0:	72 e0       	ldi	r23, 0x02	; 2
     ed2:	87 e4       	ldi	r24, 0x47	; 71
	SlaveCtrlAPI::mouthStop(ANGULIMAL);
     ed4:	15 d4       	rcall	.+2090   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
     ed6:	60 e3       	ldi	r22, 0x30	; 48
	SlaveCtrlAPI::mouthStart(BUDDHA, BUDDHA_MOUTH_UP_POS, BUDDHA_MOUTH_DOWN_POS);
     ed8:	77 e5       	ldi	r23, 0x57	; 87
     eda:	85 e0       	ldi	r24, 0x05	; 5
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	94 d5       	rcall	.+2856   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     ee0:	87 e4       	ldi	r24, 0x47	; 71
     ee2:	45 d4       	rcall	.+2186   	; 0x176e <_ZN12SlaveCtrlAPI9mouthStopEh>
	
	//TIME 6:00
	SlaveCtrlAPI::waitTill(toMillis(6,0));
     ee4:	4c e1       	ldi	r20, 0x1C	; 28
     ee6:	52 e0       	ldi	r21, 0x02	; 2
     ee8:	6e ec       	ldi	r22, 0xCE	; 206
     eea:	72 e0       	ldi	r23, 0x02	; 2
     eec:	86 e4       	ldi	r24, 0x46	; 70
	SlaveCtrlAPI::mouthStop(BUDDHA);
     eee:	08 d4       	rcall	.+2064   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
     ef0:	60 e4       	ldi	r22, 0x40	; 64
	SlaveCtrlAPI::mouthStart(ANGULIMAL, ANGULIMAL_MOUTH_UP_POS, ANGULIMAL_MOUTH_DOWN_POS);
     ef2:	7e e7       	ldi	r23, 0x7E	; 126
     ef4:	85 e0       	ldi	r24, 0x05	; 5
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	87 d5       	rcall	.+2830   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     efa:	86 e4       	ldi	r24, 0x46	; 70
     efc:	38 d4       	rcall	.+2160   	; 0x176e <_ZN12SlaveCtrlAPI9mouthStopEh>
	
	//TIME 6:13
	SlaveCtrlAPI::waitTill(toMillis(6,13));
     efe:	48 ea       	ldi	r20, 0xA8	; 168
     f00:	52 e0       	ldi	r21, 0x02	; 2
     f02:	66 e2       	ldi	r22, 0x26	; 38
     f04:	72 e0       	ldi	r23, 0x02	; 2
     f06:	87 e4       	ldi	r24, 0x47	; 71
	SlaveCtrlAPI::mouthStop(ANGULIMAL);
     f08:	fb d3       	rcall	.+2038   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
     f0a:	68 e0       	ldi	r22, 0x08	; 8
     f0c:	71 eb       	ldi	r23, 0xB1	; 177
	SlaveCtrlAPI::mouthStart(BUDDHA, BUDDHA_MOUTH_UP_POS, BUDDHA_MOUTH_DOWN_POS);
     f0e:	85 e0       	ldi	r24, 0x05	; 5
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	7a d5       	rcall	.+2804   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     f14:	87 e4       	ldi	r24, 0x47	; 71
     f16:	2b d4       	rcall	.+2134   	; 0x176e <_ZN12SlaveCtrlAPI9mouthStopEh>
     f18:	4c e1       	ldi	r20, 0x1C	; 28

	
	//TIME 6:37
	SlaveCtrlAPI::waitTill(toMillis(6,37));
     f1a:	52 e0       	ldi	r21, 0x02	; 2
     f1c:	6e ec       	ldi	r22, 0xCE	; 206
     f1e:	72 e0       	ldi	r23, 0x02	; 2
     f20:	86 e4       	ldi	r24, 0x46	; 70
     f22:	ee d3       	rcall	.+2012   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
	SlaveCtrlAPI::mouthStop(BUDDHA);
     f24:	68 ec       	ldi	r22, 0xC8	; 200
     f26:	7e e0       	ldi	r23, 0x0E	; 14
	SlaveCtrlAPI::mouthStart(ANGULIMAL, ANGULIMAL_MOUTH_UP_POS, ANGULIMAL_MOUTH_DOWN_POS);
     f28:	86 e0       	ldi	r24, 0x06	; 6
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	6d d5       	rcall	.+2778   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     f2e:	86 e4       	ldi	r24, 0x46	; 70
     f30:	1e d4       	rcall	.+2108   	; 0x176e <_ZN12SlaveCtrlAPI9mouthStopEh>
	
	//TIME 6:39
	SlaveCtrlAPI::waitTill(toMillis(6,39));
     f32:	48 ea       	ldi	r20, 0xA8	; 168
     f34:	52 e0       	ldi	r21, 0x02	; 2
     f36:	66 e2       	ldi	r22, 0x26	; 38
     f38:	72 e0       	ldi	r23, 0x02	; 2
     f3a:	87 e4       	ldi	r24, 0x47	; 71
     f3c:	e1 d3       	rcall	.+1986   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
	SlaveCtrlAPI::dmxColour(DMX, 0x00, 0xCC, 0xFF, CONSTANT);
     f3e:	68 e9       	ldi	r22, 0x98	; 152
     f40:	76 e1       	ldi	r23, 0x16	; 22
     f42:	86 e0       	ldi	r24, 0x06	; 6
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	60 d5       	rcall	.+2752   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     f48:	2f ef       	ldi	r18, 0xFF	; 255
     f4a:	4c ec       	ldi	r20, 0xCC	; 204
	SlaveCtrlAPI::pneumaticWrite(ANGULIMAL, ANGULIMAL_WAIST_NEUMATIC, ON);
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	88 e4       	ldi	r24, 0x48	; 72
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	c6 d4       	rcall	.+2444   	; 0x18e0 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects>
     f54:	41 e0       	ldi	r20, 0x01	; 1
     f56:	64 e0       	ldi	r22, 0x04	; 4
	SlaveCtrlAPI::mouthStart(ANGULIMAL, ANGULIMAL_MOUTH_UP_POS, ANGULIMAL_MOUTH_DOWN_POS);
     f58:	87 e4       	ldi	r24, 0x47	; 71
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	66 d3       	rcall	.+1740   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
     f5e:	48 ea       	ldi	r20, 0xA8	; 168
     f60:	52 e0       	ldi	r21, 0x02	; 2
     f62:	66 e2       	ldi	r22, 0x26	; 38
     f64:	72 e0       	ldi	r23, 0x02	; 2
	
	//TIME 7:08
	SlaveCtrlAPI::waitTill(toMillis(7,8));
     f66:	87 e4       	ldi	r24, 0x47	; 71
     f68:	cb d3       	rcall	.+1942   	; 0x1700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>
     f6a:	60 ee       	ldi	r22, 0xE0	; 224
     f6c:	77 e8       	ldi	r23, 0x87	; 135
     f6e:	86 e0       	ldi	r24, 0x06	; 6
     f70:	90 e0       	ldi	r25, 0x00	; 0
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, ATMOSPHERIC_LIGHT, 127, 7000);
     f72:	4a d5       	rcall	.+2708   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     f74:	28 e5       	ldi	r18, 0x58	; 88
     f76:	3b e1       	ldi	r19, 0x1B	; 27
     f78:	4f e7       	ldi	r20, 0x7F	; 127
     f7a:	66 e1       	ldi	r22, 0x16	; 22
     f7c:	85 e4       	ldi	r24, 0x45	; 69
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	15 d4       	rcall	.+2090   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
	
	//TIME 7:08
	SlaveCtrlAPI::waitTill(toMillis(7,8));
     f82:	60 ee       	ldi	r22, 0xE0	; 224
     f84:	77 e8       	ldi	r23, 0x87	; 135
     f86:	86 e0       	ldi	r24, 0x06	; 6
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	3e d5       	rcall	.+2684   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     f8c:	41 e0       	ldi	r20, 0x01	; 1
	//RIGHT_hand_uthaune
	SlaveCtrlAPI::pneumaticWrite(BUDDHA, BUDDHA_RIGHT_ELBOW, ON);
     f8e:	68 e0       	ldi	r22, 0x08	; 8
     f90:	86 e4       	ldi	r24, 0x46	; 70
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	4a d3       	rcall	.+1684   	; 0x162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>
     f96:	44 ea       	ldi	r20, 0xA4	; 164
     f98:	51 e0       	ldi	r21, 0x01	; 1
	SlaveCtrlAPI::servoPosWrite(BUDDHA, RIGHT_HAND_SERVO, BUDDHA_PALM_UP_POS);
     f9a:	64 e0       	ldi	r22, 0x04	; 4
     f9c:	86 e4       	ldi	r24, 0x46	; 70
     f9e:	7a d3       	rcall	.+1780   	; 0x1694 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj>
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	76 ed       	ldi	r23, 0xD6	; 214
     fa4:	86 e0       	ldi	r24, 0x06	; 6
	
	//TIME 7:28
	SlaveCtrlAPI::waitTill(toMillis(7,28));
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	2f d5       	rcall	.+2654   	; 0x1a08 <_ZN12SlaveCtrlAPI8waitTillEm>
     faa:	28 e5       	ldi	r18, 0x58	; 88
     fac:	3b e1       	ldi	r19, 0x1B	; 27
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	62 e0       	ldi	r22, 0x02	; 2
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, BUDDHA_FOCUS_LIGHT, 0, 7000);
     fb2:	85 e4       	ldi	r24, 0x45	; 69
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	fa d3       	rcall	.+2036   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
     fb8:	28 e5       	ldi	r18, 0x58	; 88
     fba:	3b e1       	ldi	r19, 0x1B	; 27
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	66 e1       	ldi	r22, 0x16	; 22
     fc0:	85 e4       	ldi	r24, 0x45	; 69
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, ATMOSPHERIC_LIGHT, 0, 7000);
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	f3 d3       	rcall	.+2022   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
     fc6:	28 e5       	ldi	r18, 0x58	; 88
     fc8:	3b e1       	ldi	r19, 0x1B	; 27
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	65 e0       	ldi	r22, 0x05	; 5
     fce:	85 e4       	ldi	r24, 0x45	; 69
     fd0:	90 e0       	ldi	r25, 0x00	; 0
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER, AUDIENCE_LIGHT, 127,7000);
     fd2:	ec d3       	rcall	.+2008   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
     fd4:	4e e8       	ldi	r20, 0x8E	; 142
     fd6:	52 e0       	ldi	r21, 0x02	; 2
     fd8:	64 e0       	ldi	r22, 0x04	; 4
     fda:	86 e4       	ldi	r24, 0x46	; 70
     fdc:	5b d3       	rcall	.+1718   	; 0x1694 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj>
     fde:	b3 dc       	rcall	.-1690   	; 0x946 <_Z12ampStopAudiov>
     fe0:	0f 91       	pop	r16
	SlaveCtrlAPI::servoPosWrite(BUDDHA, RIGHT_HAND_SERVO, BUDDHA_PALM_DOWN_POS);
     fe2:	08 95       	ret

00000fe4 <main>:
     fe4:	14 d3       	rcall	.+1576   	; 0x160e <_ZN12SlaveCtrlAPI4initEv>
     fe6:	2f ef       	ldi	r18, 0xFF	; 255
     fe8:	87 ea       	ldi	r24, 0xA7	; 167
     fea:	91 e6       	ldi	r25, 0x61	; 97
     fec:	21 50       	subi	r18, 0x01	; 1
	ampStopAudio();	
     fee:	80 40       	sbci	r24, 0x00	; 0
     ff0:	90 40       	sbci	r25, 0x00	; 0
}
     ff2:	e1 f7       	brne	.-8      	; 0xfec <main+0x8>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <main+0x12>
     ff6:	00 00       	nop
	
	//For communication
	SlaveCtrlAPI::init();
	_delay_ms(2000);
	//Must be initialized first
	ampInit(15);
     ff8:	8f e0       	ldi	r24, 0x0F	; 15
     ffa:	6f dc       	rcall	.-1826   	; 0x8da <_Z7ampInith>
	
	//Initially audience lights on
	SlaveCtrlAPI::lightGradualWrite(LIGHT_CONTROLLER,AUDIENCE_LIGHT,127,7000);
     ffc:	28 e5       	ldi	r18, 0x58	; 88
     ffe:	3b e1       	ldi	r19, 0x1B	; 27
    1000:	4f e7       	ldi	r20, 0x7F	; 127
    1002:	65 e0       	ldi	r22, 0x05	; 5
    1004:	85 e4       	ldi	r24, 0x45	; 69
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	d1 d3       	rcall	.+1954   	; 0x17ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>
	
	//On-board LEDs for debug
	initIndicators();
    100a:	84 b1       	in	r24, 0x04	; 4
    100c:	8e 61       	ori	r24, 0x1E	; 30
    100e:	84 b9       	out	0x04, r24	; 4
	
	//For motor
	motorInit();
    1010:	81 b1       	in	r24, 0x01	; 1
    1012:	80 69       	ori	r24, 0x90	; 144
    1014:	81 b9       	out	0x01, r24	; 1
    1016:	17 9a       	sbi	0x02, 7	; 2
	 
	//Communication check
	if (!SlaveCtrlAPI::lightReset(LIGHT_CONTROLLER)){indicator1On();}
    1018:	14 9a       	sbi	0x02, 4	; 2
    101a:	85 e4       	ldi	r24, 0x45	; 69
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	f8 d3       	rcall	.+2032   	; 0x1810 <_ZN12SlaveCtrlAPI10lightResetEj>
	
	/* Replace with your application code */

	while (1){	
		//Servo, pneumatic and lights reset
		resetToInitial();
    1020:	81 11       	cpse	r24, r1
				
		//Switch actions (From operator)
		//startWait();
		
		//Start timer
		TimeKeeper::init();
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <main+0x42>
    1024:	29 9a       	sbi	0x05, 1	; 5
		
		//Language select
		chooseLanguage(VOLUME);
    1026:	46 dd       	rcall	.-1396   	; 0xab4 <_Z14resetToInitialv>
    1028:	04 d5       	rcall	.+2568   	; 0x1a32 <_ZN10TimeKeeper4initEv>
    102a:	84 e1       	ldi	r24, 0x14	; 20
				
		//Start show
		playScript();			
    102c:	40 dd       	rcall	.-1408   	; 0xaae <_Z14chooseLanguageh>
    102e:	6d dd       	rcall	.-1318   	; 0xb0a <_Z10playScriptv>
    1030:	fa cf       	rjmp	.-12     	; 0x1026 <main+0x42>

00001032 <_ZN12ModbusMasterC1Ev>:
	this->request_data_struct.function_code = FUNC_CODE_READ_INPUT;
	this->request_data_struct.slave_addr = slave_addr;
	this->request_data_struct.quantity_of_regs = no_of_reg;
	this->request_data_struct.starting_addr = register_addr;
	
	this->ReadReg();
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	ec 01       	movw	r28, r24
    1038:	0b 96       	adiw	r24, 0x0b	; 11
    103a:	e6 d2       	rcall	.+1484   	; 0x1608 <_ZN17ModbusMasterArrayC1Ev>
    103c:	18 82       	st	Y, r1
    103e:	19 86       	std	Y+9, r1	; 0x09
    1040:	1a 86       	std	Y+10, r1	; 0x0a
    1042:	1f 82       	std	Y+7, r1	; 0x07
    1044:	18 86       	std	Y+8, r1	; 0x08
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <_ZN12ModbusMaster9CheckBusyEv>:
    104c:	fc 01       	movw	r30, r24
    104e:	81 85       	ldd	r24, Z+9	; 0x09
    1050:	08 95       	ret

00001052 <_ZN12ModbusMaster22LastTransactionSuccessEv>:
    1052:	fc 01       	movw	r30, r24
    1054:	82 85       	ldd	r24, Z+10	; 0x0a
    1056:	08 95       	ret

00001058 <_ZN12ModbusMaster21AssertInvalidResponseEv>:
    1058:	fc 01       	movw	r30, r24
    105a:	17 82       	std	Z+7, r1	; 0x07
    105c:	12 86       	std	Z+10, r1	; 0x0a
    105e:	11 86       	std	Z+9, r1	; 0x09
    1060:	24 ca       	rjmp	.-3000   	; 0x4aa <_ZN12ModbusMaster13TimeoutStopCBEv>
    1062:	08 95       	ret

00001064 <_ZN12ModbusMaster9TimeoutCBEv>:
    1064:	f9 cf       	rjmp	.-14     	; 0x1058 <_ZN12ModbusMaster21AssertInvalidResponseEv>
    1066:	08 95       	ret

00001068 <_ZN12ModbusMaster12Ascii2NibbleEh>:
    1068:	80 ed       	ldi	r24, 0xD0	; 208
    106a:	86 0f       	add	r24, r22
    106c:	8a 30       	cpi	r24, 0x0A	; 10
    106e:	40 f0       	brcs	.+16     	; 0x1080 <_ZN12ModbusMaster12Ascii2NibbleEh+0x18>
    1070:	8f eb       	ldi	r24, 0xBF	; 191
    1072:	86 0f       	add	r24, r22
    1074:	86 30       	cpi	r24, 0x06	; 6
    1076:	18 f4       	brcc	.+6      	; 0x107e <_ZN12ModbusMaster12Ascii2NibbleEh+0x16>
    1078:	89 ec       	ldi	r24, 0xC9	; 201
    107a:	86 0f       	add	r24, r22
    107c:	08 95       	ret
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	08 95       	ret

00001082 <_ZN12ModbusMaster12Nibble2AsciiEh>:
    1082:	86 2f       	mov	r24, r22
    1084:	8f 70       	andi	r24, 0x0F	; 15
    1086:	8a 30       	cpi	r24, 0x0A	; 10
    1088:	10 f4       	brcc	.+4      	; 0x108e <_ZN12ModbusMaster12Nibble2AsciiEh+0xc>
    108a:	80 5d       	subi	r24, 0xD0	; 208
    108c:	08 95       	ret
    108e:	89 5c       	subi	r24, 0xC9	; 201
    1090:	08 95       	ret

00001092 <_ZN12ModbusMaster8CharSendEh>:
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	ec 01       	movw	r28, r24
    109a:	16 2f       	mov	r17, r22
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	75 95       	asr	r23
    10a0:	67 95       	ror	r22
    10a2:	75 95       	asr	r23
    10a4:	67 95       	ror	r22
    10a6:	75 95       	asr	r23
    10a8:	67 95       	ror	r22
    10aa:	75 95       	asr	r23
    10ac:	67 95       	ror	r22
    10ae:	e9 df       	rcall	.-46     	; 0x1082 <_ZN12ModbusMaster12Nibble2AsciiEh>
    10b0:	68 2f       	mov	r22, r24
    10b2:	ce 01       	movw	r24, r28
    10b4:	bc d9       	rcall	.-3208   	; 0x42e <_ZN12ModbusMaster16WriteCharacterCBEh>
    10b6:	61 2f       	mov	r22, r17
    10b8:	ce 01       	movw	r24, r28
    10ba:	e3 df       	rcall	.-58     	; 0x1082 <_ZN12ModbusMaster12Nibble2AsciiEh>
    10bc:	68 2f       	mov	r22, r24
    10be:	ce 01       	movw	r24, r28
    10c0:	b6 d9       	rcall	.-3220   	; 0x42e <_ZN12ModbusMaster16WriteCharacterCBEh>
    10c2:	88 81       	ld	r24, Y
    10c4:	18 0f       	add	r17, r24
    10c6:	18 83       	st	Y, r17
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	08 95       	ret

000010d0 <_ZN12ModbusMaster7IntSendEj>:
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	ec 01       	movw	r28, r24
    10d8:	16 2f       	mov	r17, r22
    10da:	67 2f       	mov	r22, r23
    10dc:	da df       	rcall	.-76     	; 0x1092 <_ZN12ModbusMaster8CharSendEh>
    10de:	61 2f       	mov	r22, r17
    10e0:	ce 01       	movw	r24, r28
    10e2:	d7 df       	rcall	.-82     	; 0x1092 <_ZN12ModbusMaster8CharSendEh>
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	08 95       	ret

000010ec <_ZN12ModbusMaster14WriteOutputRegEhj>:
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	ec 01       	movw	r28, r24
    10fc:	d6 2e       	mov	r13, r22
    10fe:	7a 01       	movw	r14, r20
    1100:	18 82       	st	Y, r1
    1102:	1a 86       	std	Y+10, r1	; 0x0a
    1104:	80 e1       	ldi	r24, 0x10	; 16
    1106:	8a 83       	std	Y+2, r24	; 0x02
    1108:	69 83       	std	Y+1, r22	; 0x01
    110a:	8e 01       	movw	r16, r28
    110c:	05 5f       	subi	r16, 0xF5	; 245
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
    1110:	c8 01       	movw	r24, r16
    1112:	6a d2       	rcall	.+1236   	; 0x15e8 <_ZN17ModbusMasterArray6GetLenEv>
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	9c 83       	std	Y+4, r25	; 0x04
    1118:	8b 83       	std	Y+3, r24	; 0x03
    111a:	fe 82       	std	Y+6, r15	; 0x06
    111c:	ed 82       	std	Y+5, r14	; 0x05
    111e:	6a e3       	ldi	r22, 0x3A	; 58
    1120:	ce 01       	movw	r24, r28
    1122:	85 d9       	rcall	.-3318   	; 0x42e <_ZN12ModbusMaster16WriteCharacterCBEh>
    1124:	6d 2d       	mov	r22, r13
    1126:	ce 01       	movw	r24, r28
    1128:	b4 df       	rcall	.-152    	; 0x1092 <_ZN12ModbusMaster8CharSendEh>
    112a:	60 e1       	ldi	r22, 0x10	; 16
    112c:	ce 01       	movw	r24, r28
    112e:	b1 df       	rcall	.-158    	; 0x1092 <_ZN12ModbusMaster8CharSendEh>
    1130:	b7 01       	movw	r22, r14
    1132:	61 50       	subi	r22, 0x01	; 1
    1134:	71 09       	sbc	r23, r1
    1136:	ce 01       	movw	r24, r28
    1138:	cb df       	rcall	.-106    	; 0x10d0 <_ZN12ModbusMaster7IntSendEj>
    113a:	c8 01       	movw	r24, r16
    113c:	55 d2       	rcall	.+1194   	; 0x15e8 <_ZN17ModbusMasterArray6GetLenEv>
    113e:	68 2f       	mov	r22, r24
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	ce 01       	movw	r24, r28
    1144:	c5 df       	rcall	.-118    	; 0x10d0 <_ZN12ModbusMaster7IntSendEj>
    1146:	c8 01       	movw	r24, r16
    1148:	4f d2       	rcall	.+1182   	; 0x15e8 <_ZN17ModbusMasterArray6GetLenEv>
    114a:	68 2f       	mov	r22, r24
    114c:	66 0f       	add	r22, r22
    114e:	ce 01       	movw	r24, r28
    1150:	a0 df       	rcall	.-192    	; 0x1092 <_ZN12ModbusMaster8CharSendEh>
    1152:	f1 2c       	mov	r15, r1
    1154:	c8 01       	movw	r24, r16
    1156:	48 d2       	rcall	.+1168   	; 0x15e8 <_ZN17ModbusMasterArray6GetLenEv>
    1158:	f8 16       	cp	r15, r24
    115a:	68 f4       	brcc	.+26     	; 0x1176 <_ZN12ModbusMaster14WriteOutputRegEhj+0x8a>
    115c:	ef 2d       	mov	r30, r15
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	36 96       	adiw	r30, 0x06	; 6
    1162:	ee 0f       	add	r30, r30
    1164:	ff 1f       	adc	r31, r31
    1166:	ec 0f       	add	r30, r28
    1168:	fd 1f       	adc	r31, r29
    116a:	60 81       	ld	r22, Z
    116c:	71 81       	ldd	r23, Z+1	; 0x01
    116e:	ce 01       	movw	r24, r28
    1170:	af df       	rcall	.-162    	; 0x10d0 <_ZN12ModbusMaster7IntSendEj>
    1172:	f3 94       	inc	r15
    1174:	ef cf       	rjmp	.-34     	; 0x1154 <_ZN12ModbusMaster14WriteOutputRegEhj+0x68>
    1176:	68 81       	ld	r22, Y
    1178:	61 95       	neg	r22
    117a:	ce 01       	movw	r24, r28
    117c:	8a df       	rcall	.-236    	; 0x1092 <_ZN12ModbusMaster8CharSendEh>
    117e:	6d e0       	ldi	r22, 0x0D	; 13
    1180:	ce 01       	movw	r24, r28
    1182:	55 d9       	rcall	.-3414   	; 0x42e <_ZN12ModbusMaster16WriteCharacterCBEh>
    1184:	6a e0       	ldi	r22, 0x0A	; 10
    1186:	ce 01       	movw	r24, r28
    1188:	52 d9       	rcall	.-3420   	; 0x42e <_ZN12ModbusMaster16WriteCharacterCBEh>
    118a:	1f 82       	std	Y+7, r1	; 0x07
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	89 87       	std	Y+9, r24	; 0x09
    1190:	ce 01       	movw	r24, r28
    1192:	7c d9       	rcall	.-3336   	; 0x48c <_ZN12ModbusMaster14TimeoutStartCBEv>
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	08 95       	ret

000011a4 <_ZN12ModbusMaster15ReadCharacterCBEh>:
}

//FSM of response from the slave
//TODO make this method more readable and intuitive 
void ModbusMaster::ReadCharacterCB(uint8_t character){
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
	static uint16_t FSM_buffer;
	
	static uint8_t lrc_sum;
	
	//if master doesn't need to listen
	if (!this->listening_response) return; 
    11ac:	fc 01       	movw	r30, r24
    11ae:	21 85       	ldd	r18, Z+9	; 0x09
    11b0:	22 23       	and	r18, r18
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <_ZN12ModbusMaster15ReadCharacterCBEh+0x12>
    11b4:	11 c2       	rjmp	.+1058   	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    11b6:	16 2f       	mov	r17, r22
    11b8:	ec 01       	movw	r28, r24
	this->TimeoutResetCB();
    11ba:	81 d9       	rcall	.-3326   	; 0x4be <_ZN12ModbusMaster14TimeoutResetCBEv>
	
	switch(this->response_state){
    11bc:	ef 81       	ldd	r30, Y+7	; 0x07
    11be:	8e 2f       	mov	r24, r30
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	8d 30       	cpi	r24, 0x0D	; 13
    11c4:	91 05       	cpc	r25, r1
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <_ZN12ModbusMaster15ReadCharacterCBEh+0x26>
    11c8:	07 c2       	rjmp	.+1038   	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    11ca:	fc 01       	movw	r30, r24
    11cc:	e0 5b       	subi	r30, 0xB0	; 176
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	3f c5       	rjmp	.+2686   	; 0x1c50 <__tablejump2__>
		case RCV_IDLE:
			if (character == ':'){
    11d2:	1a 33       	cpi	r17, 0x3A	; 58
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x34>
    11d6:	00 c2       	rjmp	.+1024   	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
				this->response_state = RCV_SLAVE_ADDR;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	8f 83       	std	Y+7, r24	; 0x07
				this->response_byte_position = HIGH_NIBBLE;
    11dc:	18 86       	std	Y+8, r1	; 0x08
				lrc_sum = 0;
    11de:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    11e2:	fa c1       	rjmp	.+1012   	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
			}			
			break;
			
		case RCV_SLAVE_ADDR:
			if (this->response_byte_position == HIGH_NIBBLE){
    11e4:	88 85       	ldd	r24, Y+8	; 0x08
    11e6:	81 11       	cpse	r24, r1
    11e8:	0e c0       	rjmp	.+28     	; 0x1206 <_ZN12ModbusMaster15ReadCharacterCBEh+0x62>
				FSM_buffer = (this->Ascii2Nibble(character))<<4;
    11ea:	61 2f       	mov	r22, r17
    11ec:	ce 01       	movw	r24, r28
    11ee:	3c df       	rcall	.-392    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    11f0:	f0 e1       	ldi	r31, 0x10	; 16
    11f2:	8f 9f       	mul	r24, r31
    11f4:	c0 01       	movw	r24, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    11fc:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = LOW_NIBBLE;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	88 87       	std	Y+8, r24	; 0x08
			}			
			else{
				FSM_buffer |= (this->Ascii2Nibble(character));
    1204:	e9 c1       	rjmp	.+978    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    1206:	61 2f       	mov	r22, r17
    1208:	ce 01       	movw	r24, r28
    120a:	2e df       	rcall	.-420    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    120c:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    1210:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    1214:	a9 01       	movw	r20, r18
    1216:	48 2b       	or	r20, r24
    1218:	ca 01       	movw	r24, r20
    121a:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    121e:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = HIGH_NIBBLE;
    1222:	18 86       	std	Y+8, r1	; 0x08
				
				if (FSM_buffer == this->request_data_struct.slave_addr){
    1224:	29 81       	ldd	r18, Y+1	; 0x01
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	82 17       	cp	r24, r18
    122a:	93 07       	cpc	r25, r19
    122c:	41 f4       	brne	.+16     	; 0x123e <_ZN12ModbusMaster15ReadCharacterCBEh+0x9a>
					 this->response_state = RCV_FUNC_CODE;
    122e:	92 e0       	ldi	r25, 0x02	; 2
    1230:	9f 83       	std	Y+7, r25	; 0x07
					 lrc_sum+=FSM_buffer;
    1232:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    1236:	89 0f       	add	r24, r25
    1238:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
					 
				}				
				else{
					this->AssertInvalidResponse(); 
    123c:	cd c1       	rjmp	.+922    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    123e:	ce 01       	movw	r24, r28
    1240:	0b df       	rcall	.-490    	; 0x1058 <_ZN12ModbusMaster21AssertInvalidResponseEv>
    1242:	ca c1       	rjmp	.+916    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
				}				
			}			
			break;
			
		case RCV_FUNC_CODE:
			if (this->response_byte_position == HIGH_NIBBLE){
    1244:	88 85       	ldd	r24, Y+8	; 0x08
    1246:	81 11       	cpse	r24, r1
				FSM_buffer = (this->Ascii2Nibble(character))<<4;
    1248:	0e c0       	rjmp	.+28     	; 0x1266 <_ZN12ModbusMaster15ReadCharacterCBEh+0xc2>
    124a:	61 2f       	mov	r22, r17
    124c:	ce 01       	movw	r24, r28
    124e:	0c df       	rcall	.-488    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    1250:	50 e1       	ldi	r21, 0x10	; 16
    1252:	85 9f       	mul	r24, r21
    1254:	c0 01       	movw	r24, r0
    1256:	11 24       	eor	r1, r1
    1258:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    125c:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = LOW_NIBBLE;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	88 87       	std	Y+8, r24	; 0x08
			}
			else{
				FSM_buffer |= (this->Ascii2Nibble(character));
    1264:	b9 c1       	rjmp	.+882    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    1266:	61 2f       	mov	r22, r17
    1268:	ce 01       	movw	r24, r28
    126a:	fe de       	rcall	.-516    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    126c:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    1270:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    1274:	f9 01       	movw	r30, r18
    1276:	e8 2b       	or	r30, r24
    1278:	cf 01       	movw	r24, r30
    127a:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    127e:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = HIGH_NIBBLE;
    1282:	18 86       	std	Y+8, r1	; 0x08
				
				if (FSM_buffer == this->request_data_struct.function_code){
    1284:	2a 81       	ldd	r18, Y+2	; 0x02
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	82 17       	cp	r24, r18
    128a:	93 07       	cpc	r25, r19
    128c:	91 f4       	brne	.+36     	; 0x12b2 <_ZN12ModbusMaster15ReadCharacterCBEh+0x10e>
					lrc_sum+=FSM_buffer;
    128e:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    1292:	28 0f       	add	r18, r24
    1294:	20 93 df 01 	sts	0x01DF, r18	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
					if (FSM_buffer == FUNC_CODE_WRITE_OUTPUT){
    1298:	80 31       	cpi	r24, 0x10	; 16
    129a:	91 05       	cpc	r25, r1
    129c:	19 f4       	brne	.+6      	; 0x12a4 <_ZN12ModbusMaster15ReadCharacterCBEh+0x100>
						this->response_state = RCV_START_ADDR_HIGH;
    129e:	83 e0       	ldi	r24, 0x03	; 3
    12a0:	8f 83       	std	Y+7, r24	; 0x07
    12a2:	9a c1       	rjmp	.+820    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
						
					}	
					else if (FSM_buffer == FUNC_CODE_READ_OUTPUT || FSM_buffer == FUNC_CODE_READ_INPUT){
    12a4:	03 97       	sbiw	r24, 0x03	; 3
    12a6:	02 97       	sbiw	r24, 0x02	; 2
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <_ZN12ModbusMaster15ReadCharacterCBEh+0x108>
						this->response_state = RCV_BYTE_COUNT;
    12aa:	96 c1       	rjmp	.+812    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    12ac:	8a e0       	ldi	r24, 0x0A	; 10
    12ae:	8f 83       	std	Y+7, r24	; 0x07
					}								
				}
				//function code mismatch, the frame is incorrect				
				else{
					this->AssertInvalidResponse();
    12b0:	93 c1       	rjmp	.+806    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    12b2:	ce 01       	movw	r24, r28
    12b4:	d1 de       	rcall	.-606    	; 0x1058 <_ZN12ModbusMaster21AssertInvalidResponseEv>
				}				
			}
			break;
			
			case RCV_BYTE_COUNT:
				if (this->response_byte_position == HIGH_NIBBLE){
    12b6:	90 c1       	rjmp	.+800    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    12b8:	88 85       	ldd	r24, Y+8	; 0x08
    12ba:	81 11       	cpse	r24, r1
					FSM_buffer = (this->Ascii2Nibble(character))<<4;
    12bc:	0e c0       	rjmp	.+28     	; 0x12da <_ZN12ModbusMaster15ReadCharacterCBEh+0x136>
    12be:	61 2f       	mov	r22, r17
    12c0:	ce 01       	movw	r24, r28
    12c2:	d2 de       	rcall	.-604    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    12c4:	f0 e1       	ldi	r31, 0x10	; 16
    12c6:	8f 9f       	mul	r24, r31
    12c8:	c0 01       	movw	r24, r0
    12ca:	11 24       	eor	r1, r1
    12cc:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    12d0:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
					this->response_byte_position = LOW_NIBBLE;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	88 87       	std	Y+8, r24	; 0x08
				}
				else{
					FSM_buffer |= (this->Ascii2Nibble(character));
    12d8:	7f c1       	rjmp	.+766    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    12da:	61 2f       	mov	r22, r17
    12dc:	ce 01       	movw	r24, r28
    12de:	c4 de       	rcall	.-632    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    12e0:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    12e4:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    12e8:	a9 01       	movw	r20, r18
    12ea:	48 2b       	or	r20, r24
    12ec:	ca 01       	movw	r24, r20
    12ee:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    12f2:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
					this->response_byte_position = HIGH_NIBBLE;
    12f6:	18 86       	std	Y+8, r1	; 0x08
				
					if (FSM_buffer == 2*this->request_data_struct.quantity_of_regs){
    12f8:	2b 81       	ldd	r18, Y+3	; 0x03
    12fa:	3c 81       	ldd	r19, Y+4	; 0x04
    12fc:	22 0f       	add	r18, r18
    12fe:	33 1f       	adc	r19, r19
    1300:	82 17       	cp	r24, r18
    1302:	93 07       	cpc	r25, r19
						lrc_sum+=FSM_buffer;
    1304:	59 f4       	brne	.+22     	; 0x131c <_ZN12ModbusMaster15ReadCharacterCBEh+0x178>
    1306:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    130a:	89 0f       	add	r24, r25
						this->response_state = RCV_DATA_HIGH;
    130c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
						this->data_buffer.Reset();
    1310:	8b e0       	ldi	r24, 0x0B	; 11
    1312:	8f 83       	std	Y+7, r24	; 0x07
    1314:	ce 01       	movw	r24, r28
    1316:	0b 96       	adiw	r24, 0x0b	; 11
					}
					//function code mismatch, the frame is incorrect
					else{
						this->AssertInvalidResponse();
    1318:	64 d1       	rcall	.+712    	; 0x15e2 <_ZN17ModbusMasterArray5ResetEv>
    131a:	5e c1       	rjmp	.+700    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    131c:	ce 01       	movw	r24, r28
    131e:	9c de       	rcall	.-712    	; 0x1058 <_ZN12ModbusMaster21AssertInvalidResponseEv>
					}
				}
				break;
			
		case RCV_START_ADDR_HIGH:
			if (this->response_byte_position == HIGH_NIBBLE){
    1320:	5b c1       	rjmp	.+694    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    1322:	88 85       	ldd	r24, Y+8	; 0x08
    1324:	81 11       	cpse	r24, r1
				FSM_buffer = ((uint16_t)(this->Ascii2Nibble(character)))<<12;
    1326:	0c c0       	rjmp	.+24     	; 0x1340 <_ZN12ModbusMaster15ReadCharacterCBEh+0x19c>
    1328:	61 2f       	mov	r22, r17
    132a:	ce 01       	movw	r24, r28
    132c:	9d de       	rcall	.-710    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    132e:	82 95       	swap	r24
    1330:	80 7f       	andi	r24, 0xF0	; 240
    1332:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    1336:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
				this->response_byte_position = LOW_NIBBLE;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	88 87       	std	Y+8, r24	; 0x08
			}
			else{
				FSM_buffer |= ((uint16_t)((this->Ascii2Nibble(character))))<<8;
    133e:	4c c1       	rjmp	.+664    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    1340:	61 2f       	mov	r22, r17
    1342:	ce 01       	movw	r24, r28
    1344:	91 de       	rcall	.-734    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    1346:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    134a:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    134e:	f9 01       	movw	r30, r18
    1350:	f8 2b       	or	r31, r24
    1352:	cf 01       	movw	r24, r30
    1354:	f0 93 de 01 	sts	0x01DE, r31	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    1358:	e0 93 dd 01 	sts	0x01DD, r30	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = HIGH_NIBBLE;
				this->response_state = RCV_START_ADDR_LOW;
    135c:	18 86       	std	Y+8, r1	; 0x08
    135e:	84 e0       	ldi	r24, 0x04	; 4
				
				lrc_sum+=(uint8_t)(FSM_buffer>>8);	
    1360:	8f 83       	std	Y+7, r24	; 0x07
    1362:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    1366:	89 0f       	add	r24, r25
    1368:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
			}
			break;
			
		case RCV_START_ADDR_LOW:
			if (this->response_byte_position == HIGH_NIBBLE){
    136c:	35 c1       	rjmp	.+618    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    136e:	88 85       	ldd	r24, Y+8	; 0x08
    1370:	81 11       	cpse	r24, r1
				FSM_buffer |= ((uint16_t)(this->Ascii2Nibble(character)))<<4;
    1372:	14 c0       	rjmp	.+40     	; 0x139c <_ZN12ModbusMaster15ReadCharacterCBEh+0x1f8>
    1374:	61 2f       	mov	r22, r17
    1376:	ce 01       	movw	r24, r28
    1378:	77 de       	rcall	.-786    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    137a:	f0 e1       	ldi	r31, 0x10	; 16
    137c:	8f 9f       	mul	r24, r31
    137e:	c0 01       	movw	r24, r0
    1380:	11 24       	eor	r1, r1
    1382:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    1386:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    138a:	82 2b       	or	r24, r18
    138c:	93 2b       	or	r25, r19
    138e:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    1392:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = LOW_NIBBLE;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	88 87       	std	Y+8, r24	; 0x08
			}
			else{
				FSM_buffer |= (uint16_t)((this->Ascii2Nibble(character))&0xFF);
    139a:	1e c1       	rjmp	.+572    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    139c:	61 2f       	mov	r22, r17
    139e:	ce 01       	movw	r24, r28
    13a0:	63 de       	rcall	.-826    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    13a2:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    13a6:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    13aa:	a9 01       	movw	r20, r18
    13ac:	48 2b       	or	r20, r24
    13ae:	ca 01       	movw	r24, r20
    13b0:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    13b4:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = HIGH_NIBBLE;
    13b8:	18 86       	std	Y+8, r1	; 0x08
				
				//the address in physical layer starts from 0, ours from 1
				if ((FSM_buffer+1) == this->request_data_struct.starting_addr){
    13ba:	4f 5f       	subi	r20, 0xFF	; 255
    13bc:	5f 4f       	sbci	r21, 0xFF	; 255
    13be:	2d 81       	ldd	r18, Y+5	; 0x05
    13c0:	3e 81       	ldd	r19, Y+6	; 0x06
    13c2:	42 17       	cp	r20, r18
    13c4:	53 07       	cpc	r21, r19
					 this->response_state = RCV_QUANTITY_OF_REG_HIGH;
    13c6:	41 f4       	brne	.+16     	; 0x13d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x234>
					 lrc_sum+=(uint8_t)(FSM_buffer & 0xFF); 
    13c8:	95 e0       	ldi	r25, 0x05	; 5
    13ca:	9f 83       	std	Y+7, r25	; 0x07
    13cc:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    13d0:	89 0f       	add	r24, r25
    13d2:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
				}	
				//starting mismatch, the frame is incorrect			
				else{
					this->AssertInvalidResponse();
    13d6:	00 c1       	rjmp	.+512    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    13d8:	ce 01       	movw	r24, r28
    13da:	3e de       	rcall	.-900    	; 0x1058 <_ZN12ModbusMaster21AssertInvalidResponseEv>
				}
			}			
			break;
		
		case RCV_QUANTITY_OF_REG_HIGH:
			if (this->response_byte_position == HIGH_NIBBLE){
    13dc:	fd c0       	rjmp	.+506    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    13de:	88 85       	ldd	r24, Y+8	; 0x08
				FSM_buffer = (this->Ascii2Nibble(character))<<12;
    13e0:	81 11       	cpse	r24, r1
    13e2:	0c c0       	rjmp	.+24     	; 0x13fc <_ZN12ModbusMaster15ReadCharacterCBEh+0x258>
    13e4:	61 2f       	mov	r22, r17
    13e6:	ce 01       	movw	r24, r28
    13e8:	3f de       	rcall	.-898    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    13ea:	82 95       	swap	r24
    13ec:	80 7f       	andi	r24, 0xF0	; 240
    13ee:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    13f2:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
				this->response_byte_position = LOW_NIBBLE;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	88 87       	std	Y+8, r24	; 0x08
			}
			else{
				FSM_buffer |= (this->Ascii2Nibble(character))<<8;
    13fa:	ee c0       	rjmp	.+476    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    13fc:	61 2f       	mov	r22, r17
    13fe:	ce 01       	movw	r24, r28
    1400:	33 de       	rcall	.-922    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    1402:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    1406:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    140a:	f9 01       	movw	r30, r18
    140c:	f8 2b       	or	r31, r24
    140e:	cf 01       	movw	r24, r30
    1410:	f0 93 de 01 	sts	0x01DE, r31	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    1414:	e0 93 dd 01 	sts	0x01DD, r30	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = HIGH_NIBBLE;
				this->response_state = RCV_QUANTITY_OF_REG_LOW;
    1418:	18 86       	std	Y+8, r1	; 0x08
    141a:	86 e0       	ldi	r24, 0x06	; 6
				
				lrc_sum+=(uint8_t)(FSM_buffer>>8);
    141c:	8f 83       	std	Y+7, r24	; 0x07
    141e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    1422:	89 0f       	add	r24, r25
    1424:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
				
			}
			break;
		
		case RCV_QUANTITY_OF_REG_LOW:
			if (this->response_byte_position == HIGH_NIBBLE){
    1428:	d7 c0       	rjmp	.+430    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    142a:	88 85       	ldd	r24, Y+8	; 0x08
    142c:	81 11       	cpse	r24, r1
				FSM_buffer |= (this->Ascii2Nibble(character))<<4;
    142e:	14 c0       	rjmp	.+40     	; 0x1458 <_ZN12ModbusMaster15ReadCharacterCBEh+0x2b4>
    1430:	61 2f       	mov	r22, r17
    1432:	ce 01       	movw	r24, r28
    1434:	19 de       	rcall	.-974    	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    1436:	f0 e1       	ldi	r31, 0x10	; 16
    1438:	8f 9f       	mul	r24, r31
    143a:	c0 01       	movw	r24, r0
    143c:	11 24       	eor	r1, r1
    143e:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    1442:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    1446:	82 2b       	or	r24, r18
    1448:	93 2b       	or	r25, r19
    144a:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    144e:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = LOW_NIBBLE;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	88 87       	std	Y+8, r24	; 0x08
			}
			else{
				FSM_buffer |= (this->Ascii2Nibble(character));
    1456:	c0 c0       	rjmp	.+384    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    1458:	61 2f       	mov	r22, r17
    145a:	ce 01       	movw	r24, r28
    145c:	05 de       	rcall	.-1014   	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    145e:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    1462:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    1466:	a9 01       	movw	r20, r18
    1468:	48 2b       	or	r20, r24
    146a:	ca 01       	movw	r24, r20
    146c:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    1470:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = HIGH_NIBBLE;
			
			
				if (FSM_buffer == this->request_data_struct.quantity_of_regs){
    1474:	18 86       	std	Y+8, r1	; 0x08
    1476:	2b 81       	ldd	r18, Y+3	; 0x03
    1478:	3c 81       	ldd	r19, Y+4	; 0x04
    147a:	82 17       	cp	r24, r18
					this->response_state = RCV_LRC;
    147c:	93 07       	cpc	r25, r19
    147e:	41 f4       	brne	.+16     	; 0x1490 <_ZN12ModbusMaster15ReadCharacterCBEh+0x2ec>
					lrc_sum+=(uint8_t)(FSM_buffer & 0xFF);
    1480:	97 e0       	ldi	r25, 0x07	; 7
    1482:	9f 83       	std	Y+7, r25	; 0x07
    1484:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    1488:	89 0f       	add	r24, r25
				}
				//quantity of register mismatch, the frame is incorrect
				else{
					this->AssertInvalidResponse();
    148a:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    148e:	a4 c0       	rjmp	.+328    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    1490:	ce 01       	movw	r24, r28
				}
			}			
			break;
			
		case RCV_DATA_HIGH:
			if (this->response_byte_position == HIGH_NIBBLE){
    1492:	e2 dd       	rcall	.-1084   	; 0x1058 <_ZN12ModbusMaster21AssertInvalidResponseEv>
    1494:	a1 c0       	rjmp	.+322    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    1496:	88 85       	ldd	r24, Y+8	; 0x08
				FSM_buffer = (this->Ascii2Nibble(character))<<12;
    1498:	81 11       	cpse	r24, r1
    149a:	0c c0       	rjmp	.+24     	; 0x14b4 <_ZN12ModbusMaster15ReadCharacterCBEh+0x310>
    149c:	61 2f       	mov	r22, r17
    149e:	ce 01       	movw	r24, r28
    14a0:	e3 dd       	rcall	.-1082   	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    14a2:	82 95       	swap	r24
    14a4:	80 7f       	andi	r24, 0xF0	; 240
    14a6:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    14aa:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
				this->response_byte_position = LOW_NIBBLE;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	88 87       	std	Y+8, r24	; 0x08
			}
			else{
				FSM_buffer |= (this->Ascii2Nibble(character))<<8;
    14b2:	92 c0       	rjmp	.+292    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    14b4:	61 2f       	mov	r22, r17
    14b6:	ce 01       	movw	r24, r28
    14b8:	d7 dd       	rcall	.-1106   	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    14ba:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    14be:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    14c2:	f9 01       	movw	r30, r18
    14c4:	f8 2b       	or	r31, r24
    14c6:	cf 01       	movw	r24, r30
    14c8:	f0 93 de 01 	sts	0x01DE, r31	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    14cc:	e0 93 dd 01 	sts	0x01DD, r30	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = HIGH_NIBBLE;
				this->response_state = RCV_DATA_LOW;
    14d0:	18 86       	std	Y+8, r1	; 0x08
    14d2:	8c e0       	ldi	r24, 0x0C	; 12
			
				lrc_sum+=(uint8_t)(FSM_buffer>>8);
    14d4:	8f 83       	std	Y+7, r24	; 0x07
    14d6:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    14da:	89 0f       	add	r24, r25
    14dc:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
			}
			break;
		
		case RCV_DATA_LOW:
			if (this->response_byte_position == HIGH_NIBBLE){
    14e0:	7b c0       	rjmp	.+246    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    14e2:	88 85       	ldd	r24, Y+8	; 0x08
				FSM_buffer |= (this->Ascii2Nibble(character))<<4;
    14e4:	81 11       	cpse	r24, r1
    14e6:	14 c0       	rjmp	.+40     	; 0x1510 <_ZN12ModbusMaster15ReadCharacterCBEh+0x36c>
    14e8:	61 2f       	mov	r22, r17
    14ea:	ce 01       	movw	r24, r28
    14ec:	bd dd       	rcall	.-1158   	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    14ee:	f0 e1       	ldi	r31, 0x10	; 16
    14f0:	8f 9f       	mul	r24, r31
    14f2:	c0 01       	movw	r24, r0
    14f4:	11 24       	eor	r1, r1
    14f6:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    14fa:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    14fe:	82 2b       	or	r24, r18
    1500:	93 2b       	or	r25, r19
    1502:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    1506:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = LOW_NIBBLE;
    150a:	81 e0       	ldi	r24, 0x01	; 1
			}
			else{
				FSM_buffer |= (this->Ascii2Nibble(character));
    150c:	88 87       	std	Y+8, r24	; 0x08
    150e:	64 c0       	rjmp	.+200    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    1510:	61 2f       	mov	r22, r17
    1512:	ce 01       	movw	r24, r28
    1514:	a9 dd       	rcall	.-1198   	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    1516:	60 91 dd 01 	lds	r22, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    151a:	70 91 de 01 	lds	r23, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    151e:	68 2b       	or	r22, r24
    1520:	70 93 de 01 	sts	0x01DE, r23	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    1524:	60 93 dd 01 	sts	0x01DD, r22	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = HIGH_NIBBLE;
			
				lrc_sum+=(uint8_t)(FSM_buffer & 0xFF);
    1528:	18 86       	std	Y+8, r1	; 0x08
    152a:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    152e:	86 0f       	add	r24, r22
				
				this->data_buffer.Append(FSM_buffer);
    1530:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    1534:	8e 01       	movw	r16, r28
    1536:	05 5f       	subi	r16, 0xF5	; 245
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	c8 01       	movw	r24, r16
				
			
				if (this->data_buffer.GetLen() >= this->request_data_struct.quantity_of_regs){
    153c:	58 d0       	rcall	.+176    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
    153e:	c8 01       	movw	r24, r16
    1540:	53 d0       	rcall	.+166    	; 0x15e8 <_ZN17ModbusMasterArray6GetLenEv>
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	82 17       	cp	r24, r18
    154a:	93 07       	cpc	r25, r19
					this->response_state = RCV_LRC;
    154c:	18 f0       	brcs	.+6      	; 0x1554 <_ZN12ModbusMaster15ReadCharacterCBEh+0x3b0>
    154e:	87 e0       	ldi	r24, 0x07	; 7
    1550:	8f 83       	std	Y+7, r24	; 0x07
				}
				else{
					this->response_state = RCV_DATA_HIGH;
    1552:	42 c0       	rjmp	.+132    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    1554:	8b e0       	ldi	r24, 0x0B	; 11
    1556:	8f 83       	std	Y+7, r24	; 0x07
				
			}
			break;
			
		case RCV_LRC:
			if (this->response_byte_position == HIGH_NIBBLE){
    1558:	3f c0       	rjmp	.+126    	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    155a:	88 85       	ldd	r24, Y+8	; 0x08
    155c:	81 11       	cpse	r24, r1
				FSM_buffer = (this->Ascii2Nibble(character))<<4;
    155e:	0e c0       	rjmp	.+28     	; 0x157c <_ZN12ModbusMaster15ReadCharacterCBEh+0x3d8>
    1560:	61 2f       	mov	r22, r17
    1562:	ce 01       	movw	r24, r28
    1564:	81 dd       	rcall	.-1278   	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    1566:	20 e1       	ldi	r18, 0x10	; 16
    1568:	82 9f       	mul	r24, r18
    156a:	c0 01       	movw	r24, r0
    156c:	11 24       	eor	r1, r1
    156e:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    1572:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = LOW_NIBBLE;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	88 87       	std	Y+8, r24	; 0x08
			}
			else{
				FSM_buffer |= (this->Ascii2Nibble(character));
    157a:	2e c0       	rjmp	.+92     	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    157c:	61 2f       	mov	r22, r17
    157e:	ce 01       	movw	r24, r28
    1580:	73 dd       	rcall	.-1306   	; 0x1068 <_ZN12ModbusMaster12Ascii2NibbleEh>
    1582:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
    1586:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    158a:	28 2b       	or	r18, r24
    158c:	30 93 de 01 	sts	0x01DE, r19	; 0x8001de <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer+0x1>
    1590:	20 93 dd 01 	sts	0x01DD, r18	; 0x8001dd <_ZZN12ModbusMaster15ReadCharacterCBEhE10FSM_buffer>
				this->response_byte_position = HIGH_NIBBLE;
								
				
				if (FSM_buffer == (uint8_t)(-((int8_t)lrc_sum))){
    1594:	18 86       	std	Y+8, r1	; 0x08
    1596:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <_ZZN12ModbusMaster15ReadCharacterCBEhE7lrc_sum>
    159a:	81 95       	neg	r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	28 17       	cp	r18, r24
					this->response_state = RCV_CR;
    15a0:	39 07       	cpc	r19, r25
    15a2:	19 f4       	brne	.+6      	; 0x15aa <_ZN12ModbusMaster15ReadCharacterCBEh+0x406>
    15a4:	88 e0       	ldi	r24, 0x08	; 8
				}
				//LRC mismatch, the frame is incorrect
				else{
					this->AssertInvalidResponse();					
    15a6:	8f 83       	std	Y+7, r24	; 0x07
    15a8:	17 c0       	rjmp	.+46     	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    15aa:	ce 01       	movw	r24, r28
    15ac:	55 dd       	rcall	.-1366   	; 0x1058 <_ZN12ModbusMaster21AssertInvalidResponseEv>
			}
			break;
		
		case RCV_CR:
			//carriage return
			if (character==0x0D){
    15ae:	14 c0       	rjmp	.+40     	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    15b0:	1d 30       	cpi	r17, 0x0D	; 13
				this->response_state = RCV_LF;
    15b2:	19 f4       	brne	.+6      	; 0x15ba <_ZN12ModbusMaster15ReadCharacterCBEh+0x416>
    15b4:	89 e0       	ldi	r24, 0x09	; 9
    15b6:	8f 83       	std	Y+7, r24	; 0x07
			}
			else{
				this->AssertInvalidResponse();
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
    15ba:	ce 01       	movw	r24, r28
    15bc:	4d dd       	rcall	.-1382   	; 0x1058 <_ZN12ModbusMaster21AssertInvalidResponseEv>
    15be:	0c c0       	rjmp	.+24     	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
			}
			break;
			
		case RCV_LF:
			
			if (character==0x0A){//line feed
    15c0:	1a 30       	cpi	r17, 0x0A	; 10
    15c2:	41 f4       	brne	.+16     	; 0x15d4 <_ZN12ModbusMaster15ReadCharacterCBEh+0x430>
				this->response_state = RCV_IDLE;
    15c4:	1f 82       	std	Y+7, r1	; 0x07
				this->response_valid = 1;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	8a 87       	std	Y+10, r24	; 0x0a
				this->listening_response=0;
    15ca:	19 86       	std	Y+9, r1	; 0x09
				
				this->TimeoutStopCB();
    15cc:	ce 01       	movw	r24, r28
    15ce:	0e 94 55 02 	call	0x4aa	; 0x4aa <_ZN12ModbusMaster13TimeoutStopCBEv>
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <_ZN12ModbusMaster15ReadCharacterCBEh+0x434>
			}
			else{
				this->AssertInvalidResponse();
    15d4:	ce 01       	movw	r24, r28
    15d6:	40 dd       	rcall	.-1408   	; 0x1058 <_ZN12ModbusMaster21AssertInvalidResponseEv>
    15d8:	df 91       	pop	r29
			}
	}
			
}
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	08 95       	ret

000015e2 <_ZN17ModbusMasterArray5ResetEv>:
    15e2:	fc 01       	movw	r30, r24
/*Access MyArray as stack*/
uint16_t ModbusMasterArray::GetTail(void){
	if (this->len==0) return 0;
	this->len--;
	return this->data[this->len];
}
    15e4:	10 82       	st	Z, r1
    15e6:	08 95       	ret

000015e8 <_ZN17ModbusMasterArray6GetLenEv>:
    15e8:	fc 01       	movw	r30, r24
    15ea:	80 81       	ld	r24, Z
    15ec:	08 95       	ret

000015ee <_ZN17ModbusMasterArray6AppendEj>:

void ModbusMasterArray::Append(uint16_t input){
    15ee:	dc 01       	movw	r26, r24
	this->data[len]=input;
    15f0:	9c 91       	ld	r25, X
    15f2:	e9 2f       	mov	r30, r25
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	ee 0f       	add	r30, r30
    15f8:	ff 1f       	adc	r31, r31
    15fa:	ea 0f       	add	r30, r26
    15fc:	fb 1f       	adc	r31, r27
    15fe:	72 83       	std	Z+2, r23	; 0x02
    1600:	61 83       	std	Z+1, r22	; 0x01
	len++;
    1602:	9f 5f       	subi	r25, 0xFF	; 255
    1604:	9c 93       	st	X, r25
    1606:	08 95       	ret

00001608 <_ZN17ModbusMasterArrayC1Ev>:
 *  Author: R_Shrestha
 */ 
#include "ModbusMasterArray.h"

void ModbusMasterArray::Reset(){
	this->len=0;
    1608:	fc 01       	movw	r30, r24
    160a:	10 82       	st	Z, r1
    160c:	08 95       	ret

0000160e <_ZN12SlaveCtrlAPI4initEv>:
		break;
	}
	
	while (modbus_master.CheckBusy());
	return modbus_master.LastTransactionSuccess();
}
    160e:	87 e6       	ldi	r24, 0x67	; 103
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	c1 d2       	rcall	.+1410   	; 0x1b96 <_Z10uart1_initj>
    1614:	78 94       	sei
    1616:	2f ef       	ldi	r18, 0xFF	; 255
    1618:	81 ee       	ldi	r24, 0xE1	; 225
    161a:	94 e0       	ldi	r25, 0x04	; 4
    161c:	21 50       	subi	r18, 0x01	; 1
    161e:	80 40       	sbci	r24, 0x00	; 0
    1620:	90 40       	sbci	r25, 0x00	; 0
    1622:	e1 f7       	brne	.-8      	; 0x161c <_ZN12SlaveCtrlAPI4initEv+0xe>
    1624:	00 c0       	rjmp	.+0      	; 0x1626 <_ZN12SlaveCtrlAPI4initEv+0x18>
    1626:	00 00       	nop
    1628:	08 95       	ret

0000162a <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh>:
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	18 2f       	mov	r17, r24
    1632:	d6 2f       	mov	r29, r22
    1634:	c4 2f       	mov	r28, r20
    1636:	80 ee       	ldi	r24, 0xE0	; 224
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	08 dd       	rcall	.-1520   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    163c:	81 11       	cpse	r24, r1
    163e:	fb cf       	rjmp	.-10     	; 0x1636 <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh+0xc>
    1640:	8b ee       	ldi	r24, 0xEB	; 235
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	ce df       	rcall	.-100    	; 0x15e2 <_ZN17ModbusMasterArray5ResetEv>
    1646:	6d 2f       	mov	r22, r29
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	8b ee       	ldi	r24, 0xEB	; 235
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	cf df       	rcall	.-98     	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
    1650:	6c 2f       	mov	r22, r28
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	8b ee       	ldi	r24, 0xEB	; 235
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	ca df       	rcall	.-108    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
    165a:	4d e1       	ldi	r20, 0x1D	; 29
    165c:	54 e0       	ldi	r21, 0x04	; 4
    165e:	61 2f       	mov	r22, r17
    1660:	80 ee       	ldi	r24, 0xE0	; 224
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	43 dd       	rcall	.-1402   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    1666:	80 ee       	ldi	r24, 0xE0	; 224
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	f0 dc       	rcall	.-1568   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    166c:	81 11       	cpse	r24, r1
    166e:	fb cf       	rjmp	.-10     	; 0x1666 <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh+0x3c>
    1670:	4d e1       	ldi	r20, 0x1D	; 29
    1672:	54 e0       	ldi	r21, 0x04	; 4
    1674:	61 2f       	mov	r22, r17
    1676:	80 ee       	ldi	r24, 0xE0	; 224
    1678:	91 e0       	ldi	r25, 0x01	; 1
    167a:	38 dd       	rcall	.-1424   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    167c:	80 ee       	ldi	r24, 0xE0	; 224
    167e:	91 e0       	ldi	r25, 0x01	; 1
    1680:	e5 dc       	rcall	.-1590   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    1682:	81 11       	cpse	r24, r1
    1684:	fb cf       	rjmp	.-10     	; 0x167c <_ZN12SlaveCtrlAPI14pneumaticWriteEjhh+0x52>
    1686:	80 ee       	ldi	r24, 0xE0	; 224
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	e3 dc       	rcall	.-1594   	; 0x1052 <_ZN12ModbusMaster22LastTransactionSuccessEv>
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	1f 91       	pop	r17
    1692:	08 95       	ret

00001694 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj>:
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	d8 2f       	mov	r29, r24
    169e:	c6 2f       	mov	r28, r22
    16a0:	8a 01       	movw	r16, r20
    16a2:	80 ee       	ldi	r24, 0xE0	; 224
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	d2 dc       	rcall	.-1628   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    16a8:	81 11       	cpse	r24, r1
    16aa:	fb cf       	rjmp	.-10     	; 0x16a2 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj+0xe>
    16ac:	8b ee       	ldi	r24, 0xEB	; 235
    16ae:	91 e0       	ldi	r25, 0x01	; 1
    16b0:	98 df       	rcall	.-208    	; 0x15e2 <_ZN17ModbusMasterArray5ResetEv>
    16b2:	6c 2f       	mov	r22, r28
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	8b ee       	ldi	r24, 0xEB	; 235
    16b8:	91 e0       	ldi	r25, 0x01	; 1
    16ba:	99 df       	rcall	.-206    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
    16bc:	b8 01       	movw	r22, r16
    16be:	8b ee       	ldi	r24, 0xEB	; 235
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	95 df       	rcall	.-214    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
    16c4:	41 e2       	ldi	r20, 0x21	; 33
    16c6:	54 e0       	ldi	r21, 0x04	; 4
    16c8:	6d 2f       	mov	r22, r29
    16ca:	80 ee       	ldi	r24, 0xE0	; 224
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	0e dd       	rcall	.-1508   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    16d0:	80 ee       	ldi	r24, 0xE0	; 224
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	bb dc       	rcall	.-1674   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    16d6:	81 11       	cpse	r24, r1
    16d8:	fb cf       	rjmp	.-10     	; 0x16d0 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj+0x3c>
    16da:	41 e2       	ldi	r20, 0x21	; 33
    16dc:	54 e0       	ldi	r21, 0x04	; 4
    16de:	6d 2f       	mov	r22, r29
    16e0:	80 ee       	ldi	r24, 0xE0	; 224
    16e2:	91 e0       	ldi	r25, 0x01	; 1
    16e4:	03 dd       	rcall	.-1530   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    16e6:	80 ee       	ldi	r24, 0xE0	; 224
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	b0 dc       	rcall	.-1696   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    16ec:	81 11       	cpse	r24, r1
    16ee:	fb cf       	rjmp	.-10     	; 0x16e6 <_ZN12SlaveCtrlAPI13servoPosWriteEhhj+0x52>
    16f0:	80 ee       	ldi	r24, 0xE0	; 224
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	ae dc       	rcall	.-1700   	; 0x1052 <_ZN12ModbusMaster22LastTransactionSuccessEv>
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	08 95       	ret

00001700 <_ZN12SlaveCtrlAPI10mouthStartEhjj>:
    1700:	ef 92       	push	r14
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	c8 2f       	mov	r28, r24
    170c:	7b 01       	movw	r14, r22
    170e:	8a 01       	movw	r16, r20
    1710:	80 ee       	ldi	r24, 0xE0	; 224
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	9b dc       	rcall	.-1738   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    1716:	81 11       	cpse	r24, r1
    1718:	fb cf       	rjmp	.-10     	; 0x1710 <_ZN12SlaveCtrlAPI10mouthStartEhjj+0x10>
    171a:	8b ee       	ldi	r24, 0xEB	; 235
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	61 df       	rcall	.-318    	; 0x15e2 <_ZN17ModbusMasterArray5ResetEv>
    1720:	b7 01       	movw	r22, r14
    1722:	8b ee       	ldi	r24, 0xEB	; 235
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	63 df       	rcall	.-314    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
    1728:	b8 01       	movw	r22, r16
    172a:	8b ee       	ldi	r24, 0xEB	; 235
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	5f df       	rcall	.-322    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
    1730:	44 e2       	ldi	r20, 0x24	; 36
    1732:	54 e0       	ldi	r21, 0x04	; 4
    1734:	6c 2f       	mov	r22, r28
    1736:	80 ee       	ldi	r24, 0xE0	; 224
    1738:	91 e0       	ldi	r25, 0x01	; 1
    173a:	d8 dc       	rcall	.-1616   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    173c:	80 ee       	ldi	r24, 0xE0	; 224
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	85 dc       	rcall	.-1782   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    1742:	81 11       	cpse	r24, r1
    1744:	fb cf       	rjmp	.-10     	; 0x173c <_ZN12SlaveCtrlAPI10mouthStartEhjj+0x3c>
    1746:	44 e2       	ldi	r20, 0x24	; 36
    1748:	54 e0       	ldi	r21, 0x04	; 4
    174a:	6c 2f       	mov	r22, r28
    174c:	80 ee       	ldi	r24, 0xE0	; 224
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	cd dc       	rcall	.-1638   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    1752:	80 ee       	ldi	r24, 0xE0	; 224
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	7a dc       	rcall	.-1804   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    1758:	81 11       	cpse	r24, r1
    175a:	fb cf       	rjmp	.-10     	; 0x1752 <_ZN12SlaveCtrlAPI10mouthStartEhjj+0x52>
    175c:	80 ee       	ldi	r24, 0xE0	; 224
    175e:	91 e0       	ldi	r25, 0x01	; 1
    1760:	78 dc       	rcall	.-1808   	; 0x1052 <_ZN12ModbusMaster22LastTransactionSuccessEv>
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ff 90       	pop	r15
    176a:	ef 90       	pop	r14
    176c:	08 95       	ret

0000176e <_ZN12SlaveCtrlAPI9mouthStopEh>:
    176e:	cf 93       	push	r28
    1770:	c8 2f       	mov	r28, r24
    1772:	80 ee       	ldi	r24, 0xE0	; 224
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	6a dc       	rcall	.-1836   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    1778:	81 11       	cpse	r24, r1
    177a:	fb cf       	rjmp	.-10     	; 0x1772 <_ZN12SlaveCtrlAPI9mouthStopEh+0x4>
    177c:	8b ee       	ldi	r24, 0xEB	; 235
    177e:	91 e0       	ldi	r25, 0x01	; 1
    1780:	30 df       	rcall	.-416    	; 0x15e2 <_ZN17ModbusMasterArray5ResetEv>
    1782:	6f e3       	ldi	r22, 0x3F	; 63
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	8b ee       	ldi	r24, 0xEB	; 235
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	31 df       	rcall	.-414    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
    178c:	47 e2       	ldi	r20, 0x27	; 39
    178e:	54 e0       	ldi	r21, 0x04	; 4
    1790:	6c 2f       	mov	r22, r28
    1792:	80 ee       	ldi	r24, 0xE0	; 224
    1794:	91 e0       	ldi	r25, 0x01	; 1
    1796:	aa dc       	rcall	.-1708   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    1798:	80 ee       	ldi	r24, 0xE0	; 224
    179a:	91 e0       	ldi	r25, 0x01	; 1
    179c:	57 dc       	rcall	.-1874   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    179e:	81 11       	cpse	r24, r1
    17a0:	fb cf       	rjmp	.-10     	; 0x1798 <_ZN12SlaveCtrlAPI9mouthStopEh+0x2a>
    17a2:	80 ee       	ldi	r24, 0xE0	; 224
    17a4:	91 e0       	ldi	r25, 0x01	; 1
    17a6:	55 dc       	rcall	.-1878   	; 0x1052 <_ZN12ModbusMaster22LastTransactionSuccessEv>
    17a8:	cf 91       	pop	r28
    17aa:	08 95       	ret

000017ac <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj>:
    17ac:	ef 92       	push	r14
    17ae:	ff 92       	push	r15
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	18 2f       	mov	r17, r24
    17b8:	c6 2f       	mov	r28, r22
    17ba:	d4 2f       	mov	r29, r20
    17bc:	79 01       	movw	r14, r18
    17be:	80 ee       	ldi	r24, 0xE0	; 224
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	44 dc       	rcall	.-1912   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    17c4:	81 11       	cpse	r24, r1
    17c6:	fb cf       	rjmp	.-10     	; 0x17be <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj+0x12>
    17c8:	8b ee       	ldi	r24, 0xEB	; 235
    17ca:	91 e0       	ldi	r25, 0x01	; 1
    17cc:	0a df       	rcall	.-492    	; 0x15e2 <_ZN17ModbusMasterArray5ResetEv>
    17ce:	b7 01       	movw	r22, r14
    17d0:	8b ee       	ldi	r24, 0xEB	; 235
    17d2:	91 e0       	ldi	r25, 0x01	; 1
    17d4:	0c df       	rcall	.-488    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
    17d6:	6d 2f       	mov	r22, r29
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	8b ee       	ldi	r24, 0xEB	; 235
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	07 df       	rcall	.-498    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
    17e0:	4c 2f       	mov	r20, r28
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	4c 50       	subi	r20, 0x0C	; 12
    17e6:	5e 4f       	sbci	r21, 0xFE	; 254
    17e8:	44 0f       	add	r20, r20
    17ea:	55 1f       	adc	r21, r21
    17ec:	61 2f       	mov	r22, r17
    17ee:	80 ee       	ldi	r24, 0xE0	; 224
    17f0:	91 e0       	ldi	r25, 0x01	; 1
    17f2:	7c dc       	rcall	.-1800   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    17f4:	80 ee       	ldi	r24, 0xE0	; 224
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	29 dc       	rcall	.-1966   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    17fa:	81 11       	cpse	r24, r1
    17fc:	fb cf       	rjmp	.-10     	; 0x17f4 <_ZN12SlaveCtrlAPI17lightGradualWriteEjhhj+0x48>
    17fe:	80 ee       	ldi	r24, 0xE0	; 224
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	27 dc       	rcall	.-1970   	; 0x1052 <_ZN12ModbusMaster22LastTransactionSuccessEv>
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	ff 90       	pop	r15
    180c:	ef 90       	pop	r14
    180e:	08 95       	ret

00001810 <_ZN12SlaveCtrlAPI10lightResetEj>:
    1810:	cf 93       	push	r28
    1812:	c8 2f       	mov	r28, r24
    1814:	80 ee       	ldi	r24, 0xE0	; 224
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	19 dc       	rcall	.-1998   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    181a:	81 11       	cpse	r24, r1
    181c:	fb cf       	rjmp	.-10     	; 0x1814 <_ZN12SlaveCtrlAPI10lightResetEj+0x4>
    181e:	8b ee       	ldi	r24, 0xEB	; 235
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	df de       	rcall	.-578    	; 0x15e2 <_ZN17ModbusMasterArray5ResetEv>
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	8b ee       	ldi	r24, 0xEB	; 235
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	e0 de       	rcall	.-576    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
    182e:	48 e0       	ldi	r20, 0x08	; 8
    1830:	54 e0       	ldi	r21, 0x04	; 4
    1832:	6c 2f       	mov	r22, r28
    1834:	80 ee       	ldi	r24, 0xE0	; 224
    1836:	91 e0       	ldi	r25, 0x01	; 1
    1838:	59 dc       	rcall	.-1870   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    183a:	80 ee       	ldi	r24, 0xE0	; 224
    183c:	91 e0       	ldi	r25, 0x01	; 1
    183e:	06 dc       	rcall	.-2036   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    1840:	81 11       	cpse	r24, r1
    1842:	fb cf       	rjmp	.-10     	; 0x183a <_ZN12SlaveCtrlAPI10lightResetEj+0x2a>
    1844:	80 ee       	ldi	r24, 0xE0	; 224
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	04 dc       	rcall	.-2040   	; 0x1052 <_ZN12ModbusMaster22LastTransactionSuccessEv>
    184a:	cf 91       	pop	r28
    184c:	08 95       	ret

0000184e <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh>:

uint8_t SlaveCtrlAPI::dmxSweepAngle(uint16_t slave_addr, dmxMotor m, uint16_t angle, uint8_t speed){
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	d8 2f       	mov	r29, r24
    185a:	16 2f       	mov	r17, r22
    185c:	7a 01       	movw	r14, r20
    185e:	c2 2f       	mov	r28, r18
	while (modbus_master.CheckBusy());
    1860:	80 ee       	ldi	r24, 0xE0	; 224
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	f3 db       	rcall	.-2074   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    1866:	81 11       	cpse	r24, r1
    1868:	fb cf       	rjmp	.-10     	; 0x1860 <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh+0x12>
	modbus_master.data_buffer.Reset();
    186a:	8b ee       	ldi	r24, 0xEB	; 235
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	b9 de       	rcall	.-654    	; 0x15e2 <_ZN17ModbusMasterArray5ResetEv>
	
	switch (m){
    1870:	11 23       	and	r17, r17
    1872:	19 f0       	breq	.+6      	; 0x187a <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh+0x2c>
    1874:	11 30       	cpi	r17, 0x01	; 1
    1876:	39 f0       	breq	.+14     	; 0x1886 <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh+0x38>
    1878:	0b c0       	rjmp	.+22     	; 0x1890 <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh+0x42>
		case PAN_MOTOR:
			modbus_master.data_buffer.Append(22);
    187a:	66 e1       	ldi	r22, 0x16	; 22
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	8b ee       	ldi	r24, 0xEB	; 235
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	b5 de       	rcall	.-662    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
			break;
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh+0x42>
		case TILT_MOTOR:
			modbus_master.data_buffer.Append(33);		
    1886:	61 e2       	ldi	r22, 0x21	; 33
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	8b ee       	ldi	r24, 0xEB	; 235
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	af de       	rcall	.-674    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
			break;			
	}
	
	modbus_master.data_buffer.Append(angle);
    1890:	b7 01       	movw	r22, r14
    1892:	8b ee       	ldi	r24, 0xEB	; 235
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	ab de       	rcall	.-682    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
	modbus_master.data_buffer.Append(speed);
    1898:	6c 2f       	mov	r22, r28
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	8b ee       	ldi	r24, 0xEB	; 235
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	a6 de       	rcall	.-692    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
	modbus_master.WriteOutputReg(slave_addr, DMX_SWEEP_ADDR);
    18a2:	43 ef       	ldi	r20, 0xF3	; 243
    18a4:	53 e0       	ldi	r21, 0x03	; 3
    18a6:	6d 2f       	mov	r22, r29
    18a8:	80 ee       	ldi	r24, 0xE0	; 224
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	1f dc       	rcall	.-1986   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
	
	//Second transmission
	while (modbus_master.CheckBusy());
    18ae:	80 ee       	ldi	r24, 0xE0	; 224
    18b0:	91 e0       	ldi	r25, 0x01	; 1
    18b2:	cc db       	rcall	.-2152   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    18b4:	81 11       	cpse	r24, r1
    18b6:	fb cf       	rjmp	.-10     	; 0x18ae <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh+0x60>
	modbus_master.WriteOutputReg(slave_addr, DMX_SWEEP_ADDR);
    18b8:	43 ef       	ldi	r20, 0xF3	; 243
    18ba:	53 e0       	ldi	r21, 0x03	; 3
    18bc:	6d 2f       	mov	r22, r29
    18be:	80 ee       	ldi	r24, 0xE0	; 224
    18c0:	91 e0       	ldi	r25, 0x01	; 1
	
	while (modbus_master.CheckBusy());
    18c2:	14 dc       	rcall	.-2008   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    18c4:	80 ee       	ldi	r24, 0xE0	; 224
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	c1 db       	rcall	.-2174   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    18ca:	81 11       	cpse	r24, r1
    18cc:	fb cf       	rjmp	.-10     	; 0x18c4 <_ZN12SlaveCtrlAPI13dmxSweepAngleEj8dmxMotorjh+0x76>
	return modbus_master.LastTransactionSuccess();
    18ce:	80 ee       	ldi	r24, 0xE0	; 224
    18d0:	91 e0       	ldi	r25, 0x01	; 1
    18d2:	bf db       	rcall	.-2178   	; 0x1052 <_ZN12ModbusMaster22LastTransactionSuccessEv>
    18d4:	df 91       	pop	r29
}
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	ff 90       	pop	r15
    18dc:	ef 90       	pop	r14
    18de:	08 95       	ret

000018e0 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects>:
    18e0:	ff 92       	push	r15

uint8_t SlaveCtrlAPI::dmxColour(uint16_t slave_addr, uint8_t r, uint8_t g, uint8_t b, dmxEffects e){
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	f8 2e       	mov	r15, r24
    18ec:	16 2f       	mov	r17, r22
    18ee:	d4 2f       	mov	r29, r20
    18f0:	c2 2f       	mov	r28, r18
		while (modbus_master.CheckBusy());
    18f2:	80 ee       	ldi	r24, 0xE0	; 224
    18f4:	91 e0       	ldi	r25, 0x01	; 1
    18f6:	aa db       	rcall	.-2220   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    18f8:	81 11       	cpse	r24, r1
    18fa:	fb cf       	rjmp	.-10     	; 0x18f2 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects+0x12>
		modbus_master.data_buffer.Reset();
    18fc:	8b ee       	ldi	r24, 0xEB	; 235
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	70 de       	rcall	.-800    	; 0x15e2 <_ZN17ModbusMasterArray5ResetEv>
		
		modbus_master.data_buffer.Append(r);
    1902:	61 2f       	mov	r22, r17
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	8b ee       	ldi	r24, 0xEB	; 235
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	71 de       	rcall	.-798    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
		modbus_master.data_buffer.Append(g);
    190c:	6d 2f       	mov	r22, r29
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	8b ee       	ldi	r24, 0xEB	; 235
    1912:	91 e0       	ldi	r25, 0x01	; 1
    1914:	6c de       	rcall	.-808    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
		modbus_master.data_buffer.Append(b);
    1916:	6c 2f       	mov	r22, r28
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	8b ee       	ldi	r24, 0xEB	; 235
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	67 de       	rcall	.-818    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
		
		switch (e){
    1920:	01 30       	cpi	r16, 0x01	; 1
    1922:	51 f0       	breq	.+20     	; 0x1938 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects+0x58>
    1924:	18 f0       	brcs	.+6      	; 0x192c <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects+0x4c>
    1926:	02 30       	cpi	r16, 0x02	; 2
    1928:	69 f0       	breq	.+26     	; 0x1944 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects+0x64>
			case STROBE:
			modbus_master.data_buffer.Append(1);
    192a:	11 c0       	rjmp	.+34     	; 0x194e <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects+0x6e>
    192c:	61 e0       	ldi	r22, 0x01	; 1
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	8b ee       	ldi	r24, 0xEB	; 235
    1932:	91 e0       	ldi	r25, 0x01	; 1
			break;
    1934:	5c de       	rcall	.-840    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
			case CONSTANT:
			modbus_master.data_buffer.Append(2);
    1936:	0b c0       	rjmp	.+22     	; 0x194e <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects+0x6e>
    1938:	62 e0       	ldi	r22, 0x02	; 2
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	8b ee       	ldi	r24, 0xEB	; 235
    193e:	91 e0       	ldi	r25, 0x01	; 1
			break;
    1940:	56 de       	rcall	.-852    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
			case NO_EFFECT:
			modbus_master.data_buffer.Append(3);
    1942:	05 c0       	rjmp	.+10     	; 0x194e <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects+0x6e>
    1944:	63 e0       	ldi	r22, 0x03	; 3
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	8b ee       	ldi	r24, 0xEB	; 235
    194a:	91 e0       	ldi	r25, 0x01	; 1
			break;	
		}
		modbus_master.WriteOutputReg(slave_addr, DMX_COLOUR_ADDR);
    194c:	50 de       	rcall	.-864    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
    194e:	49 ef       	ldi	r20, 0xF9	; 249
    1950:	53 e0       	ldi	r21, 0x03	; 3
    1952:	6f 2d       	mov	r22, r15
    1954:	80 ee       	ldi	r24, 0xE0	; 224
    1956:	91 e0       	ldi	r25, 0x01	; 1
		
		//Second transmission
		while (modbus_master.CheckBusy());
    1958:	c9 db       	rcall	.-2158   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    195a:	80 ee       	ldi	r24, 0xE0	; 224
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	76 db       	rcall	.-2324   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
		modbus_master.WriteOutputReg(slave_addr, DMX_COLOUR_ADDR);
    1960:	81 11       	cpse	r24, r1
    1962:	fb cf       	rjmp	.-10     	; 0x195a <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects+0x7a>
    1964:	49 ef       	ldi	r20, 0xF9	; 249
    1966:	53 e0       	ldi	r21, 0x03	; 3
    1968:	6f 2d       	mov	r22, r15
    196a:	80 ee       	ldi	r24, 0xE0	; 224
		
		while (modbus_master.CheckBusy());
    196c:	91 e0       	ldi	r25, 0x01	; 1
    196e:	be db       	rcall	.-2180   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    1970:	80 ee       	ldi	r24, 0xE0	; 224
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	6b db       	rcall	.-2346   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    1976:	81 11       	cpse	r24, r1
		return modbus_master.LastTransactionSuccess();
    1978:	fb cf       	rjmp	.-10     	; 0x1970 <_ZN12SlaveCtrlAPI9dmxColourEjhhh10dmxEffects+0x90>
    197a:	80 ee       	ldi	r24, 0xE0	; 224
    197c:	91 e0       	ldi	r25, 0x01	; 1
    197e:	69 db       	rcall	.-2350   	; 0x1052 <_ZN12ModbusMaster22LastTransactionSuccessEv>
	
}
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	08 95       	ret

0000198c <_ZN12SlaveCtrlAPI11dmxSunStartEj>:

uint8_t SlaveCtrlAPI::dmxSunStart(uint16_t slave_addr){
    198c:	cf 93       	push	r28
    198e:	c8 2f       	mov	r28, r24
		while (modbus_master.CheckBusy());
    1990:	80 ee       	ldi	r24, 0xE0	; 224
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	5b db       	rcall	.-2378   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    1996:	81 11       	cpse	r24, r1
    1998:	fb cf       	rjmp	.-10     	; 0x1990 <_ZN12SlaveCtrlAPI11dmxSunStartEj+0x4>
		
		modbus_master.data_buffer.Reset();
    199a:	8b ee       	ldi	r24, 0xEB	; 235
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	21 de       	rcall	.-958    	; 0x15e2 <_ZN17ModbusMasterArray5ResetEv>
		modbus_master.data_buffer.Append(0);
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	8b ee       	ldi	r24, 0xEB	; 235
    19a6:	91 e0       	ldi	r25, 0x01	; 1
    19a8:	22 de       	rcall	.-956    	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
		
		modbus_master.WriteOutputReg(slave_addr, DMX_SUN_START_ADDR);
    19aa:	47 ef       	ldi	r20, 0xF7	; 247
    19ac:	53 e0       	ldi	r21, 0x03	; 3
    19ae:	6c 2f       	mov	r22, r28
    19b0:	80 ee       	ldi	r24, 0xE0	; 224
    19b2:	91 e0       	ldi	r25, 0x01	; 1
		
		while (modbus_master.CheckBusy());
    19b4:	9b db       	rcall	.-2250   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    19b6:	80 ee       	ldi	r24, 0xE0	; 224
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	48 db       	rcall	.-2416   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    19bc:	81 11       	cpse	r24, r1
		return modbus_master.LastTransactionSuccess();
    19be:	fb cf       	rjmp	.-10     	; 0x19b6 <_ZN12SlaveCtrlAPI11dmxSunStartEj+0x2a>
    19c0:	80 ee       	ldi	r24, 0xE0	; 224
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	46 db       	rcall	.-2420   	; 0x1052 <_ZN12ModbusMaster22LastTransactionSuccessEv>
}
    19c6:	cf 91       	pop	r28
    19c8:	08 95       	ret

000019ca <_ZN12SlaveCtrlAPI10dmxSunStopEj>:

	
uint8_t SlaveCtrlAPI::dmxSunStop(uint16_t slave_addr){
    19ca:	cf 93       	push	r28
    19cc:	c8 2f       	mov	r28, r24
	while (modbus_master.CheckBusy());
    19ce:	80 ee       	ldi	r24, 0xE0	; 224
    19d0:	91 e0       	ldi	r25, 0x01	; 1
    19d2:	3c db       	rcall	.-2440   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    19d4:	81 11       	cpse	r24, r1
    19d6:	fb cf       	rjmp	.-10     	; 0x19ce <_ZN12SlaveCtrlAPI10dmxSunStopEj+0x4>
	
	modbus_master.data_buffer.Reset();
    19d8:	8b ee       	ldi	r24, 0xEB	; 235
    19da:	91 e0       	ldi	r25, 0x01	; 1
    19dc:	02 de       	rcall	.-1020   	; 0x15e2 <_ZN17ModbusMasterArray5ResetEv>
	modbus_master.data_buffer.Append(0);
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	8b ee       	ldi	r24, 0xEB	; 235
    19e4:	91 e0       	ldi	r25, 0x01	; 1
    19e6:	03 de       	rcall	.-1018   	; 0x15ee <_ZN17ModbusMasterArray6AppendEj>
	
	modbus_master.WriteOutputReg(slave_addr, DMX_SUN_STOP_ADDR);
    19e8:	48 ef       	ldi	r20, 0xF8	; 248
    19ea:	53 e0       	ldi	r21, 0x03	; 3
    19ec:	6c 2f       	mov	r22, r28
    19ee:	80 ee       	ldi	r24, 0xE0	; 224
    19f0:	91 e0       	ldi	r25, 0x01	; 1
	
	while (modbus_master.CheckBusy());
    19f2:	7c db       	rcall	.-2312   	; 0x10ec <_ZN12ModbusMaster14WriteOutputRegEhj>
    19f4:	80 ee       	ldi	r24, 0xE0	; 224
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	29 db       	rcall	.-2478   	; 0x104c <_ZN12ModbusMaster9CheckBusyEv>
    19fa:	81 11       	cpse	r24, r1
	return modbus_master.LastTransactionSuccess();
    19fc:	fb cf       	rjmp	.-10     	; 0x19f4 <_ZN12SlaveCtrlAPI10dmxSunStopEj+0x2a>
    19fe:	80 ee       	ldi	r24, 0xE0	; 224
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	27 db       	rcall	.-2482   	; 0x1052 <_ZN12ModbusMaster22LastTransactionSuccessEv>
}
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret

00001a08 <_ZN12SlaveCtrlAPI8waitTillEm>:

void SlaveCtrlAPI::waitTill(uint32_t x){
    1a08:	cf 92       	push	r12
    1a0a:	df 92       	push	r13
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	6b 01       	movw	r12, r22
    1a12:	7c 01       	movw	r14, r24
	while(TimeKeeper::millis() < x);
    1a14:	2a d0       	rcall	.+84     	; 0x1a6a <_ZN10TimeKeeper6millisEv>
    1a16:	6c 15       	cp	r22, r12
    1a18:	7d 05       	cpc	r23, r13
    1a1a:	8e 05       	cpc	r24, r14
    1a1c:	9f 05       	cpc	r25, r15
    1a1e:	d0 f3       	brcs	.-12     	; 0x1a14 <_ZN12SlaveCtrlAPI8waitTillEm+0xc>
}
    1a20:	ff 90       	pop	r15
    1a22:	ef 90       	pop	r14
    1a24:	df 90       	pop	r13
    1a26:	cf 90       	pop	r12
    1a28:	08 95       	ret

00001a2a <_GLOBAL__sub_I_modbus_master>:
#include "../configs/slaveConfig.h"
#include "../timekeeper/timekeeper.h"
#include "../mbMaster/ModbusMaster.h"

#define UART_BAUD_RATE 9600
ModbusMaster modbus_master;
    1a2a:	80 ee       	ldi	r24, 0xE0	; 224
    1a2c:	91 e0       	ldi	r25, 0x01	; 1
    1a2e:	01 cb       	rjmp	.-2558   	; 0x1032 <_ZN12ModbusMasterC1Ev>
    1a30:	08 95       	ret

00001a32 <_ZN10TimeKeeper4initEv>:
volatile unsigned long timeMS=0;

void TimeKeeper::init(void){
	
	// CTC Mode2, PS:64, Int en  
	TCCR1B |= _BV(WGM12);
    1a32:	e1 e8       	ldi	r30, 0x81	; 129
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	88 60       	ori	r24, 0x08	; 8
    1a3a:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);
    1a3c:	af e6       	ldi	r26, 0x6F	; 111
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	8c 91       	ld	r24, X
    1a42:	82 60       	ori	r24, 0x02	; 2
    1a44:	8c 93       	st	X, r24
	TCCR1B |= _BV(CS11) | _BV(CS10);
    1a46:	80 81       	ld	r24, Z
    1a48:	83 60       	ori	r24, 0x03	; 3
    1a4a:	80 83       	st	Z, r24
	
	// Clock for 1ms
	OCR1AL = ((F_CPU /1000) / 64) - 1;
    1a4c:	89 ef       	ldi	r24, 0xF9	; 249
    1a4e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1AH = 0;
    1a52:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	timeMS = 0;
    1a56:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <timeMS>
    1a5a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <timeMS+0x1>
    1a5e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <timeMS+0x2>
    1a62:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <timeMS+0x3>
	sei();
    1a66:	78 94       	sei
    1a68:	08 95       	ret

00001a6a <_ZN10TimeKeeper6millisEv>:
}

unsigned long TimeKeeper::millis(void){
	return timeMS;
    1a6a:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <timeMS>
    1a6e:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <timeMS+0x1>
    1a72:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <timeMS+0x2>
    1a76:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <timeMS+0x3>
}
    1a7a:	08 95       	ret

00001a7c <__vector_13>:

ISR(TIMER1_COMPA_vect){
    1a7c:	1f 92       	push	r1
    1a7e:	0f 92       	push	r0
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	0f 92       	push	r0
    1a84:	11 24       	eor	r1, r1
    1a86:	8f 93       	push	r24
    1a88:	9f 93       	push	r25
    1a8a:	af 93       	push	r26
    1a8c:	bf 93       	push	r27
	timeMS++;
    1a8e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <timeMS>
    1a92:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <timeMS+0x1>
    1a96:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <timeMS+0x2>
    1a9a:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <timeMS+0x3>
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	a1 1d       	adc	r26, r1
    1aa2:	b1 1d       	adc	r27, r1
    1aa4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <timeMS>
    1aa8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <timeMS+0x1>
    1aac:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <timeMS+0x2>
    1ab0:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <timeMS+0x3>
    1ab4:	bf 91       	pop	r27
    1ab6:	af 91       	pop	r26
    1ab8:	9f 91       	pop	r25
    1aba:	8f 91       	pop	r24
    1abc:	0f 90       	pop	r0
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	0f 90       	pop	r0
    1ac2:	1f 90       	pop	r1
    1ac4:	18 95       	reti

00001ac6 <__vector_21>:
    
    data = (UART1_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart1_getc */
    1ac6:	1f 92       	push	r1
    1ac8:	0f 92       	push	r0
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	0f 92       	push	r0
    1ace:	11 24       	eor	r1, r1
    1ad0:	0b b6       	in	r0, 0x3b	; 59
    1ad2:	0f 92       	push	r0
    1ad4:	8f 93       	push	r24
    1ad6:	9f 93       	push	r25
    1ad8:	ef 93       	push	r30
    1ada:	ff 93       	push	r31
    1adc:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <_ZL11UART_TxHead>
    1ae0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <_ZL11UART_TxTail>
    1ae4:	98 17       	cp	r25, r24
    1ae6:	69 f0       	breq	.+26     	; 0x1b02 <__vector_21+0x3c>
    1ae8:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <_ZL11UART_TxTail>
    1aec:	ef 5f       	subi	r30, 0xFF	; 255
    1aee:	ef 71       	andi	r30, 0x1F	; 31
    1af0:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <_ZL11UART_TxTail>
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	e6 5d       	subi	r30, 0xD6	; 214
    1af8:	fd 4f       	sbci	r31, 0xFD	; 253
    1afa:	80 81       	ld	r24, Z
    1afc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1b00:	05 c0       	rjmp	.+10     	; 0x1b0c <__vector_21+0x46>
    1b02:	e1 ec       	ldi	r30, 0xC1	; 193
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	8f 7d       	andi	r24, 0xDF	; 223
    1b0a:	80 83       	st	Z, r24
    1b0c:	ff 91       	pop	r31
    1b0e:	ef 91       	pop	r30
    1b10:	9f 91       	pop	r25
    1b12:	8f 91       	pop	r24
    1b14:	0f 90       	pop	r0
    1b16:	0b be       	out	0x3b, r0	; 59
    1b18:	0f 90       	pop	r0
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	0f 90       	pop	r0
    1b1e:	1f 90       	pop	r1
    1b20:	18 95       	reti

00001b22 <__vector_30>:
    1b22:	1f 92       	push	r1
    1b24:	0f 92       	push	r0
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	0f 92       	push	r0
    1b2a:	11 24       	eor	r1, r1
    1b2c:	5e 98       	cbi	0x0b, 6	; 11
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	0f 90       	pop	r0
    1b34:	1f 90       	pop	r1
    1b36:	18 95       	reti

00001b38 <__vector_29>:
    1b38:	1f 92       	push	r1
    1b3a:	0f 92       	push	r0
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	0f 92       	push	r0
    1b40:	11 24       	eor	r1, r1
    1b42:	0b b6       	in	r0, 0x3b	; 59
    1b44:	0f 92       	push	r0
    1b46:	8f 93       	push	r24
    1b48:	9f 93       	push	r25
    1b4a:	ef 93       	push	r30
    1b4c:	ff 93       	push	r31
    1b4e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZL12UART1_TxHead>
    1b52:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZL12UART1_TxTail>
    1b56:	98 17       	cp	r25, r24
    1b58:	71 f0       	breq	.+28     	; 0x1b76 <__vector_29+0x3e>
    1b5a:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <_ZL12UART1_TxTail>
    1b5e:	ef 5f       	subi	r30, 0xFF	; 255
    1b60:	ef 71       	andi	r30, 0x1F	; 31
    1b62:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <_ZL12UART1_TxTail>
    1b66:	5e 9a       	sbi	0x0b, 6	; 11
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	e8 5f       	subi	r30, 0xF8	; 248
    1b6c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b6e:	80 81       	ld	r24, Z
    1b70:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1b74:	05 c0       	rjmp	.+10     	; 0x1b80 <__vector_29+0x48>
    1b76:	e9 ec       	ldi	r30, 0xC9	; 201
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	8f 7d       	andi	r24, 0xDF	; 223
    1b7e:	80 83       	st	Z, r24
    1b80:	ff 91       	pop	r31
    1b82:	ef 91       	pop	r30
    1b84:	9f 91       	pop	r25
    1b86:	8f 91       	pop	r24
    1b88:	0f 90       	pop	r0
    1b8a:	0b be       	out	0x3b, r0	; 59
    1b8c:	0f 90       	pop	r0
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	0f 90       	pop	r0
    1b92:	1f 90       	pop	r1
    1b94:	18 95       	reti

00001b96 <_Z10uart1_initj>:
    1b96:	56 9a       	sbi	0x0a, 6	; 10
    1b98:	5e 98       	cbi	0x0b, 6	; 11
    1b9a:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <_ZL12UART1_TxHead>
    1b9e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <_ZL12UART1_TxTail>
    1ba2:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <_ZL12UART1_RxHead>
    1ba6:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_ZL12UART1_RxTail>
    1baa:	99 23       	and	r25, r25
    1bac:	24 f4       	brge	.+8      	; 0x1bb6 <_Z10uart1_initj+0x20>
    1bae:	22 e0       	ldi	r18, 0x02	; 2
    1bb0:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1bb4:	9f 77       	andi	r25, 0x7F	; 127
    1bb6:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1bba:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1bbe:	e9 ec       	ldi	r30, 0xC9	; 201
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	88 e9       	ldi	r24, 0x98	; 152
    1bc4:	80 83       	st	Z, r24
    1bc6:	80 81       	ld	r24, Z
    1bc8:	80 64       	ori	r24, 0x40	; 64
    1bca:	80 83       	st	Z, r24
    1bcc:	ea ec       	ldi	r30, 0xCA	; 202
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	86 e0       	ldi	r24, 0x06	; 6
    1bd2:	80 83       	st	Z, r24
    1bd4:	80 81       	ld	r24, Z
    1bd6:	80 63       	ori	r24, 0x30	; 48
    1bd8:	80 83       	st	Z, r24
    1bda:	80 81       	ld	r24, Z
    1bdc:	86 60       	ori	r24, 0x06	; 6
    1bde:	80 83       	st	Z, r24
    1be0:	08 95       	ret

00001be2 <_Z10uart1_putch>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
    1be2:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <_ZL12UART1_TxHead>
    1be6:	2f 5f       	subi	r18, 0xFF	; 255
    1be8:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
    1bea:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <_ZL12UART1_TxTail>
    1bee:	29 17       	cp	r18, r25
    1bf0:	e1 f3       	breq	.-8      	; 0x1bea <_Z10uart1_putch+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
    1bf2:	e2 2f       	mov	r30, r18
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	e8 5f       	subi	r30, 0xF8	; 248
    1bf8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bfa:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
    1bfc:	20 93 07 02 	sts	0x0207, r18	; 0x800207 <_ZL12UART1_TxHead>

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
    1c00:	e9 ec       	ldi	r30, 0xC9	; 201
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	80 62       	ori	r24, 0x20	; 32
    1c08:	80 83       	st	Z, r24
    1c0a:	08 95       	ret

00001c0c <__udivmodsi4>:
    1c0c:	a1 e2       	ldi	r26, 0x21	; 33
    1c0e:	1a 2e       	mov	r1, r26
    1c10:	aa 1b       	sub	r26, r26
    1c12:	bb 1b       	sub	r27, r27
    1c14:	fd 01       	movw	r30, r26
    1c16:	0d c0       	rjmp	.+26     	; 0x1c32 <__udivmodsi4_ep>

00001c18 <__udivmodsi4_loop>:
    1c18:	aa 1f       	adc	r26, r26
    1c1a:	bb 1f       	adc	r27, r27
    1c1c:	ee 1f       	adc	r30, r30
    1c1e:	ff 1f       	adc	r31, r31
    1c20:	a2 17       	cp	r26, r18
    1c22:	b3 07       	cpc	r27, r19
    1c24:	e4 07       	cpc	r30, r20
    1c26:	f5 07       	cpc	r31, r21
    1c28:	20 f0       	brcs	.+8      	; 0x1c32 <__udivmodsi4_ep>
    1c2a:	a2 1b       	sub	r26, r18
    1c2c:	b3 0b       	sbc	r27, r19
    1c2e:	e4 0b       	sbc	r30, r20
    1c30:	f5 0b       	sbc	r31, r21

00001c32 <__udivmodsi4_ep>:
    1c32:	66 1f       	adc	r22, r22
    1c34:	77 1f       	adc	r23, r23
    1c36:	88 1f       	adc	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	1a 94       	dec	r1
    1c3c:	69 f7       	brne	.-38     	; 0x1c18 <__udivmodsi4_loop>
    1c3e:	60 95       	com	r22
    1c40:	70 95       	com	r23
    1c42:	80 95       	com	r24
    1c44:	90 95       	com	r25
    1c46:	9b 01       	movw	r18, r22
    1c48:	ac 01       	movw	r20, r24
    1c4a:	bd 01       	movw	r22, r26
    1c4c:	cf 01       	movw	r24, r30
    1c4e:	08 95       	ret

00001c50 <__tablejump2__>:
    1c50:	ee 0f       	add	r30, r30
    1c52:	ff 1f       	adc	r31, r31
    1c54:	00 24       	eor	r0, r0
    1c56:	00 1c       	adc	r0, r0
    1c58:	0b be       	out	0x3b, r0	; 59
    1c5a:	07 90       	elpm	r0, Z+
    1c5c:	f6 91       	elpm	r31, Z
    1c5e:	e0 2d       	mov	r30, r0
    1c60:	09 94       	ijmp

00001c62 <__umulhisi3>:
    1c62:	a2 9f       	mul	r26, r18
    1c64:	b0 01       	movw	r22, r0
    1c66:	b3 9f       	mul	r27, r19
    1c68:	c0 01       	movw	r24, r0
    1c6a:	a3 9f       	mul	r26, r19
    1c6c:	70 0d       	add	r23, r0
    1c6e:	81 1d       	adc	r24, r1
    1c70:	11 24       	eor	r1, r1
    1c72:	91 1d       	adc	r25, r1
    1c74:	b2 9f       	mul	r27, r18
    1c76:	70 0d       	add	r23, r0
    1c78:	81 1d       	adc	r24, r1
    1c7a:	11 24       	eor	r1, r1
    1c7c:	91 1d       	adc	r25, r1
    1c7e:	08 95       	ret

00001c80 <_exit>:
    1c80:	f8 94       	cli

00001c82 <__stop_program>:
    1c82:	ff cf       	rjmp	.-2      	; 0x1c82 <__stop_program>
