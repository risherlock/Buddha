
lightController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00001708  0000179c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001708  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000247  00800132  00800132  000017ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b14  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001709  00000000  00000000  00005684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002462  00000000  00000000  00006d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000838  00000000  00000000  000091f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013ff  00000000  00000000  00009a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c9e  00000000  00000000  0000ae27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000eac5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_18>
      4c:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_19>
      50:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e0       	ldi	r30, 0x08	; 8
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 33       	cpi	r26, 0x32	; 50
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a2 e3       	ldi	r26, 0x32	; 50
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 37       	cpi	r26, 0x79	; 121
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
static USHORT   usRegInputStart = REG_INPUT_START;
static USHORT   usRegOutputBuf[REG_OUTPUT_NREGS];
static USHORT   usRegInputBuf[REG_INPUT_NREGS];

int main(void)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <main+0x6>
      ac:	1f 92       	push	r1
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
	//Indicator init
	DDRB |= (1<<PINB0);
      b2:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1<<PIND7);
      b4:	57 9a       	sbi	0x0a, 7	; 10
	
	//Software PWM init
	softpwm_init();
      b6:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z12softpwm_initv>
	
	//Lights check
	for (uint8_t i=0; i<16; i++){
      ba:	10 e0       	ldi	r17, 0x00	; 0
		softpwm_write(i,127);
      bc:	6f e7       	ldi	r22, 0x7F	; 127
      be:	81 2f       	mov	r24, r17
      c0:	0e 94 31 09 	call	0x1262	; 0x1262 <_Z13softpwm_writehh>
	
	//Software PWM init
	softpwm_init();
	
	//Lights check
	for (uint8_t i=0; i<16; i++){
      c4:	1f 5f       	subi	r17, 0xFF	; 255
      c6:	10 31       	cpi	r17, 0x10	; 16
      c8:	c9 f7       	brne	.-14     	; 0xbc <main+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ca:	2f ef       	ldi	r18, 0xFF	; 255
      cc:	81 ee       	ldi	r24, 0xE1	; 225
      ce:	94 e0       	ldi	r25, 0x04	; 4
      d0:	21 50       	subi	r18, 0x01	; 1
      d2:	80 40       	sbci	r24, 0x00	; 0
      d4:	90 40       	sbci	r25, 0x00	; 0
      d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x2a>
      d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x34>
      da:	00 00       	nop
		softpwm_write(i,127);
	}
	_delay_ms(100);
	for (uint8_t i=0; i<16; i++){
      dc:	10 e0       	ldi	r17, 0x00	; 0
		softpwm_write(i,0);
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	81 2f       	mov	r24, r17
      e2:	0e 94 31 09 	call	0x1262	; 0x1262 <_Z13softpwm_writehh>
	//Lights check
	for (uint8_t i=0; i<16; i++){
		softpwm_write(i,127);
	}
	_delay_ms(100);
	for (uint8_t i=0; i<16; i++){
      e6:	1f 5f       	subi	r17, 0xFF	; 255
      e8:	10 31       	cpi	r17, 0x10	; 16
      ea:	c9 f7       	brne	.-14     	; 0xde <main+0x38>
		softpwm_write(i,0);
	}
	
	//Modbus initialization
	const UCHAR ucSlaveID[] = {0xAA, 0xBB, 0xCC};
      ec:	8a ea       	ldi	r24, 0xAA	; 170
      ee:	89 83       	std	Y+1, r24	; 0x01
      f0:	8b eb       	ldi	r24, 0xBB	; 187
      f2:	8a 83       	std	Y+2, r24	; 0x02
      f4:	8c ec       	ldi	r24, 0xCC	; 204
      f6:	8b 83       	std	Y+3, r24	; 0x03
	eMBInit(MB_ASCII, SLAVE_ADDRESS, 0, 9600, MB_PAR_ODD);
      f8:	ee 24       	eor	r14, r14
      fa:	e3 94       	inc	r14
      fc:	00 e8       	ldi	r16, 0x80	; 128
      fe:	15 e2       	ldi	r17, 0x25	; 37
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	40 e0       	ldi	r20, 0x00	; 0
     106:	65 e4       	ldi	r22, 0x45	; 69
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <eMBInit>
	eMBSetSlaveID(0x34, TRUE, ucSlaveID, 3);
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	ae 01       	movw	r20, r28
     114:	4f 5f       	subi	r20, 0xFF	; 255
     116:	5f 4f       	sbci	r21, 0xFF	; 255
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	84 e3       	ldi	r24, 0x34	; 52
     11c:	0e 94 0c 06 	call	0xc18	; 0xc18 <eMBSetSlaveID>
	eMBEnable();
     120:	0e 94 c1 06 	call	0xd82	; 0xd82 <eMBEnable>
	
	while (1)
	{
		(void )eMBPoll( );
     124:	0e 94 d0 06 	call	0xda0	; 0xda0 <eMBPoll>
     128:	fd cf       	rjmp	.-6      	; 0x124 <main+0x7e>

0000012a <eMBRegInputCB>:
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
	int             iRegIndex;

	if( ( usAddress >= REG_INPUT_START )
     12a:	68 3e       	cpi	r22, 0xE8	; 232
     12c:	23 e0       	ldi	r18, 0x03	; 3
     12e:	72 07       	cpc	r23, r18
     130:	a8 f0       	brcs	.+42     	; 0x15c <eMBRegInputCB+0x32>
	&& ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
     132:	64 0f       	add	r22, r20
     134:	75 1f       	adc	r23, r21
     136:	6d 3e       	cpi	r22, 0xED	; 237
     138:	73 40       	sbci	r23, 0x03	; 3
     13a:	90 f4       	brcc	.+36     	; 0x160 <eMBRegInputCB+0x36>
	{
		iRegIndex = ( int )( usAddress - usRegInputStart );
		while( usNRegs > 0 )
     13c:	41 15       	cp	r20, r1
     13e:	51 05       	cpc	r21, r1
     140:	89 f0       	breq	.+34     	; 0x164 <eMBRegInputCB+0x3a>
     142:	fc 01       	movw	r30, r24
     144:	44 0f       	add	r20, r20
     146:	55 1f       	adc	r21, r21
     148:	84 0f       	add	r24, r20
     14a:	95 1f       	adc	r25, r21
		{
			*pucRegBuffer++ =
			( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
     14c:	10 82       	st	Z, r1
			*pucRegBuffer++ =
			( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
     14e:	11 82       	std	Z+1, r1	; 0x01
     150:	32 96       	adiw	r30, 0x02	; 2

	if( ( usAddress >= REG_INPUT_START )
	&& ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
	{
		iRegIndex = ( int )( usAddress - usRegInputStart );
		while( usNRegs > 0 )
     152:	e8 17       	cp	r30, r24
     154:	f9 07       	cpc	r31, r25
     156:	d1 f7       	brne	.-12     	; 0x14c <eMBRegInputCB+0x22>
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	08 95       	ret
			usNRegs--;
		}
	}
	else
	{
		eStatus = MB_ENOREG;
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	08 95       	ret
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	08 95       	ret
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     164:	80 e0       	ldi	r24, 0x00	; 0
	{
		eStatus = MB_ENOREG;
	}

	return eStatus;
}
     166:	08 95       	ret

00000168 <eMBRegHoldingCB>:


eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	8a 01       	movw	r16, r20
	eMBErrorCode    eStatus = MB_ENOERR;
	int             iRegIndex;

	if( ( usAddress >= REG_OUTPUT_START )
     17a:	68 3e       	cpi	r22, 0xE8	; 232
     17c:	33 e0       	ldi	r19, 0x03	; 3
     17e:	73 07       	cpc	r23, r19
     180:	08 f4       	brcc	.+2      	; 0x184 <eMBRegHoldingCB+0x1c>
     182:	73 c0       	rjmp	.+230    	; 0x26a <eMBRegHoldingCB+0x102>
	&& ( usAddress + usNRegs <= REG_OUTPUT_START + REG_OUTPUT_NREGS ) )
     184:	ab 01       	movw	r20, r22
     186:	40 0f       	add	r20, r16
     188:	51 1f       	adc	r21, r17
     18a:	4f 32       	cpi	r20, 0x2F	; 47
     18c:	54 40       	sbci	r21, 0x04	; 4
     18e:	08 f0       	brcs	.+2      	; 0x192 <eMBRegHoldingCB+0x2a>
     190:	6e c0       	rjmp	.+220    	; 0x26e <eMBRegHoldingCB+0x106>
	{
		iRegIndex = ( int )( usAddress - usRegOutputStart );
     192:	7b 01       	movw	r14, r22
     194:	f8 ee       	ldi	r31, 0xE8	; 232
     196:	ef 1a       	sub	r14, r31
     198:	f3 e0       	ldi	r31, 0x03	; 3
     19a:	ff 0a       	sbc	r15, r31
		if(eMode==MB_REG_READ){
     19c:	21 11       	cpse	r18, r1
     19e:	1a c0       	rjmp	.+52     	; 0x1d4 <eMBRegHoldingCB+0x6c>
			while( usNRegs > 0 )
     1a0:	01 15       	cp	r16, r1
     1a2:	11 05       	cpc	r17, r1
     1a4:	09 f4       	brne	.+2      	; 0x1a8 <eMBRegHoldingCB+0x40>
     1a6:	65 c0       	rjmp	.+202    	; 0x272 <eMBRegHoldingCB+0x10a>
     1a8:	fc 01       	movw	r30, r24
     1aa:	66 0f       	add	r22, r22
     1ac:	77 1f       	adc	r23, r23
     1ae:	db 01       	movw	r26, r22
     1b0:	ae 59       	subi	r26, 0x9E	; 158
     1b2:	b6 40       	sbci	r27, 0x06	; 6
     1b4:	00 0f       	add	r16, r16
     1b6:	11 1f       	adc	r17, r17
     1b8:	08 0f       	add	r16, r24
     1ba:	19 1f       	adc	r17, r25
			{
				*pucRegBuffer++ =
				( unsigned char )( usRegOutputBuf[iRegIndex] >> 8 );
     1bc:	9c 91       	ld	r25, X
     1be:	11 96       	adiw	r26, 0x01	; 1
     1c0:	2c 91       	ld	r18, X
     1c2:	11 97       	sbiw	r26, 0x01	; 1
     1c4:	12 96       	adiw	r26, 0x02	; 2
     1c6:	20 83       	st	Z, r18
				*pucRegBuffer++ =
				( unsigned char )( usRegOutputBuf[iRegIndex] & 0xFF );
     1c8:	91 83       	std	Z+1, r25	; 0x01
     1ca:	32 96       	adiw	r30, 0x02	; 2
	if( ( usAddress >= REG_OUTPUT_START )
	&& ( usAddress + usNRegs <= REG_OUTPUT_START + REG_OUTPUT_NREGS ) )
	{
		iRegIndex = ( int )( usAddress - usRegOutputStart );
		if(eMode==MB_REG_READ){
			while( usNRegs > 0 )
     1cc:	0e 17       	cp	r16, r30
     1ce:	1f 07       	cpc	r17, r31
     1d0:	a9 f7       	brne	.-22     	; 0x1bc <eMBRegHoldingCB+0x54>
     1d2:	51 c0       	rjmp	.+162    	; 0x276 <eMBRegHoldingCB+0x10e>
				( unsigned char )( usRegOutputBuf[iRegIndex] & 0xFF );
				iRegIndex++;
				usNRegs--;
			}
		}
		else if(eMode==MB_REG_WRITE){
     1d4:	21 30       	cpi	r18, 0x01	; 1
     1d6:	09 f0       	breq	.+2      	; 0x1da <eMBRegHoldingCB+0x72>
     1d8:	50 c0       	rjmp	.+160    	; 0x27a <eMBRegHoldingCB+0x112>
			while( usNRegs > 0 )
     1da:	01 15       	cp	r16, r1
     1dc:	11 05       	cpc	r17, r1
     1de:	09 f4       	brne	.+2      	; 0x1e2 <eMBRegHoldingCB+0x7a>
     1e0:	4e c0       	rjmp	.+156    	; 0x27e <eMBRegHoldingCB+0x116>
     1e2:	6c 01       	movw	r12, r24
     1e4:	66 0f       	add	r22, r22
     1e6:	77 1f       	adc	r23, r23
     1e8:	eb 01       	movw	r28, r22
     1ea:	ce 59       	subi	r28, 0x9E	; 158
     1ec:	d6 40       	sbci	r29, 0x06	; 6
			{
				UCHAR upper = *pucRegBuffer++;
				UCHAR lower = *pucRegBuffer++;
				
				usRegOutputBuf[iRegIndex] = (((uint16_t)upper)<<8) | ((uint16_t)lower);
     1ee:	f6 01       	movw	r30, r12
     1f0:	60 81       	ld	r22, Z
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	76 2f       	mov	r23, r22
     1f6:	66 27       	eor	r22, r22
     1f8:	81 81       	ldd	r24, Z+1	; 0x01
     1fa:	68 2b       	or	r22, r24
     1fc:	69 93       	st	Y+, r22
     1fe:	79 93       	st	Y+, r23
				
				//Addresses for light
				if (iRegIndex<32){
     200:	f0 e2       	ldi	r31, 0x20	; 32
     202:	ef 16       	cp	r14, r31
     204:	f1 04       	cpc	r15, r1
     206:	f4 f4       	brge	.+60     	; 0x244 <eMBRegHoldingCB+0xdc>
					//Address where the PWM position  is written
					if ( (!((iRegIndex+1)%SOFTPWM_BLOCK)) ){
     208:	c7 01       	movw	r24, r14
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	80 fd       	sbrc	r24, 0
     20e:	20 c0       	rjmp	.+64     	; 0x250 <eMBRegHoldingCB+0xe8>
						static uint8_t pwm_index;
						pwm_index = (iRegIndex-1)/SOFTPWM_BLOCK;
     210:	97 01       	movw	r18, r14
     212:	21 50       	subi	r18, 0x01	; 1
     214:	31 09       	sbc	r19, r1
     216:	c9 01       	movw	r24, r18
     218:	99 23       	and	r25, r25
     21a:	0c f4       	brge	.+2      	; 0x21e <eMBRegHoldingCB+0xb6>
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	95 95       	asr	r25
     220:	87 95       	ror	r24
					
						//Instantaneous write(upper 8 bit)
						if (usRegOutputBuf[iRegIndex] & 0xFF00){
     222:	9b 01       	movw	r18, r22
     224:	22 27       	eor	r18, r18
     226:	23 2b       	or	r18, r19
     228:	29 f0       	breq	.+10     	; 0x234 <eMBRegHoldingCB+0xcc>
							softpwm_write(pwm_index, (usRegOutputBuf[iRegIndex]>>8)&0x7F);
     22a:	67 2f       	mov	r22, r23
     22c:	6f 77       	andi	r22, 0x7F	; 127
     22e:	0e 94 31 09 	call	0x1262	; 0x1262 <_Z13softpwm_writehh>
     232:	0e c0       	rjmp	.+28     	; 0x250 <eMBRegHoldingCB+0xe8>
						}
					
						//Slow write(lower 8 bit)
						else{
							softpwm_transition(pwm_index, usRegOutputBuf[iRegIndex]&0x7F, usRegOutputBuf[iRegIndex-1]);
     234:	fe 01       	movw	r30, r28
     236:	34 97       	sbiw	r30, 0x04	; 4
     238:	40 81       	ld	r20, Z
     23a:	51 81       	ldd	r21, Z+1	; 0x01
     23c:	6f 77       	andi	r22, 0x7F	; 127
     23e:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z18softpwm_transitionhhj>
     242:	06 c0       	rjmp	.+12     	; 0x250 <eMBRegHoldingCB+0xe8>
						}	
					}
				}
				//Reset lights
				else if (iRegIndex==32){
     244:	30 e2       	ldi	r19, 0x20	; 32
     246:	e3 16       	cp	r14, r19
     248:	f1 04       	cpc	r15, r1
     24a:	11 f4       	brne	.+4      	; 0x250 <eMBRegHoldingCB+0xe8>
					softpwm_init();
     24c:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z12softpwm_initv>
				}
				iRegIndex++;
     250:	8f ef       	ldi	r24, 0xFF	; 255
     252:	e8 1a       	sub	r14, r24
     254:	f8 0a       	sbc	r15, r24
				usNRegs--;
     256:	01 50       	subi	r16, 0x01	; 1
     258:	11 09       	sbc	r17, r1
     25a:	e2 e0       	ldi	r30, 0x02	; 2
     25c:	ce 0e       	add	r12, r30
     25e:	d1 1c       	adc	r13, r1
				iRegIndex++;
				usNRegs--;
			}
		}
		else if(eMode==MB_REG_WRITE){
			while( usNRegs > 0 )
     260:	01 15       	cp	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	21 f6       	brne	.-120    	; 0x1ee <eMBRegHoldingCB+0x86>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0b c0       	rjmp	.+22     	; 0x280 <eMBRegHoldingCB+0x118>
			}	
		}
	}
	else
	{
		eStatus = MB_ENOREG;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	09 c0       	rjmp	.+18     	; 0x280 <eMBRegHoldingCB+0x118>
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	07 c0       	rjmp	.+14     	; 0x280 <eMBRegHoldingCB+0x118>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	05 c0       	rjmp	.+10     	; 0x280 <eMBRegHoldingCB+0x118>
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	03 c0       	rjmp	.+6      	; 0x280 <eMBRegHoldingCB+0x118>
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	01 c0       	rjmp	.+2      	; 0x280 <eMBRegHoldingCB+0x118>
     27e:	80 e0       	ldi	r24, 0x00	; 0
	{
		eStatus = MB_ENOREG;
	}

	return eStatus;
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	df 90       	pop	r13
     28e:	cf 90       	pop	r12
     290:	08 95       	ret

00000292 <eMBRegCoilsCB>:
eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
eMBRegisterMode eMode )
{
	return MB_ENOREG;
}
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	08 95       	ret

00000296 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
	return MB_ENOREG;
}
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	08 95       	ret

0000029a <eMBASCIIInit>:
static volatile UCHAR ucMBLFCharacter;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
     29a:	0f 93       	push	r16
     29c:	86 2f       	mov	r24, r22
     29e:	ba 01       	movw	r22, r20
     2a0:	a9 01       	movw	r20, r18
    eMBErrorCode    eStatus = MB_ENOERR;
    ( void )ucSlaveAddress;
    
    ENTER_CRITICAL_SECTION(  );
     2a2:	f8 94       	cli
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;
     2a4:	9a e0       	ldi	r25, 0x0A	; 10
     2a6:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <ucMBLFCharacter>

    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
     2aa:	28 e0       	ldi	r18, 0x08	; 8
     2ac:	0e 94 bc 07 	call	0xf78	; 0xf78 <xMBPortSerialInit>
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	41 f4       	brne	.+16     	; 0x2c4 <eMBASCIIInit+0x2a>
    {
        eStatus = MB_EPORTERR;
    }
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
     2b4:	80 e2       	ldi	r24, 0x20	; 32
     2b6:	9e e4       	ldi	r25, 0x4E	; 78
     2b8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <xMBPortTimersInit>
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	21 f0       	breq	.+8      	; 0x2c8 <eMBASCIIInit+0x2e>
    {
        eStatus = MB_EPORTERR;
     2c0:	83 e0       	ldi	r24, 0x03	; 3
     2c2:	03 c0       	rjmp	.+6      	; 0x2ca <eMBASCIIInit+0x30>
    ENTER_CRITICAL_SECTION(  );
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;

    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
     2c4:	83 e0       	ldi	r24, 0x03	; 3
     2c6:	01 c0       	rjmp	.+2      	; 0x2ca <eMBASCIIInit+0x30>

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     2c8:	80 e0       	ldi	r24, 0x00	; 0
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
    {
        eStatus = MB_EPORTERR;
    }

    EXIT_CRITICAL_SECTION(  );
     2ca:	78 94       	sei

    return eStatus;
}
     2cc:	0f 91       	pop	r16
     2ce:	08 95       	ret

000002d0 <eMBASCIIStart>:

void
eMBASCIIStart( void )
{
    ENTER_CRITICAL_SECTION(  );
     2d0:	f8 94       	cli
    vMBPortSerialEnable( TRUE, FALSE );
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <vMBPortSerialEnable>
    eRcvState = STATE_RX_IDLE;
     2da:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <eRcvState>
    EXIT_CRITICAL_SECTION(  );
     2de:	78 94       	sei

    /* No special startup required for ASCII. */
    ( void )xMBPortEventPost( EV_READY );
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	0e 94 88 07 	call	0xf10	; 0xf10 <xMBPortEventPost>
     2e6:	08 95       	ret

000002e8 <eMBASCIIStop>:
}

void
eMBASCIIStop( void )
{
    ENTER_CRITICAL_SECTION(  );
     2e8:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	0e 94 9d 07 	call	0xf3a	; 0xf3a <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
     2f2:	0e 94 b5 08 	call	0x116a	; 0x116a <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
     2f6:	78 94       	sei
     2f8:	08 95       	ret

000002fa <eMBASCIIReceive>:
}

eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	ec 01       	movw	r28, r24
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
     300:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
     302:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <usRcvBufferPos>
     306:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <usRcvBufferPos+0x1>
     30a:	23 30       	cpi	r18, 0x03	; 3
     30c:	31 05       	cpc	r19, r1
     30e:	20 f1       	brcs	.+72     	; 0x358 <eMBASCIIReceive+0x5e>
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
     310:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <usRcvBufferPos>
     314:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <usRcvBufferPos+0x1>
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     318:	10 97       	sbiw	r26, 0x00	; 0
     31a:	61 f0       	breq	.+24     	; 0x334 <eMBASCIIReceive+0x3a>
     31c:	e9 e7       	ldi	r30, 0x79	; 121
     31e:	f2 e0       	ldi	r31, 0x02	; 2
     320:	a7 58       	subi	r26, 0x87	; 135
     322:	bd 4f       	sbci	r27, 0xFD	; 253
     324:	90 e0       	ldi	r25, 0x00	; 0
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
     326:	21 91       	ld	r18, Z+
     328:	92 0f       	add	r25, r18
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     32a:	ea 17       	cp	r30, r26
     32c:	fb 07       	cpc	r31, r27
     32e:	d9 f7       	brne	.-10     	; 0x326 <eMBASCIIReceive+0x2c>
    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
     330:	91 11       	cpse	r25, r1
     332:	14 c0       	rjmp	.+40     	; 0x35c <eMBASCIIReceive+0x62>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucASCIIBuf[MB_SER_PDU_ADDR_OFF];
     334:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <ucRTUBuf>
     338:	88 83       	st	Y, r24

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );
     33a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <usRcvBufferPos>
     33e:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <usRcvBufferPos+0x1>
     342:	02 97       	sbiw	r24, 0x02	; 2
     344:	fa 01       	movw	r30, r20
     346:	91 83       	std	Z+1, r25	; 0x01
     348:	80 83       	st	Z, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
     34a:	8a e7       	ldi	r24, 0x7A	; 122
     34c:	92 e0       	ldi	r25, 0x02	; 2
     34e:	fb 01       	movw	r30, r22
     350:	91 83       	std	Z+1, r25	; 0x01
     352:	80 83       	st	Z, r24
}

eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     354:	80 e0       	ldi	r24, 0x00	; 0
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
     356:	03 c0       	rjmp	.+6      	; 0x35e <eMBASCIIReceive+0x64>
    }
    else
    {
        eStatus = MB_EIO;
     358:	85 e0       	ldi	r24, 0x05	; 5
     35a:	01 c0       	rjmp	.+2      	; 0x35e <eMBASCIIReceive+0x64>
     35c:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
     35e:	78 94       	sei
    return eStatus;
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <eMBASCIISend>:
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR           usLRC;

    ENTER_CRITICAL_SECTION(  );
     366:	f8 94       	cli
    /* Check if the receiver is still in idle state. If not we where too
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
     368:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <eRcvState>
     36c:	91 11       	cpse	r25, r1
     36e:	42 c0       	rjmp	.+132    	; 0x3f4 <eMBASCIISend+0x8e>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
     370:	fb 01       	movw	r30, r22
     372:	31 97       	sbiw	r30, 0x01	; 1
     374:	f0 93 c2 01 	sts	0x01C2, r31	; 0x8001c2 <pucSndBufferCur+0x1>
     378:	e0 93 c1 01 	sts	0x01C1, r30	; 0x8001c1 <pucSndBufferCur>
        usSndBufferCount = 1;
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	30 93 c0 01 	sts	0x01C0, r19	; 0x8001c0 <usSndBufferCount+0x1>
     384:	20 93 bf 01 	sts	0x01BF, r18	; 0x8001bf <usSndBufferCount>

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
     388:	80 83       	st	Z, r24
        usSndBufferCount += usLength;
     38a:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <usSndBufferCount>
     38e:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <usSndBufferCount+0x1>
     392:	48 0f       	add	r20, r24
     394:	59 1f       	adc	r21, r25
     396:	50 93 c0 01 	sts	0x01C0, r21	; 0x8001c0 <usSndBufferCount+0x1>
     39a:	40 93 bf 01 	sts	0x01BF, r20	; 0x8001bf <usSndBufferCount>

        /* Calculate LRC checksum for Modbus-Serial-Line-PDU. */
        usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
     39e:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <usSndBufferCount>
     3a2:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <usSndBufferCount+0x1>
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     3a6:	c9 01       	movw	r24, r18
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	23 2b       	or	r18, r19
     3ac:	49 f0       	breq	.+18     	; 0x3c0 <eMBASCIISend+0x5a>
     3ae:	68 0f       	add	r22, r24
     3b0:	79 1f       	adc	r23, r25
     3b2:	80 e0       	ldi	r24, 0x00	; 0
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
     3b4:	91 91       	ld	r25, Z+
     3b6:	89 0f       	add	r24, r25
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     3b8:	e6 17       	cp	r30, r22
     3ba:	f7 07       	cpc	r31, r23
     3bc:	d9 f7       	brne	.-10     	; 0x3b4 <eMBASCIISend+0x4e>
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <eMBASCIISend+0x5c>


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */
     3c0:	80 e0       	ldi	r24, 0x00	; 0
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
    }

    /* Return twos complement */
    ucLRC = ( UCHAR ) ( -( ( CHAR ) ucLRC ) );
     3c2:	81 95       	neg	r24
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
        usSndBufferCount += usLength;

        /* Calculate LRC checksum for Modbus-Serial-Line-PDU. */
        usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
        ucASCIIBuf[usSndBufferCount++] = usLRC;
     3c4:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <usSndBufferCount>
     3c8:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <usSndBufferCount+0x1>
     3cc:	a9 01       	movw	r20, r18
     3ce:	4f 5f       	subi	r20, 0xFF	; 255
     3d0:	5f 4f       	sbci	r21, 0xFF	; 255
     3d2:	50 93 c0 01 	sts	0x01C0, r21	; 0x8001c0 <usSndBufferCount+0x1>
     3d6:	40 93 bf 01 	sts	0x01BF, r20	; 0x8001bf <usSndBufferCount>
     3da:	f9 01       	movw	r30, r18
     3dc:	e7 58       	subi	r30, 0x87	; 135
     3de:	fd 4f       	sbci	r31, 0xFD	; 253
     3e0:	80 83       	st	Z, r24

        /* Activate the transmitter. */
        eSndState = STATE_TX_START;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <eSndState>
        vMBPortSerialEnable( FALSE, TRUE );
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	0e 94 9d 07 	call	0xf3a	; 0xf3a <vMBPortSerialEnable>
}

eMBErrorCode
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <eMBASCIISend+0x90>
        eSndState = STATE_TX_START;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
     3f4:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
     3f6:	78 94       	sei
    return eStatus;
}
     3f8:	08 95       	ret

000003fa <xMBASCIIReceiveFSM>:

BOOL
xMBASCIIReceiveFSM( void )
{
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	1f 92       	push	r1
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;
    UCHAR           ucResult;

    assert( eSndState == STATE_TX_IDLE );

    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
     404:	ce 01       	movw	r24, r28
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	0e 94 02 08 	call	0x1004	; 0x1004 <xMBPortSerialGetByte>
    switch ( eRcvState )
     40c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <eRcvState>
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	31 f0       	breq	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     414:	08 f4       	brcc	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     416:	7d c0       	rjmp	.+250    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     418:	82 30       	cpi	r24, 0x02	; 2
     41a:	09 f4       	brne	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41c:	5a c0       	rjmp	.+180    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     41e:	89 c0       	rjmp	.+274    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
         * block. Other characters are part of the data block and their
         * ASCII value is converted back to a binary representation.
         */
    case STATE_RX_RCV:
        /* Enable timer for character timeout. */
        vMBPortTimersEnable(  );
     420:	0e 94 82 08 	call	0x1104	; 0x1104 <vMBPortTimersEnable>
        if( ucByte == ':' )
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	8a 33       	cpi	r24, 0x3A	; 58
     428:	41 f4       	brne	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
     42a:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <eBytePos>
            usRcvBufferPos = 0;
     42e:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <usRcvBufferPos+0x1>
     432:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <usRcvBufferPos>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	81 c0       	rjmp	.+258    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
            usRcvBufferPos = 0;
        }
        else if( ucByte == MB_ASCII_DEFAULT_CR )
     43a:	8d 30       	cpi	r24, 0x0D	; 13
     43c:	29 f4       	brne	.+10     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
        {
            eRcvState = STATE_RX_WAIT_EOF;
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <eRcvState>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	7a c0       	rjmp	.+244    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>


static          UCHAR
prvucMBCHAR2BIN( UCHAR ucCharacter )
{
    if( ( ucCharacter >= '0' ) && ( ucCharacter <= '9' ) )
     448:	90 ed       	ldi	r25, 0xD0	; 208
     44a:	98 0f       	add	r25, r24
     44c:	9a 30       	cpi	r25, 0x0A	; 10
     44e:	40 f0       	brcs	.+16     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
    {
        return ( UCHAR )( ucCharacter - '0' );
    }
    else if( ( ucCharacter >= 'A' ) && ( ucCharacter <= 'F' ) )
     450:	9f eb       	ldi	r25, 0xBF	; 191
     452:	98 0f       	add	r25, r24
     454:	96 30       	cpi	r25, 0x06	; 6
     456:	18 f4       	brcc	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
    {
        return ( UCHAR )( ucCharacter - 'A' + 0x0A );
     458:	99 ec       	ldi	r25, 0xC9	; 201
     45a:	98 0f       	add	r25, r24
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
    }
    else
    {
        return 0xFF;
     45e:	9f ef       	ldi	r25, 0xFF	; 255
            eRcvState = STATE_RX_WAIT_EOF;
        }
        else
        {
            ucResult = prvucMBCHAR2BIN( ucByte );
            switch ( eBytePos )
     460:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <eBytePos>
     464:	88 23       	and	r24, r24
     466:	19 f0       	breq	.+6      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	e9 f0       	breq	.+58     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     46c:	64 c0       	rjmp	.+200    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
            {
                /* High nibble of the byte comes first. We check for
                 * a buffer overflow here. */
            case BYTE_HIGH_NIBBLE:
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
     46e:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <usRcvBufferPos>
     472:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <usRcvBufferPos+0x1>
     476:	2f 3f       	cpi	r18, 0xFF	; 255
     478:	31 05       	cpc	r19, r1
     47a:	09 f0       	breq	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47c:	70 f4       	brcc	.+28     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
                {
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
     47e:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <usRcvBufferPos>
     482:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <usRcvBufferPos+0x1>
     486:	e7 58       	subi	r30, 0x87	; 135
     488:	fd 4f       	sbci	r31, 0xFD	; 253
     48a:	92 95       	swap	r25
     48c:	90 7f       	andi	r25, 0xF0	; 240
     48e:	90 83       	st	Z, r25
                    eBytePos = BYTE_LOW_NIBBLE;
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <eBytePos>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     496:	80 e0       	ldi	r24, 0x00	; 0
            case BYTE_HIGH_NIBBLE:
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
                {
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
                    eBytePos = BYTE_LOW_NIBBLE;
                    break;
     498:	51 c0       	rjmp	.+162    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
                }
                else
                {
                    /* not handled in Modbus specification but seems
                     * a resonable implementation. */
                    eRcvState = STATE_RX_IDLE;
     49a:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <eRcvState>
                    /* Disable previously activated timer because of error state. */
                    vMBPortTimersDisable(  );
     49e:	0e 94 b5 08 	call	0x116a	; 0x116a <vMBPortTimersDisable>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     4a2:	80 e0       	ldi	r24, 0x00	; 0
                     * a resonable implementation. */
                    eRcvState = STATE_RX_IDLE;
                    /* Disable previously activated timer because of error state. */
                    vMBPortTimersDisable(  );
                }
                break;
     4a4:	4b c0       	rjmp	.+150    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>

            case BYTE_LOW_NIBBLE:
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
     4a6:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <usRcvBufferPos>
     4aa:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <usRcvBufferPos+0x1>
     4ae:	e7 58       	subi	r30, 0x87	; 135
     4b0:	fd 4f       	sbci	r31, 0xFD	; 253
     4b2:	80 81       	ld	r24, Z
     4b4:	98 2b       	or	r25, r24
     4b6:	90 83       	st	Z, r25
                usRcvBufferPos++;
     4b8:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <usRcvBufferPos>
     4bc:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <usRcvBufferPos+0x1>
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <usRcvBufferPos+0x1>
     4c6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <usRcvBufferPos>
                eBytePos = BYTE_HIGH_NIBBLE;
     4ca:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <eBytePos>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     4ce:	80 e0       	ldi	r24, 0x00	; 0

            case BYTE_LOW_NIBBLE:
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
                usRcvBufferPos++;
                eBytePos = BYTE_HIGH_NIBBLE;
                break;
     4d0:	35 c0       	rjmp	.+106    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
            }
        }
        break;

    case STATE_RX_WAIT_EOF:
        if( ucByte == ucMBLFCharacter )
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <ucMBLFCharacter>
     4d8:	89 13       	cpse	r24, r25
     4da:	08 c0       	rjmp	.+16     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
        {
            /* Disable character timeout timer because all characters are
             * received. */
            vMBPortTimersDisable(  );
     4dc:	0e 94 b5 08 	call	0x116a	; 0x116a <vMBPortTimersDisable>
            /* Receiver is again in idle state. */
            eRcvState = STATE_RX_IDLE;
     4e0:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <eRcvState>

            /* Notify the caller of eMBASCIIReceive that a new frame
             * was received. */
            xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	0e 94 88 07 	call	0xf10	; 0xf10 <xMBPortEventPost>
     4ea:	28 c0       	rjmp	.+80     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
        }
        else if( ucByte == ':' )
     4ec:	8a 33       	cpi	r24, 0x3A	; 58
     4ee:	69 f4       	brne	.+26     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
        {
            /* Empty receive buffer and back to receive state. */
            eBytePos = BYTE_HIGH_NIBBLE;
     4f0:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <eBytePos>
            usRcvBufferPos = 0;
     4f4:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <usRcvBufferPos+0x1>
     4f8:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <usRcvBufferPos>
            eRcvState = STATE_RX_RCV;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <eRcvState>

            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
     502:	0e 94 82 08 	call	0x1104	; 0x1104 <vMBPortTimersEnable>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	19 c0       	rjmp	.+50     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
            vMBPortTimersEnable(  );
        }
        else
        {
            /* Frame is not okay. Delete entire frame. */
            eRcvState = STATE_RX_IDLE;
     50a:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <eRcvState>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	15 c0       	rjmp	.+42     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
            eRcvState = STATE_RX_IDLE;
        }
        break;

    case STATE_RX_IDLE:
        if( ucByte == ':' )
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	8a 33       	cpi	r24, 0x3A	; 58
     516:	89 f4       	brne	.+34     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
        {
            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
     518:	0e 94 82 08 	call	0x1104	; 0x1104 <vMBPortTimersEnable>
            /* Reset the input buffers to store the frame. */
            usRcvBufferPos = 0;;
     51c:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <usRcvBufferPos+0x1>
     520:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <usRcvBufferPos>
            eBytePos = BYTE_HIGH_NIBBLE;
     524:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <eBytePos>
            eRcvState = STATE_RX_RCV;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <eRcvState>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	05 c0       	rjmp	.+10     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	03 c0       	rjmp	.+6      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	01 c0       	rjmp	.+2      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     53a:	80 e0       	ldi	r24, 0x00	; 0
        }
        break;
    }

    return xNeedPoll;
}
     53c:	0f 90       	pop	r0
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <xMBASCIITransmitFSM>:

BOOL
xMBASCIITransmitFSM( void )
{
     544:	cf 93       	push	r28
    BOOL            xNeedPoll = FALSE;
    UCHAR           ucByte;

    assert( eRcvState == STATE_RX_IDLE );
    switch ( eSndState )
     546:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <eSndState>
     54a:	82 30       	cpi	r24, 0x02	; 2
     54c:	c1 f0       	breq	.+48     	; 0x57e <xMBASCIITransmitFSM+0x3a>
     54e:	30 f4       	brcc	.+12     	; 0x55c <xMBASCIITransmitFSM+0x18>
     550:	88 23       	and	r24, r24
     552:	09 f4       	brne	.+2      	; 0x556 <xMBASCIITransmitFSM+0x12>
     554:	82 c0       	rjmp	.+260    	; 0x65a <xMBASCIITransmitFSM+0x116>
     556:	81 30       	cpi	r24, 0x01	; 1
     558:	41 f0       	breq	.+16     	; 0x56a <xMBASCIITransmitFSM+0x26>
     55a:	85 c0       	rjmp	.+266    	; 0x666 <xMBASCIITransmitFSM+0x122>
     55c:	83 30       	cpi	r24, 0x03	; 3
     55e:	09 f4       	brne	.+2      	; 0x562 <xMBASCIITransmitFSM+0x1e>
     560:	66 c0       	rjmp	.+204    	; 0x62e <xMBASCIITransmitFSM+0xea>
     562:	84 30       	cpi	r24, 0x04	; 4
     564:	09 f4       	brne	.+2      	; 0x568 <xMBASCIITransmitFSM+0x24>
     566:	6c c0       	rjmp	.+216    	; 0x640 <xMBASCIITransmitFSM+0xfc>
     568:	7e c0       	rjmp	.+252    	; 0x666 <xMBASCIITransmitFSM+0x122>
    {
        /* Start of transmission. The start of a frame is defined by sending
         * the character ':'. */
    case STATE_TX_START:
        ucByte = ':';
        xMBPortSerialPutByte( ( CHAR )ucByte );
     56a:	8a e3       	ldi	r24, 0x3A	; 58
     56c:	0e 94 fe 07 	call	0xffc	; 0xffc <xMBPortSerialPutByte>
        eSndState = STATE_TX_DATA;
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <eSndState>
        eBytePos = BYTE_HIGH_NIBBLE;
     576:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <eBytePos>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     57a:	c0 e0       	ldi	r28, 0x00	; 0
    case STATE_TX_START:
        ucByte = ':';
        xMBPortSerialPutByte( ( CHAR )ucByte );
        eSndState = STATE_TX_DATA;
        eBytePos = BYTE_HIGH_NIBBLE;
        break;
     57c:	77 c0       	rjmp	.+238    	; 0x66c <xMBASCIITransmitFSM+0x128>
        /* Send the data block. Each data byte is encoded as a character hex
         * stream with the high nibble sent first and the low nibble sent
         * last. If all data bytes are exhausted we send a '\r' character
         * to end the transmission. */
    case STATE_TX_DATA:
        if( usSndBufferCount > 0 )
     57e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <usSndBufferCount>
     582:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <usSndBufferCount+0x1>
     586:	89 2b       	or	r24, r25
     588:	09 f4       	brne	.+2      	; 0x58c <xMBASCIITransmitFSM+0x48>
     58a:	49 c0       	rjmp	.+146    	; 0x61e <xMBASCIITransmitFSM+0xda>
        {
            switch ( eBytePos )
     58c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <eBytePos>
     590:	88 23       	and	r24, r24
     592:	19 f0       	breq	.+6      	; 0x59a <xMBASCIITransmitFSM+0x56>
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	d1 f0       	breq	.+52     	; 0x5cc <xMBASCIITransmitFSM+0x88>
     598:	68 c0       	rjmp	.+208    	; 0x66a <xMBASCIITransmitFSM+0x126>
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
     59a:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <pucSndBufferCur>
     59e:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <pucSndBufferCur+0x1>
     5a2:	80 81       	ld	r24, Z
     5a4:	82 95       	swap	r24
     5a6:	8f 70       	andi	r24, 0x0F	; 15
}

static          UCHAR
prvucMBBIN2CHAR( UCHAR ucByte )
{
    if( ucByte <= 0x09 )
     5a8:	8a 30       	cpi	r24, 0x0A	; 10
     5aa:	10 f4       	brcc	.+4      	; 0x5b0 <xMBASCIITransmitFSM+0x6c>
    {
        return ( UCHAR )( '0' + ucByte );
     5ac:	80 5d       	subi	r24, 0xD0	; 208
     5ae:	07 c0       	rjmp	.+14     	; 0x5be <xMBASCIITransmitFSM+0x7a>
    }
    else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
     5b0:	96 ef       	ldi	r25, 0xF6	; 246
     5b2:	98 0f       	add	r25, r24
     5b4:	96 30       	cpi	r25, 0x06	; 6
     5b6:	10 f4       	brcc	.+4      	; 0x5bc <xMBASCIITransmitFSM+0x78>
    {
        return ( UCHAR )( ucByte - 0x0A + 'A' );
     5b8:	89 5c       	subi	r24, 0xC9	; 201
     5ba:	01 c0       	rjmp	.+2      	; 0x5be <xMBASCIITransmitFSM+0x7a>
    else
    {
        /* Programming error. */
        assert( 0 );
    }
    return '0';
     5bc:	80 e3       	ldi	r24, 0x30	; 48
        {
            switch ( eBytePos )
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
                xMBPortSerialPutByte( ( CHAR ) ucByte );
     5be:	0e 94 fe 07 	call	0xffc	; 0xffc <xMBPortSerialPutByte>
                eBytePos = BYTE_LOW_NIBBLE;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <eBytePos>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     5c8:	c0 e0       	ldi	r28, 0x00	; 0
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
                xMBPortSerialPutByte( ( CHAR ) ucByte );
                eBytePos = BYTE_LOW_NIBBLE;
                break;
     5ca:	50 c0       	rjmp	.+160    	; 0x66c <xMBASCIITransmitFSM+0x128>

            case BYTE_LOW_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
     5cc:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <pucSndBufferCur>
     5d0:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <pucSndBufferCur+0x1>
     5d4:	80 81       	ld	r24, Z
     5d6:	8f 70       	andi	r24, 0x0F	; 15
}

static          UCHAR
prvucMBBIN2CHAR( UCHAR ucByte )
{
    if( ucByte <= 0x09 )
     5d8:	8a 30       	cpi	r24, 0x0A	; 10
     5da:	10 f4       	brcc	.+4      	; 0x5e0 <xMBASCIITransmitFSM+0x9c>
    {
        return ( UCHAR )( '0' + ucByte );
     5dc:	80 5d       	subi	r24, 0xD0	; 208
     5de:	07 c0       	rjmp	.+14     	; 0x5ee <xMBASCIITransmitFSM+0xaa>
    }
    else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
     5e0:	96 ef       	ldi	r25, 0xF6	; 246
     5e2:	98 0f       	add	r25, r24
     5e4:	96 30       	cpi	r25, 0x06	; 6
     5e6:	10 f4       	brcc	.+4      	; 0x5ec <xMBASCIITransmitFSM+0xa8>
    {
        return ( UCHAR )( ucByte - 0x0A + 'A' );
     5e8:	89 5c       	subi	r24, 0xC9	; 201
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <xMBASCIITransmitFSM+0xaa>
    else
    {
        /* Programming error. */
        assert( 0 );
    }
    return '0';
     5ec:	80 e3       	ldi	r24, 0x30	; 48
                eBytePos = BYTE_LOW_NIBBLE;
                break;

            case BYTE_LOW_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
                xMBPortSerialPutByte( ( CHAR )ucByte );
     5ee:	0e 94 fe 07 	call	0xffc	; 0xffc <xMBPortSerialPutByte>
                pucSndBufferCur++;
     5f2:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <pucSndBufferCur>
     5f6:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <pucSndBufferCur+0x1>
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <pucSndBufferCur+0x1>
     600:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <pucSndBufferCur>
                eBytePos = BYTE_HIGH_NIBBLE;
     604:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <eBytePos>
                usSndBufferCount--;
     608:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <usSndBufferCount>
     60c:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <usSndBufferCount+0x1>
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <usSndBufferCount+0x1>
     616:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <usSndBufferCount>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     61a:	c0 e0       	ldi	r28, 0x00	; 0
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
                xMBPortSerialPutByte( ( CHAR )ucByte );
                pucSndBufferCur++;
                eBytePos = BYTE_HIGH_NIBBLE;
                usSndBufferCount--;
                break;
     61c:	27 c0       	rjmp	.+78     	; 0x66c <xMBASCIITransmitFSM+0x128>
            }
        }
        else
        {
            xMBPortSerialPutByte( MB_ASCII_DEFAULT_CR );
     61e:	8d e0       	ldi	r24, 0x0D	; 13
     620:	0e 94 fe 07 	call	0xffc	; 0xffc <xMBPortSerialPutByte>
            eSndState = STATE_TX_END;
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <eSndState>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     62a:	c0 e0       	ldi	r28, 0x00	; 0
     62c:	1f c0       	rjmp	.+62     	; 0x66c <xMBASCIITransmitFSM+0x128>
        }
        break;

        /* Finish the frame by sending a LF character. */
    case STATE_TX_END:
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
     62e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ucMBLFCharacter>
     632:	0e 94 fe 07 	call	0xffc	; 0xffc <xMBPortSerialPutByte>
        /* We need another state to make sure that the CR character has
         * been sent. */
        eSndState = STATE_TX_NOTIFY;
     636:	84 e0       	ldi	r24, 0x04	; 4
     638:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <eSndState>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     63c:	c0 e0       	ldi	r28, 0x00	; 0
    case STATE_TX_END:
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
        /* We need another state to make sure that the CR character has
         * been sent. */
        eSndState = STATE_TX_NOTIFY;
        break;
     63e:	16 c0       	rjmp	.+44     	; 0x66c <xMBASCIITransmitFSM+0x128>

        /* Notify the task which called eMBASCIISend that the frame has
         * been sent. */
    case STATE_TX_NOTIFY:
        eSndState = STATE_TX_IDLE;
     640:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <eSndState>
        xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	0e 94 88 07 	call	0xf10	; 0xf10 <xMBPortEventPost>
     64a:	c8 2f       	mov	r28, r24

        /* Disable transmitter. This prevents another transmit buffer
         * empty interrupt. */
        vMBPortSerialEnable( TRUE, FALSE );
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	0e 94 9d 07 	call	0xf3a	; 0xf3a <vMBPortSerialEnable>
        eSndState = STATE_TX_IDLE;
     654:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <eSndState>
        break;
     658:	09 c0       	rjmp	.+18     	; 0x66c <xMBASCIITransmitFSM+0x128>

        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <vMBPortSerialEnable>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     662:	c0 e0       	ldi	r28, 0x00	; 0
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
        break;
     664:	03 c0       	rjmp	.+6      	; 0x66c <xMBASCIITransmitFSM+0x128>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     666:	c0 e0       	ldi	r28, 0x00	; 0
     668:	01 c0       	rjmp	.+2      	; 0x66c <xMBASCIITransmitFSM+0x128>
     66a:	c0 e0       	ldi	r28, 0x00	; 0
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    }

    return xNeedPoll;
}
     66c:	8c 2f       	mov	r24, r28
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <xMBASCIITimerT1SExpired>:

BOOL
xMBASCIITimerT1SExpired( void )
{
    switch ( eRcvState )
     672:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <eRcvState>
     676:	81 50       	subi	r24, 0x01	; 1
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	10 f4       	brcc	.+4      	; 0x680 <xMBASCIITimerT1SExpired+0xe>
        /* If we have a timeout we go back to the idle state and wait for
         * the next frame.
         */
    case STATE_RX_RCV:
    case STATE_RX_WAIT_EOF:
        eRcvState = STATE_RX_IDLE;
     67c:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <eRcvState>

    default:
        assert( ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_WAIT_EOF ) );
        break;
    }
    vMBPortTimersDisable(  );
     680:	0e 94 b5 08 	call	0x116a	; 0x116a <vMBPortTimersDisable>

    /* no context switch required. */
    return FALSE;
}
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	08 95       	ret

00000688 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     68e:	db 01       	movw	r26, r22
     690:	2d 91       	ld	r18, X+
     692:	3c 91       	ld	r19, X
     694:	25 30       	cpi	r18, 0x05	; 5
     696:	31 05       	cpc	r19, r1
     698:	09 f0       	breq	.+2      	; 0x69c <eMBFuncReadCoils+0x14>
     69a:	57 c0       	rjmp	.+174    	; 0x74a <eMBFuncReadCoils+0xc2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
     69c:	fc 01       	movw	r30, r24
     69e:	43 81       	ldd	r20, Z+3	; 0x03
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	54 2f       	mov	r21, r20
     6a4:	44 27       	eor	r20, r20
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
     6a6:	24 81       	ldd	r18, Z+4	; 0x04
     6a8:	42 2b       	or	r20, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
     6aa:	9a 01       	movw	r18, r20
     6ac:	21 50       	subi	r18, 0x01	; 1
     6ae:	31 09       	sbc	r19, r1
     6b0:	2f 3c       	cpi	r18, 0xCF	; 207
     6b2:	37 40       	sbci	r19, 0x07	; 7
     6b4:	08 f0       	brcs	.+2      	; 0x6b8 <eMBFuncReadCoils+0x30>
     6b6:	4b c0       	rjmp	.+150    	; 0x74e <eMBFuncReadCoils+0xc6>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     6b8:	dc 01       	movw	r26, r24
     6ba:	11 96       	adiw	r26, 0x01	; 1
     6bc:	3c 91       	ld	r19, X
     6be:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     6c0:	12 96       	adiw	r26, 0x02	; 2
     6c2:	2c 91       	ld	r18, X
     6c4:	12 97       	sbiw	r26, 0x02	; 2
        if( ( usCoilCount >= 1 ) &&
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     6c6:	fb 01       	movw	r30, r22
     6c8:	11 82       	std	Z+1, r1	; 0x01
     6ca:	10 82       	st	Z, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
     6cc:	e1 e0       	ldi	r30, 0x01	; 1
     6ce:	ec 93       	st	X, r30
            *usLen += 1;
     6d0:	db 01       	movw	r26, r22
     6d2:	ed 91       	ld	r30, X+
     6d4:	fc 91       	ld	r31, X
     6d6:	11 97       	sbiw	r26, 0x01	; 1
     6d8:	31 96       	adiw	r30, 0x01	; 1
     6da:	ed 93       	st	X+, r30
     6dc:	fc 93       	st	X, r31

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
     6de:	fa 01       	movw	r30, r20
     6e0:	e7 70       	andi	r30, 0x07	; 7
     6e2:	ff 27       	eor	r31, r31
     6e4:	ef 2b       	or	r30, r31
     6e6:	51 f0       	breq	.+20     	; 0x6fc <eMBFuncReadCoils+0x74>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
     6e8:	fa 01       	movw	r30, r20
     6ea:	f6 95       	lsr	r31
     6ec:	e7 95       	ror	r30
     6ee:	f6 95       	lsr	r31
     6f0:	e7 95       	ror	r30
     6f2:	f6 95       	lsr	r31
     6f4:	e7 95       	ror	r30
     6f6:	11 e0       	ldi	r17, 0x01	; 1
     6f8:	1e 0f       	add	r17, r30
     6fa:	08 c0       	rjmp	.+16     	; 0x70c <eMBFuncReadCoils+0x84>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
     6fc:	fa 01       	movw	r30, r20
     6fe:	f6 95       	lsr	r31
     700:	e7 95       	ror	r30
     702:	f6 95       	lsr	r31
     704:	e7 95       	ror	r30
     706:	f6 95       	lsr	r31
     708:	e7 95       	ror	r30
     70a:	1e 2f       	mov	r17, r30
     70c:	eb 01       	movw	r28, r22
            }
            *pucFrameCur++ = ucNBytes;
     70e:	fc 01       	movw	r30, r24
     710:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
     712:	68 81       	ld	r22, Y
     714:	79 81       	ldd	r23, Y+1	; 0x01
     716:	6f 5f       	subi	r22, 0xFF	; 255
     718:	7f 4f       	sbci	r23, 0xFF	; 255
     71a:	79 83       	std	Y+1, r23	; 0x01
     71c:	68 83       	st	Y, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     71e:	62 2f       	mov	r22, r18
     720:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     722:	73 2b       	or	r23, r19
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
     724:	6f 5f       	subi	r22, 0xFF	; 255
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	02 96       	adiw	r24, 0x02	; 2
     72c:	0e 94 49 01 	call	0x292	; 0x292 <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     730:	88 23       	and	r24, r24
     732:	19 f0       	breq	.+6      	; 0x73a <eMBFuncReadCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     734:	0e 94 50 06 	call	0xca0	; 0xca0 <prveMBError2Exception>
     738:	0b c0       	rjmp	.+22     	; 0x750 <eMBFuncReadCoils+0xc8>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
     73a:	88 81       	ld	r24, Y
     73c:	99 81       	ldd	r25, Y+1	; 0x01
     73e:	81 0f       	add	r24, r17
     740:	91 1d       	adc	r25, r1
     742:	99 83       	std	Y+1, r25	; 0x01
     744:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	03 c0       	rjmp	.+6      	; 0x750 <eMBFuncReadCoils+0xc8>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	01 c0       	rjmp	.+2      	; 0x750 <eMBFuncReadCoils+0xc8>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     74e:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	08 95       	ret

00000758 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	00 d0       	rcall	.+0      	; 0x75e <eMBFuncWriteCoil+0x6>
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     762:	fb 01       	movw	r30, r22
     764:	20 81       	ld	r18, Z
     766:	31 81       	ldd	r19, Z+1	; 0x01
     768:	25 30       	cpi	r18, 0x05	; 5
     76a:	31 05       	cpc	r19, r1
     76c:	11 f5       	brne	.+68     	; 0x7b2 <eMBFuncWriteCoil+0x5a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
     76e:	fc 01       	movw	r30, r24
     770:	24 81       	ldd	r18, Z+4	; 0x04
     772:	21 11       	cpse	r18, r1
     774:	20 c0       	rjmp	.+64     	; 0x7b6 <eMBFuncWriteCoil+0x5e>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
     776:	23 81       	ldd	r18, Z+3	; 0x03
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
     778:	3f ef       	ldi	r19, 0xFF	; 255
     77a:	32 0f       	add	r19, r18
     77c:	3e 3f       	cpi	r19, 0xFE	; 254
     77e:	e8 f0       	brcs	.+58     	; 0x7ba <eMBFuncWriteCoil+0x62>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     780:	31 81       	ldd	r19, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     782:	62 81       	ldd	r22, Z+2	; 0x02

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
     784:	1a 82       	std	Y+2, r1	; 0x02
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
     786:	2f 3f       	cpi	r18, 0xFF	; 255
     788:	19 f4       	brne	.+6      	; 0x790 <eMBFuncWriteCoil+0x38>
            {
                ucBuf[0] = 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	89 83       	std	Y+1, r24	; 0x01
     78e:	01 c0       	rjmp	.+2      	; 0x792 <eMBFuncWriteCoil+0x3a>
            }
            else
            {
                ucBuf[0] = 0;
     790:	19 82       	std	Y+1, r1	; 0x01
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     792:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     794:	73 2b       	or	r23, r19
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
     796:	6f 5f       	subi	r22, 0xFF	; 255
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	21 e0       	ldi	r18, 0x01	; 1
     79c:	41 e0       	ldi	r20, 0x01	; 1
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	0e 94 49 01 	call	0x292	; 0x292 <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     7a8:	88 23       	and	r24, r24
     7aa:	49 f0       	breq	.+18     	; 0x7be <eMBFuncWriteCoil+0x66>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     7ac:	0e 94 50 06 	call	0xca0	; 0xca0 <prveMBError2Exception>
     7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <eMBFuncWriteCoil+0x68>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <eMBFuncWriteCoil+0x68>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     7b6:	83 e0       	ldi	r24, 0x03	; 3
     7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <eMBFuncWriteCoil+0x68>
     7ba:	83 e0       	ldi	r24, 0x03	; 3
     7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <eMBFuncWriteCoil+0x68>
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
     7be:	80 e0       	ldi	r24, 0x00	; 0
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     7ce:	fb 01       	movw	r30, r22
     7d0:	20 81       	ld	r18, Z
     7d2:	31 81       	ldd	r19, Z+1	; 0x01
     7d4:	26 30       	cpi	r18, 0x06	; 6
     7d6:	31 05       	cpc	r19, r1
     7d8:	e8 f1       	brcs	.+122    	; 0x854 <eMBFuncWriteMultipleCoils+0x8a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
     7da:	fc 01       	movw	r30, r24
     7dc:	43 81       	ldd	r20, Z+3	; 0x03
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	54 2f       	mov	r21, r20
     7e2:	44 27       	eor	r20, r20
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
     7e4:	24 81       	ldd	r18, Z+4	; 0x04
     7e6:	42 2b       	or	r20, r18

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
     7e8:	9a 01       	movw	r18, r20
     7ea:	27 70       	andi	r18, 0x07	; 7
     7ec:	33 27       	eor	r19, r19
     7ee:	23 2b       	or	r18, r19
     7f0:	49 f0       	breq	.+18     	; 0x804 <eMBFuncWriteMultipleCoils+0x3a>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
     7f2:	9a 01       	movw	r18, r20
     7f4:	36 95       	lsr	r19
     7f6:	27 95       	ror	r18
     7f8:	36 95       	lsr	r19
     7fa:	27 95       	ror	r18
     7fc:	36 95       	lsr	r19
     7fe:	27 95       	ror	r18
     800:	2f 5f       	subi	r18, 0xFF	; 255
     802:	07 c0       	rjmp	.+14     	; 0x812 <eMBFuncWriteMultipleCoils+0x48>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
     804:	9a 01       	movw	r18, r20
     806:	36 95       	lsr	r19
     808:	27 95       	ror	r18
     80a:	36 95       	lsr	r19
     80c:	27 95       	ror	r18
     80e:	36 95       	lsr	r19
     810:	27 95       	ror	r18
        }

        if( ( usCoilCnt >= 1 ) &&
     812:	fa 01       	movw	r30, r20
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	e0 3b       	cpi	r30, 0xB0	; 176
     818:	f7 40       	sbci	r31, 0x07	; 7
     81a:	f0 f4       	brcc	.+60     	; 0x858 <eMBFuncWriteMultipleCoils+0x8e>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
     81c:	fc 01       	movw	r30, r24
     81e:	35 81       	ldd	r19, Z+5	; 0x05
     820:	23 13       	cpse	r18, r19
     822:	1c c0       	rjmp	.+56     	; 0x85c <eMBFuncWriteMultipleCoils+0x92>
     824:	eb 01       	movw	r28, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     826:	61 81       	ldd	r22, Z+1	; 0x01
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	76 2f       	mov	r23, r22
     82c:	66 27       	eor	r22, r22
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     82e:	22 81       	ldd	r18, Z+2	; 0x02
     830:	62 2b       	or	r22, r18

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
     832:	6f 5f       	subi	r22, 0xFF	; 255
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	21 e0       	ldi	r18, 0x01	; 1
     838:	06 96       	adiw	r24, 0x06	; 6
     83a:	0e 94 49 01 	call	0x292	; 0x292 <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     83e:	88 23       	and	r24, r24
     840:	19 f0       	breq	.+6      	; 0x848 <eMBFuncWriteMultipleCoils+0x7e>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     842:	0e 94 50 06 	call	0xca0	; 0xca0 <prveMBError2Exception>
     846:	0b c0       	rjmp	.+22     	; 0x85e <eMBFuncWriteMultipleCoils+0x94>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
     848:	85 e0       	ldi	r24, 0x05	; 5
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	99 83       	std	Y+1, r25	; 0x01
     84e:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	05 c0       	rjmp	.+10     	; 0x85e <eMBFuncWriteMultipleCoils+0x94>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	03 c0       	rjmp	.+6      	; 0x85e <eMBFuncWriteMultipleCoils+0x94>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     858:	83 e0       	ldi	r24, 0x03	; 3
     85a:	01 c0       	rjmp	.+2      	; 0x85e <eMBFuncWriteMultipleCoils+0x94>
     85c:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     86a:	db 01       	movw	r26, r22
     86c:	2d 91       	ld	r18, X+
     86e:	3c 91       	ld	r19, X
     870:	25 30       	cpi	r18, 0x05	; 5
     872:	31 05       	cpc	r19, r1
     874:	09 f0       	breq	.+2      	; 0x878 <eMBFuncReadDiscreteInputs+0x14>
     876:	56 c0       	rjmp	.+172    	; 0x924 <__stack+0x25>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
     878:	fc 01       	movw	r30, r24
     87a:	43 81       	ldd	r20, Z+3	; 0x03
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	54 2f       	mov	r21, r20
     880:	44 27       	eor	r20, r20
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
     882:	24 81       	ldd	r18, Z+4	; 0x04
     884:	42 2b       	or	r20, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
     886:	9a 01       	movw	r18, r20
     888:	21 50       	subi	r18, 0x01	; 1
     88a:	31 09       	sbc	r19, r1
     88c:	2f 3c       	cpi	r18, 0xCF	; 207
     88e:	37 40       	sbci	r19, 0x07	; 7
     890:	08 f0       	brcs	.+2      	; 0x894 <eMBFuncReadDiscreteInputs+0x30>
     892:	4a c0       	rjmp	.+148    	; 0x928 <__stack+0x29>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     894:	dc 01       	movw	r26, r24
     896:	11 96       	adiw	r26, 0x01	; 1
     898:	3c 91       	ld	r19, X
     89a:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     89c:	12 96       	adiw	r26, 0x02	; 2
     89e:	2c 91       	ld	r18, X
     8a0:	12 97       	sbiw	r26, 0x02	; 2
        if( ( usDiscreteCnt >= 1 ) &&
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     8a2:	fb 01       	movw	r30, r22
     8a4:	11 82       	std	Z+1, r1	; 0x01
     8a6:	10 82       	st	Z, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
     8a8:	e2 e0       	ldi	r30, 0x02	; 2
     8aa:	ec 93       	st	X, r30
            *usLen += 1;
     8ac:	db 01       	movw	r26, r22
     8ae:	ed 91       	ld	r30, X+
     8b0:	fc 91       	ld	r31, X
     8b2:	11 97       	sbiw	r26, 0x01	; 1
     8b4:	31 96       	adiw	r30, 0x01	; 1
     8b6:	ed 93       	st	X+, r30
     8b8:	fc 93       	st	X, r31

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
     8ba:	fa 01       	movw	r30, r20
     8bc:	e7 70       	andi	r30, 0x07	; 7
     8be:	ff 27       	eor	r31, r31
     8c0:	ef 2b       	or	r30, r31
     8c2:	51 f0       	breq	.+20     	; 0x8d8 <eMBFuncReadDiscreteInputs+0x74>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
     8c4:	fa 01       	movw	r30, r20
     8c6:	f6 95       	lsr	r31
     8c8:	e7 95       	ror	r30
     8ca:	f6 95       	lsr	r31
     8cc:	e7 95       	ror	r30
     8ce:	f6 95       	lsr	r31
     8d0:	e7 95       	ror	r30
     8d2:	11 e0       	ldi	r17, 0x01	; 1
     8d4:	1e 0f       	add	r17, r30
     8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <eMBFuncReadDiscreteInputs+0x84>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
     8d8:	fa 01       	movw	r30, r20
     8da:	f6 95       	lsr	r31
     8dc:	e7 95       	ror	r30
     8de:	f6 95       	lsr	r31
     8e0:	e7 95       	ror	r30
     8e2:	f6 95       	lsr	r31
     8e4:	e7 95       	ror	r30
     8e6:	1e 2f       	mov	r17, r30
     8e8:	eb 01       	movw	r28, r22
            }
            *pucFrameCur++ = ucNBytes;
     8ea:	fc 01       	movw	r30, r24
     8ec:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
     8ee:	68 81       	ld	r22, Y
     8f0:	79 81       	ldd	r23, Y+1	; 0x01
     8f2:	6f 5f       	subi	r22, 0xFF	; 255
     8f4:	7f 4f       	sbci	r23, 0xFF	; 255
     8f6:	79 83       	std	Y+1, r23	; 0x01
     8f8:	68 83       	st	Y, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     8fa:	62 2f       	mov	r22, r18
     8fc:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     8fe:	73 2b       	or	r23, r19
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
     900:	6f 5f       	subi	r22, 0xFF	; 255
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	02 96       	adiw	r24, 0x02	; 2
     906:	0e 94 4b 01 	call	0x296	; 0x296 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     90a:	88 23       	and	r24, r24
     90c:	19 f0       	breq	.+6      	; 0x914 <__stack+0x15>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     90e:	0e 94 50 06 	call	0xca0	; 0xca0 <prveMBError2Exception>
     912:	0b c0       	rjmp	.+22     	; 0x92a <__stack+0x2b>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
     914:	88 81       	ld	r24, Y
     916:	99 81       	ldd	r25, Y+1	; 0x01
     918:	81 0f       	add	r24, r17
     91a:	91 1d       	adc	r25, r1
     91c:	99 83       	std	Y+1, r25	; 0x01
     91e:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	03 c0       	rjmp	.+6      	; 0x92a <__stack+0x2b>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     924:	83 e0       	ldi	r24, 0x03	; 3
     926:	01 c0       	rjmp	.+2      	; 0x92a <__stack+0x2b>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     928:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	08 95       	ret

00000932 <eMBFuncWriteHoldingRegister>:
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     932:	fb 01       	movw	r30, r22
     934:	20 81       	ld	r18, Z
     936:	31 81       	ldd	r19, Z+1	; 0x01
     938:	25 30       	cpi	r18, 0x05	; 5
     93a:	31 05       	cpc	r19, r1
     93c:	a1 f4       	brne	.+40     	; 0x966 <eMBFuncWriteHoldingRegister+0x34>
     93e:	fc 01       	movw	r30, r24
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     940:	61 81       	ldd	r22, Z+1	; 0x01
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	76 2f       	mov	r23, r22
     946:	66 27       	eor	r22, r22
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     948:	22 81       	ldd	r18, Z+2	; 0x02
     94a:	62 2b       	or	r22, r18
        usRegAddress++;

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
     94c:	6f 5f       	subi	r22, 0xFF	; 255
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	21 e0       	ldi	r18, 0x01	; 1
     952:	41 e0       	ldi	r20, 0x01	; 1
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	03 96       	adiw	r24, 0x03	; 3
     958:	0e 94 b4 00 	call	0x168	; 0x168 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
     95c:	88 23       	and	r24, r24
     95e:	29 f0       	breq	.+10     	; 0x96a <eMBFuncWriteHoldingRegister+0x38>
        {
            eStatus = prveMBError2Exception( eRegStatus );
     960:	0e 94 50 06 	call	0xca0	; 0xca0 <prveMBError2Exception>
     964:	08 95       	ret
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	08 95       	ret

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
     96a:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     96c:	08 95       	ret

0000096e <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
     972:	fb 01       	movw	r30, r22
     974:	20 81       	ld	r18, Z
     976:	31 81       	ldd	r19, Z+1	; 0x01
     978:	26 30       	cpi	r18, 0x06	; 6
     97a:	31 05       	cpc	r19, r1
     97c:	50 f1       	brcs	.+84     	; 0x9d2 <eMBFuncWriteMultipleHoldingRegister+0x64>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
     97e:	fc 01       	movw	r30, r24
     980:	43 81       	ldd	r20, Z+3	; 0x03
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	54 2f       	mov	r21, r20
     986:	44 27       	eor	r20, r20
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
     988:	24 81       	ldd	r18, Z+4	; 0x04
     98a:	42 2b       	or	r20, r18

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
     98c:	9a 01       	movw	r18, r20
     98e:	21 50       	subi	r18, 0x01	; 1
     990:	31 09       	sbc	r19, r1
     992:	28 37       	cpi	r18, 0x78	; 120
     994:	31 05       	cpc	r19, r1
     996:	f8 f4       	brcc	.+62     	; 0x9d6 <eMBFuncWriteMultipleHoldingRegister+0x68>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
     998:	35 81       	ldd	r19, Z+5	; 0x05
     99a:	24 2f       	mov	r18, r20
     99c:	22 0f       	add	r18, r18
     99e:	32 13       	cpse	r19, r18
     9a0:	1c c0       	rjmp	.+56     	; 0x9da <eMBFuncWriteMultipleHoldingRegister+0x6c>
     9a2:	eb 01       	movw	r28, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     9a4:	61 81       	ldd	r22, Z+1	; 0x01
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	76 2f       	mov	r23, r22
     9aa:	66 27       	eor	r22, r22
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2b       	or	r22, r18
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
     9b0:	6f 5f       	subi	r22, 0xFF	; 255
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	06 96       	adiw	r24, 0x06	; 6
     9b8:	0e 94 b4 00 	call	0x168	; 0x168 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     9bc:	88 23       	and	r24, r24
     9be:	19 f0       	breq	.+6      	; 0x9c6 <eMBFuncWriteMultipleHoldingRegister+0x58>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     9c0:	0e 94 50 06 	call	0xca0	; 0xca0 <prveMBError2Exception>
     9c4:	0b c0       	rjmp	.+22     	; 0x9dc <eMBFuncWriteMultipleHoldingRegister+0x6e>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
     9c6:	85 e0       	ldi	r24, 0x05	; 5
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	99 83       	std	Y+1, r25	; 0x01
     9cc:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	05 c0       	rjmp	.+10     	; 0x9dc <eMBFuncWriteMultipleHoldingRegister+0x6e>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	03 c0       	rjmp	.+6      	; 0x9dc <eMBFuncWriteMultipleHoldingRegister+0x6e>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <eMBFuncWriteMultipleHoldingRegister+0x6e>
     9da:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     9ea:	fb 01       	movw	r30, r22
     9ec:	20 81       	ld	r18, Z
     9ee:	31 81       	ldd	r19, Z+1	; 0x01
     9f0:	25 30       	cpi	r18, 0x05	; 5
     9f2:	31 05       	cpc	r19, r1
     9f4:	b1 f5       	brne	.+108    	; 0xa62 <eMBFuncReadHoldingRegister+0x80>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
     9f6:	fc 01       	movw	r30, r24
     9f8:	24 81       	ldd	r18, Z+4	; 0x04
     9fa:	02 2f       	mov	r16, r18
     9fc:	10 e0       	ldi	r17, 0x00	; 0

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
     9fe:	a8 01       	movw	r20, r16
     a00:	41 50       	subi	r20, 0x01	; 1
     a02:	51 09       	sbc	r21, r1
     a04:	4d 37       	cpi	r20, 0x7D	; 125
     a06:	51 05       	cpc	r21, r1
     a08:	70 f5       	brcc	.+92     	; 0xa66 <eMBFuncReadHoldingRegister+0x84>
     a0a:	eb 01       	movw	r28, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     a0c:	31 81       	ldd	r19, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     a0e:	62 81       	ldd	r22, Z+2	; 0x02
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     a10:	19 82       	std	Y+1, r1	; 0x01
     a12:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	80 83       	st	Z, r24
            *usLen += 1;
     a18:	88 81       	ld	r24, Y
     a1a:	99 81       	ldd	r25, Y+1	; 0x01
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	99 83       	std	Y+1, r25	; 0x01
     a20:	88 83       	st	Y, r24

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
     a22:	22 0f       	add	r18, r18
     a24:	21 83       	std	Z+1, r18	; 0x01
            *usLen += 1;
     a26:	88 81       	ld	r24, Y
     a28:	99 81       	ldd	r25, Y+1	; 0x01
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	99 83       	std	Y+1, r25	; 0x01
     a2e:	88 83       	st	Y, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     a30:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     a32:	73 2b       	or	r23, r19
            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
     a34:	6f 5f       	subi	r22, 0xFF	; 255
     a36:	7f 4f       	sbci	r23, 0xFF	; 255
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	a8 01       	movw	r20, r16
     a3c:	cf 01       	movw	r24, r30
     a3e:	02 96       	adiw	r24, 0x02	; 2
     a40:	0e 94 b4 00 	call	0x168	; 0x168 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     a44:	88 23       	and	r24, r24
     a46:	19 f0       	breq	.+6      	; 0xa4e <eMBFuncReadHoldingRegister+0x6c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     a48:	0e 94 50 06 	call	0xca0	; 0xca0 <prveMBError2Exception>
     a4c:	0d c0       	rjmp	.+26     	; 0xa68 <eMBFuncReadHoldingRegister+0x86>
            }
            else
            {
                *usLen += usRegCount * 2;
     a4e:	00 0f       	add	r16, r16
     a50:	11 1f       	adc	r17, r17
     a52:	88 81       	ld	r24, Y
     a54:	99 81       	ldd	r25, Y+1	; 0x01
     a56:	08 0f       	add	r16, r24
     a58:	19 1f       	adc	r17, r25
     a5a:	19 83       	std	Y+1, r17	; 0x01
     a5c:	08 83       	st	Y, r16
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <eMBFuncReadHoldingRegister+0x86>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <eMBFuncReadHoldingRegister+0x86>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     a66:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	08 95       	ret

00000a72 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
     a82:	fb 01       	movw	r30, r22
     a84:	20 81       	ld	r18, Z
     a86:	31 81       	ldd	r19, Z+1	; 0x01
     a88:	2a 30       	cpi	r18, 0x0A	; 10
     a8a:	31 05       	cpc	r19, r1
     a8c:	08 f4       	brcc	.+2      	; 0xa90 <eMBFuncReadWriteMultipleHoldingRegister+0x1e>
     a8e:	66 c0       	rjmp	.+204    	; 0xb5c <eMBFuncReadWriteMultipleHoldingRegister+0xea>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
     a90:	fc 01       	movw	r30, r24
     a92:	c3 81       	ldd	r28, Z+3	; 0x03
     a94:	d0 e0       	ldi	r29, 0x00	; 0
     a96:	dc 2f       	mov	r29, r28
     a98:	cc 27       	eor	r28, r28
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
     a9a:	24 81       	ldd	r18, Z+4	; 0x04
     a9c:	c2 2b       	or	r28, r18
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
     a9e:	9e 01       	movw	r18, r28
     aa0:	21 50       	subi	r18, 0x01	; 1
     aa2:	31 09       	sbc	r19, r1
     aa4:	2d 37       	cpi	r18, 0x7D	; 125
     aa6:	31 05       	cpc	r19, r1
     aa8:	08 f0       	brcs	.+2      	; 0xaac <eMBFuncReadWriteMultipleHoldingRegister+0x3a>
     aaa:	5a c0       	rjmp	.+180    	; 0xb60 <eMBFuncReadWriteMultipleHoldingRegister+0xee>

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
     aac:	47 81       	ldd	r20, Z+7	; 0x07
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	54 2f       	mov	r21, r20
     ab2:	44 27       	eor	r20, r20
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
     ab4:	20 85       	ldd	r18, Z+8	; 0x08
     ab6:	42 2b       	or	r20, r18

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
     ab8:	9a 01       	movw	r18, r20
     aba:	21 50       	subi	r18, 0x01	; 1
     abc:	31 09       	sbc	r19, r1
     abe:	29 37       	cpi	r18, 0x79	; 121
     ac0:	31 05       	cpc	r19, r1
     ac2:	08 f0       	brcs	.+2      	; 0xac6 <eMBFuncReadWriteMultipleHoldingRegister+0x54>
     ac4:	4f c0       	rjmp	.+158    	; 0xb64 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
     ac6:	21 85       	ldd	r18, Z+9	; 0x09
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	fa 01       	movw	r30, r20
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	e2 17       	cp	r30, r18
     ad2:	f3 07       	cpc	r31, r19
     ad4:	09 f0       	breq	.+2      	; 0xad8 <eMBFuncReadWriteMultipleHoldingRegister+0x66>
     ad6:	48 c0       	rjmp	.+144    	; 0xb68 <eMBFuncReadWriteMultipleHoldingRegister+0xf6>
     ad8:	8b 01       	movw	r16, r22
     ada:	7c 01       	movw	r14, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
     adc:	fc 01       	movw	r30, r24
     ade:	c1 80       	ldd	r12, Z+1	; 0x01
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
     ae0:	d2 80       	ldd	r13, Z+2	; 0x02
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
     ae2:	65 81       	ldd	r22, Z+5	; 0x05
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	76 2f       	mov	r23, r22
     ae8:	66 27       	eor	r22, r22
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
     aea:	86 81       	ldd	r24, Z+6	; 0x06
     aec:	68 2b       	or	r22, r24
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
     aee:	6f 5f       	subi	r22, 0xFF	; 255
     af0:	7f 4f       	sbci	r23, 0xFF	; 255
     af2:	21 e0       	ldi	r18, 0x01	; 1
     af4:	c7 01       	movw	r24, r14
     af6:	0a 96       	adiw	r24, 0x0a	; 10
     af8:	0e 94 b4 00 	call	0x168	; 0x168 <eMBRegHoldingCB>
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
     afc:	81 11       	cpse	r24, r1
     afe:	36 c0       	rjmp	.+108    	; 0xb6c <eMBFuncReadWriteMultipleHoldingRegister+0xfa>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
     b00:	f8 01       	movw	r30, r16
     b02:	11 82       	std	Z+1, r1	; 0x01
     b04:	10 82       	st	Z, r1

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
     b06:	87 e1       	ldi	r24, 0x17	; 23
     b08:	f7 01       	movw	r30, r14
     b0a:	80 83       	st	Z, r24
                *usLen += 1;
     b0c:	f8 01       	movw	r30, r16
     b0e:	80 81       	ld	r24, Z
     b10:	91 81       	ldd	r25, Z+1	; 0x01
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	91 83       	std	Z+1, r25	; 0x01
     b16:	80 83       	st	Z, r24

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
     b18:	8c 2f       	mov	r24, r28
     b1a:	88 0f       	add	r24, r24
     b1c:	f7 01       	movw	r30, r14
     b1e:	81 83       	std	Z+1, r24	; 0x01
                *usLen += 1;
     b20:	f8 01       	movw	r30, r16
     b22:	80 81       	ld	r24, Z
     b24:	91 81       	ldd	r25, Z+1	; 0x01
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	91 83       	std	Z+1, r25	; 0x01
     b2a:	80 83       	st	Z, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
     b2c:	6d 2d       	mov	r22, r13
     b2e:	70 e0       	ldi	r23, 0x00	; 0
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
     b30:	7c 29       	or	r23, r12
                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;

                /* Make the read callback. */
                eRegStatus =
     b32:	6f 5f       	subi	r22, 0xFF	; 255
     b34:	7f 4f       	sbci	r23, 0xFF	; 255
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	ae 01       	movw	r20, r28
     b3a:	c7 01       	movw	r24, r14
     b3c:	02 96       	adiw	r24, 0x02	; 2
     b3e:	0e 94 b4 00 	call	0x168	; 0x168 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
     b42:	81 11       	cpse	r24, r1
     b44:	13 c0       	rjmp	.+38     	; 0xb6c <eMBFuncReadWriteMultipleHoldingRegister+0xfa>
                {
                    *usLen += 2 * usRegReadCount;
     b46:	cc 0f       	add	r28, r28
     b48:	dd 1f       	adc	r29, r29
     b4a:	f8 01       	movw	r30, r16
     b4c:	80 81       	ld	r24, Z
     b4e:	91 81       	ldd	r25, Z+1	; 0x01
     b50:	8c 0f       	add	r24, r28
     b52:	9d 1f       	adc	r25, r29
     b54:	91 83       	std	Z+1, r25	; 0x01
     b56:	80 83       	st	Z, r24
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	0a c0       	rjmp	.+20     	; 0xb70 <eMBFuncReadWriteMultipleHoldingRegister+0xfe>
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	08 c0       	rjmp	.+16     	; 0xb70 <eMBFuncReadWriteMultipleHoldingRegister+0xfe>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	06 c0       	rjmp	.+12     	; 0xb70 <eMBFuncReadWriteMultipleHoldingRegister+0xfe>
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	04 c0       	rjmp	.+8      	; 0xb70 <eMBFuncReadWriteMultipleHoldingRegister+0xfe>
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <eMBFuncReadWriteMultipleHoldingRegister+0xfe>
                    *usLen += 2 * usRegReadCount;
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
     b6c:	0e 94 50 06 	call	0xca0	; 0xca0 <prveMBError2Exception>
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
        }
    }
    return eStatus;
}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	df 90       	pop	r13
     b7e:	cf 90       	pop	r12
     b80:	08 95       	ret

00000b82 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     b8a:	fb 01       	movw	r30, r22
     b8c:	20 81       	ld	r18, Z
     b8e:	31 81       	ldd	r19, Z+1	; 0x01
     b90:	25 30       	cpi	r18, 0x05	; 5
     b92:	31 05       	cpc	r19, r1
     b94:	c9 f5       	brne	.+114    	; 0xc08 <eMBFuncReadInputRegister+0x86>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
     b96:	fc 01       	movw	r30, r24
     b98:	03 81       	ldd	r16, Z+3	; 0x03
     b9a:	10 e0       	ldi	r17, 0x00	; 0
     b9c:	10 2f       	mov	r17, r16
     b9e:	00 27       	eor	r16, r16
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
     ba0:	24 81       	ldd	r18, Z+4	; 0x04
     ba2:	02 2b       	or	r16, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
     ba4:	98 01       	movw	r18, r16
     ba6:	21 50       	subi	r18, 0x01	; 1
     ba8:	31 09       	sbc	r19, r1
     baa:	2c 37       	cpi	r18, 0x7C	; 124
     bac:	31 05       	cpc	r19, r1
     bae:	70 f5       	brcc	.+92     	; 0xc0c <eMBFuncReadInputRegister+0x8a>
     bb0:	eb 01       	movw	r28, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     bb2:	21 81       	ldd	r18, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     bb4:	62 81       	ldd	r22, Z+2	; 0x02
        if( ( usRegCount >= 1 )
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     bb6:	19 82       	std	Y+1, r1	; 0x01
     bb8:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
     bba:	84 e0       	ldi	r24, 0x04	; 4
     bbc:	80 83       	st	Z, r24
            *usLen += 1;
     bbe:	88 81       	ld	r24, Y
     bc0:	99 81       	ldd	r25, Y+1	; 0x01
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	99 83       	std	Y+1, r25	; 0x01
     bc6:	88 83       	st	Y, r24

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
     bc8:	80 2f       	mov	r24, r16
     bca:	88 0f       	add	r24, r24
     bcc:	81 83       	std	Z+1, r24	; 0x01
            *usLen += 1;
     bce:	88 81       	ld	r24, Y
     bd0:	99 81       	ldd	r25, Y+1	; 0x01
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	99 83       	std	Y+1, r25	; 0x01
     bd6:	88 83       	st	Y, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     bd8:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     bda:	72 2b       	or	r23, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;

            eRegStatus =
     bdc:	6f 5f       	subi	r22, 0xFF	; 255
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	a8 01       	movw	r20, r16
     be2:	cf 01       	movw	r24, r30
     be4:	02 96       	adiw	r24, 0x02	; 2
     be6:	0e 94 95 00 	call	0x12a	; 0x12a <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     bea:	88 23       	and	r24, r24
     bec:	19 f0       	breq	.+6      	; 0xbf4 <eMBFuncReadInputRegister+0x72>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     bee:	0e 94 50 06 	call	0xca0	; 0xca0 <prveMBError2Exception>
     bf2:	0d c0       	rjmp	.+26     	; 0xc0e <eMBFuncReadInputRegister+0x8c>
            }
            else
            {
                *usLen += usRegCount * 2;
     bf4:	00 0f       	add	r16, r16
     bf6:	11 1f       	adc	r17, r17
     bf8:	88 81       	ld	r24, Y
     bfa:	99 81       	ldd	r25, Y+1	; 0x01
     bfc:	08 0f       	add	r16, r24
     bfe:	19 1f       	adc	r17, r25
     c00:	19 83       	std	Y+1, r17	; 0x01
     c02:	08 83       	st	Y, r16
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <eMBFuncReadInputRegister+0x8c>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     c08:	83 e0       	ldi	r24, 0x03	; 3
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <eMBFuncReadInputRegister+0x8c>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     c0c:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	08 95       	ret

00000c18 <eMBSetSlaveID>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
    eMBErrorCode    eStatus = MB_ENOERR;

    /* the first byte and second byte in the buffer is reserved for
     * the parameter ucSlaveID and the running flag. The rest of
     * the buffer is available for additional data. */
    if( usAdditionalLen + 2 < MB_FUNC_OTHER_REP_SLAVEID_BUF )
     c1c:	e9 01       	movw	r28, r18
     c1e:	22 96       	adiw	r28, 0x02	; 2
     c20:	c0 32       	cpi	r28, 0x20	; 32
     c22:	d1 05       	cpc	r29, r1
     c24:	f0 f4       	brcc	.+60     	; 0xc62 <eMBSetSlaveID+0x4a>
    {
        usMBSlaveIDLen = 0;
        ucMBSlaveID[usMBSlaveIDLen++] = ucSlaveID;
     c26:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <ucMBSlaveID>
        ucMBSlaveID[usMBSlaveIDLen++] = ( UCHAR )( xIsRunning ? 0xFF : 0x00 );
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <usMBSlaveIDLen+0x1>
     c32:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <usMBSlaveIDLen>
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	61 11       	cpse	r22, r1
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <eMBSetSlaveID+0x26>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	81 95       	neg	r24
     c40:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <ucMBSlaveID+0x1>
        if( usAdditionalLen > 0 )
     c44:	21 15       	cp	r18, r1
     c46:	31 05       	cpc	r19, r1
     c48:	71 f0       	breq	.+28     	; 0xc66 <eMBSetSlaveID+0x4e>
     c4a:	ba 01       	movw	r22, r20
        {
            memcpy( &ucMBSlaveID[usMBSlaveIDLen], pucAdditional,
     c4c:	a9 01       	movw	r20, r18
     c4e:	8c ec       	ldi	r24, 0xCC	; 204
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <memcpy>
                    ( size_t )usAdditionalLen );
            usMBSlaveIDLen += usAdditionalLen;
     c56:	d0 93 c9 01 	sts	0x01C9, r29	; 0x8001c9 <usMBSlaveIDLen+0x1>
     c5a:	c0 93 c8 01 	sts	0x01C8, r28	; 0x8001c8 <usMBSlaveIDLen>

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	03 c0       	rjmp	.+6      	; 0xc68 <eMBSetSlaveID+0x50>
            usMBSlaveIDLen += usAdditionalLen;
        }
    }
    else
    {
        eStatus = MB_ENORES;
     c62:	84 e0       	ldi	r24, 0x04	; 4
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <eMBSetSlaveID+0x50>

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     c66:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_ENORES;
    }
    return eStatus;
}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <eMBFuncReportSlaveID>:

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	8b 01       	movw	r16, r22
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
     c78:	c0 91 c8 01 	lds	r28, 0x01C8	; 0x8001c8 <usMBSlaveIDLen>
     c7c:	d0 91 c9 01 	lds	r29, 0x01C9	; 0x8001c9 <usMBSlaveIDLen+0x1>
     c80:	ae 01       	movw	r20, r28
     c82:	6a ec       	ldi	r22, 0xCA	; 202
     c84:	71 e0       	ldi	r23, 0x01	; 1
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
     c8c:	21 96       	adiw	r28, 0x01	; 1
     c8e:	f8 01       	movw	r30, r16
     c90:	d1 83       	std	Z+1, r29	; 0x01
     c92:	c0 83       	st	Z, r28
    return MB_EX_NONE;
}
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	08 95       	ret

00000ca0 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	21 f0       	breq	.+8      	; 0xcac <prveMBError2Exception+0xc>
     ca4:	48 f0       	brcs	.+18     	; 0xcb8 <prveMBError2Exception+0x18>
     ca6:	87 30       	cpi	r24, 0x07	; 7
     ca8:	19 f0       	breq	.+6      	; 0xcb0 <prveMBError2Exception+0x10>
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <prveMBError2Exception+0x14>
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
            break;

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	08 95       	ret
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
     cb0:	86 e0       	ldi	r24, 0x06	; 6
            break;
     cb2:	08 95       	ret

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
     cb4:	84 e0       	ldi	r24, 0x04	; 4
            break;
     cb6:	08 95       	ret
    eMBException    eStatus;

    switch ( eErrorCode )
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
     cb8:	80 e0       	ldi	r24, 0x00	; 0
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
     cba:	08 95       	ret

00000cbc <eMBInit>:
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	9f ef       	ldi	r25, 0xFF	; 255
     ccc:	96 0f       	add	r25, r22
     cce:	97 3f       	cpi	r25, 0xF7	; 247
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <eMBInit+0x18>
     cd2:	4b c0       	rjmp	.+150    	; 0xd6a <eMBInit+0xae>
     cd4:	5e 2d       	mov	r21, r14
     cd6:	68 01       	movw	r12, r16
     cd8:	79 01       	movw	r14, r18
     cda:	74 2f       	mov	r23, r20
     cdc:	96 2f       	mov	r25, r22
     cde:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <_ZL11ucMBAddress>
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	b9 f5       	brne	.+110    	; 0xd54 <eMBInit+0x98>
     ce6:	28 e6       	ldi	r18, 0x68	; 104
     ce8:	31 e0       	ldi	r19, 0x01	; 1
     cea:	30 93 fe 01 	sts	0x01FE, r19	; 0x8001fe <_ZL17pvMBFrameStartCur+0x1>
     cee:	20 93 fd 01 	sts	0x01FD, r18	; 0x8001fd <_ZL17pvMBFrameStartCur>
     cf2:	24 e7       	ldi	r18, 0x74	; 116
     cf4:	31 e0       	ldi	r19, 0x01	; 1
     cf6:	30 93 fc 01 	sts	0x01FC, r19	; 0x8001fc <_ZL16pvMBFrameStopCur+0x1>
     cfa:	20 93 fb 01 	sts	0x01FB, r18	; 0x8001fb <_ZL16pvMBFrameStopCur>
     cfe:	23 eb       	ldi	r18, 0xB3	; 179
     d00:	31 e0       	ldi	r19, 0x01	; 1
     d02:	30 93 00 02 	sts	0x0200, r19	; 0x800200 <_ZL16peMBFrameSendCur+0x1>
     d06:	20 93 ff 01 	sts	0x01FF, r18	; 0x8001ff <_ZL16peMBFrameSendCur>
     d0a:	2d e7       	ldi	r18, 0x7D	; 125
     d0c:	31 e0       	ldi	r19, 0x01	; 1
     d0e:	30 93 fa 01 	sts	0x01FA, r19	; 0x8001fa <_ZL19peMBFrameReceiveCur+0x1>
     d12:	20 93 f9 01 	sts	0x01F9, r18	; 0x8001f9 <_ZL19peMBFrameReceiveCur>
     d16:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <_ZL17pvMBFrameCloseCur+0x1>
     d1a:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <_ZL17pvMBFrameCloseCur>
     d1e:	2d ef       	ldi	r18, 0xFD	; 253
     d20:	31 e0       	ldi	r19, 0x01	; 1
     d22:	30 93 f6 01 	sts	0x01F6, r19	; 0x8001f6 <pxMBFrameCBByteReceived+0x1>
     d26:	20 93 f5 01 	sts	0x01F5, r18	; 0x8001f5 <pxMBFrameCBByteReceived>
     d2a:	22 ea       	ldi	r18, 0xA2	; 162
     d2c:	32 e0       	ldi	r19, 0x02	; 2
     d2e:	30 93 f4 01 	sts	0x01F4, r19	; 0x8001f4 <pxMBFrameCBTransmitterEmpty+0x1>
     d32:	20 93 f3 01 	sts	0x01F3, r18	; 0x8001f3 <pxMBFrameCBTransmitterEmpty>
     d36:	29 e3       	ldi	r18, 0x39	; 57
     d38:	33 e0       	ldi	r19, 0x03	; 3
     d3a:	30 93 f2 01 	sts	0x01F2, r19	; 0x8001f2 <pxMBPortCBTimerExpired+0x1>
     d3e:	20 93 f1 01 	sts	0x01F1, r18	; 0x8001f1 <pxMBPortCBTimerExpired>
     d42:	05 2f       	mov	r16, r21
     d44:	a7 01       	movw	r20, r14
     d46:	96 01       	movw	r18, r12
     d48:	67 2f       	mov	r22, r23
     d4a:	89 2f       	mov	r24, r25
     d4c:	0e 94 4d 01 	call	0x29a	; 0x29a <eMBASCIIInit>
     d50:	c8 2f       	mov	r28, r24
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <eMBInit+0x9a>
     d54:	c2 e0       	ldi	r28, 0x02	; 2
     d56:	c1 11       	cpse	r28, r1
     d58:	0b c0       	rjmp	.+22     	; 0xd70 <eMBInit+0xb4>
     d5a:	0e 94 84 07 	call	0xf08	; 0xf08 <xMBPortEventInit>
     d5e:	88 23       	and	r24, r24
     d60:	31 f0       	breq	.+12     	; 0xd6e <eMBInit+0xb2>
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_ZL8eMBState>
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <eMBInit+0xb4>
     d6a:	c2 e0       	ldi	r28, 0x02	; 2
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <eMBInit+0xb4>
     d6e:	c3 e0       	ldi	r28, 0x03	; 3
     d70:	8c 2f       	mov	r24, r28
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	08 95       	ret

00000d82 <eMBEnable>:
     d82:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_ZL8eMBState>
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	49 f4       	brne	.+18     	; 0xd9c <eMBEnable+0x1a>
     d8a:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <_ZL17pvMBFrameStartCur>
     d8e:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <_ZL17pvMBFrameStartCur+0x1>
     d92:	09 95       	icall
     d94:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_ZL8eMBState>
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	08 95       	ret
     d9c:	86 e0       	ldi	r24, 0x06	; 6
     d9e:	08 95       	ret

00000da0 <eMBPoll>:

eMBErrorCode
eMBPoll( void )
{
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	1f 92       	push	r1
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
     daa:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_ZL8eMBState>
     dae:	81 11       	cpse	r24, r1
     db0:	99 c0       	rjmp	.+306    	; 0xee4 <eMBPoll+0x144>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <xMBPortEventGet>
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <eMBPoll+0x20>
     dbe:	94 c0       	rjmp	.+296    	; 0xee8 <eMBPoll+0x148>
    {
        switch ( eEvent )
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	19 f0       	breq	.+6      	; 0xdcc <eMBPoll+0x2c>
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	d9 f0       	breq	.+54     	; 0xe00 <eMBPoll+0x60>
     dca:	90 c0       	rjmp	.+288    	; 0xeec <eMBPoll+0x14c>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
     dcc:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <_ZL19peMBFrameReceiveCur>
     dd0:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <_ZL19peMBFrameReceiveCur+0x1>
     dd4:	4c ee       	ldi	r20, 0xEC	; 236
     dd6:	51 e0       	ldi	r21, 0x01	; 1
     dd8:	6e ee       	ldi	r22, 0xEE	; 238
     dda:	71 e0       	ldi	r23, 0x01	; 1
     ddc:	80 ef       	ldi	r24, 0xF0	; 240
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	09 95       	icall
            if( eStatus == MB_ENOERR )
     de2:	81 11       	cpse	r24, r1
     de4:	85 c0       	rjmp	.+266    	; 0xef0 <eMBPoll+0x150>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
     de6:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZZ7eMBPollE12ucRcvAddress>
     dea:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZL11ucMBAddress>
     dee:	89 17       	cp	r24, r25
     df0:	11 f0       	breq	.+4      	; 0xdf6 <eMBPoll+0x56>
     df2:	81 11       	cpse	r24, r1
     df4:	7f c0       	rjmp	.+254    	; 0xef4 <eMBPoll+0x154>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	0e 94 88 07 	call	0xf10	; 0xf10 <xMBPortEventPost>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	80 c0       	rjmp	.+256    	; 0xf00 <eMBPoll+0x160>
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
     e00:	a0 91 ee 01 	lds	r26, 0x01EE	; 0x8001ee <_ZZ7eMBPollE9ucMBFrame>
     e04:	b0 91 ef 01 	lds	r27, 0x01EF	; 0x8001ef <_ZZ7eMBPollE9ucMBFrame+0x1>
     e08:	4c 91       	ld	r20, X
     e0a:	40 93 eb 01 	sts	0x01EB, r20	; 0x8001eb <_ZZ7eMBPollE14ucFunctionCode>
            eException = MB_EX_ILLEGAL_FUNCTION;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <_ZZ7eMBPollE10eException>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
     e14:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     e18:	99 23       	and	r25, r25
     e1a:	09 f4       	brne	.+2      	; 0xe1e <eMBPoll+0x7e>
     e1c:	6d c0       	rjmp	.+218    	; 0xef8 <eMBPoll+0x158>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
     e1e:	49 17       	cp	r20, r25
     e20:	59 f0       	breq	.+22     	; 0xe38 <eMBPoll+0x98>
     e22:	e3 e0       	ldi	r30, 0x03	; 3
     e24:	f1 e0       	ldi	r31, 0x01	; 1
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     e26:	21 e0       	ldi	r18, 0x01	; 1
     e28:	30 e0       	ldi	r19, 0x00	; 0
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
     e2a:	90 81       	ld	r25, Z
     e2c:	99 23       	and	r25, r25
     e2e:	09 f4       	brne	.+2      	; 0xe32 <eMBPoll+0x92>
     e30:	63 c0       	rjmp	.+198    	; 0xef8 <eMBPoll+0x158>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
     e32:	49 13       	cpse	r20, r25
     e34:	1a c0       	rjmp	.+52     	; 0xe6a <eMBPoll+0xca>
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <eMBPoll+0x9c>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
     e3c:	f9 01       	movw	r30, r18
     e3e:	ee 0f       	add	r30, r30
     e40:	ff 1f       	adc	r31, r31
     e42:	2e 0f       	add	r18, r30
     e44:	3f 1f       	adc	r19, r31
     e46:	f9 01       	movw	r30, r18
     e48:	e0 50       	subi	r30, 0x00	; 0
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	01 80       	ldd	r0, Z+1	; 0x01
     e4e:	f2 81       	ldd	r31, Z+2	; 0x02
     e50:	e0 2d       	mov	r30, r0
     e52:	6c ee       	ldi	r22, 0xEC	; 236
     e54:	71 e0       	ldi	r23, 0x01	; 1
     e56:	cd 01       	movw	r24, r26
     e58:	09 95       	icall
     e5a:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <_ZZ7eMBPollE10eException>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
     e5e:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <_ZZ7eMBPollE12ucRcvAddress>
     e62:	91 11       	cpse	r25, r1
     e64:	09 c0       	rjmp	.+18     	; 0xe78 <eMBPoll+0xd8>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	4b c0       	rjmp	.+150    	; 0xf00 <eMBPoll+0x160>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     e6a:	2f 5f       	subi	r18, 0xFF	; 255
     e6c:	3f 4f       	sbci	r19, 0xFF	; 255
     e6e:	33 96       	adiw	r30, 0x03	; 3
     e70:	20 31       	cpi	r18, 0x10	; 16
     e72:	31 05       	cpc	r19, r1
     e74:	d1 f6       	brne	.-76     	; 0xe2a <eMBPoll+0x8a>
     e76:	40 c0       	rjmp	.+128    	; 0xef8 <eMBPoll+0x158>

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
            {
                if( eException != MB_EX_NONE )
     e78:	88 23       	and	r24, r24
     e7a:	19 f1       	breq	.+70     	; 0xec2 <eMBPoll+0x122>
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <eMBPoll+0xe0>
     e7e:	81 e0       	ldi	r24, 0x01	; 1
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
     e80:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <_ZZ7eMBPollE9ucMBFrame>
     e84:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <_ZZ7eMBPollE9ucMBFrame+0x1>
     e88:	21 e0       	ldi	r18, 0x01	; 1
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	30 93 ed 01 	sts	0x01ED, r19	; 0x8001ed <_ZZ7eMBPollE8usLength+0x1>
     e90:	20 93 ec 01 	sts	0x01EC, r18	; 0x8001ec <_ZZ7eMBPollE8usLength>
     e94:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <_ZZ7eMBPollE14ucFunctionCode>
     e98:	90 68       	ori	r25, 0x80	; 128
     e9a:	90 83       	st	Z, r25
                    ucMBFrame[usLength++] = eException;
     e9c:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <_ZZ7eMBPollE9ucMBFrame>
     ea0:	50 91 ef 01 	lds	r21, 0x01EF	; 0x8001ef <_ZZ7eMBPollE9ucMBFrame+0x1>
     ea4:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <_ZZ7eMBPollE8usLength>
     ea8:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <_ZZ7eMBPollE8usLength+0x1>
     eac:	b9 01       	movw	r22, r18
     eae:	6f 5f       	subi	r22, 0xFF	; 255
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	70 93 ed 01 	sts	0x01ED, r23	; 0x8001ed <_ZZ7eMBPollE8usLength+0x1>
     eb6:	60 93 ec 01 	sts	0x01EC, r22	; 0x8001ec <_ZZ7eMBPollE8usLength>
     eba:	fa 01       	movw	r30, r20
     ebc:	e2 0f       	add	r30, r18
     ebe:	f3 1f       	adc	r31, r19
     ec0:	80 83       	st	Z, r24
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
     ec2:	40 91 ec 01 	lds	r20, 0x01EC	; 0x8001ec <_ZZ7eMBPollE8usLength>
     ec6:	50 91 ed 01 	lds	r21, 0x01ED	; 0x8001ed <_ZZ7eMBPollE8usLength+0x1>
     eca:	60 91 ee 01 	lds	r22, 0x01EE	; 0x8001ee <_ZZ7eMBPollE9ucMBFrame>
     ece:	70 91 ef 01 	lds	r23, 0x01EF	; 0x8001ef <_ZZ7eMBPollE9ucMBFrame+0x1>
     ed2:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <_ZL16peMBFrameSendCur>
     ed6:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <_ZL16peMBFrameSendCur+0x1>
     eda:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_ZL11ucMBAddress>
     ede:	09 95       	icall

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	0e c0       	rjmp	.+28     	; 0xf00 <eMBPoll+0x160>
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
     ee4:	86 e0       	ldi	r24, 0x06	; 6
     ee6:	0c c0       	rjmp	.+24     	; 0xf00 <eMBPoll+0x160>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <eMBPoll+0x160>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	08 c0       	rjmp	.+16     	; 0xf00 <eMBPoll+0x160>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	06 c0       	rjmp	.+12     	; 0xf00 <eMBPoll+0x160>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	04 c0       	rjmp	.+8      	; 0xf00 <eMBPoll+0x160>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
     ef8:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZZ7eMBPollE12ucRcvAddress>
     efc:	81 11       	cpse	r24, r1
     efe:	bf cf       	rjmp	.-130    	; 0xe7e <eMBPoll+0xde>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
     f00:	0f 90       	pop	r0
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
     f08:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <xEventInQueue>
    return TRUE;
}
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	08 95       	ret

00000f10 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <xEventInQueue>
    eQueuedEvent = eEvent;
     f16:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <eQueuedEvent>
    return TRUE;
}
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	08 95       	ret

00000f1e <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
     f1e:	fc 01       	movw	r30, r24
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
     f20:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <xEventInQueue>
     f24:	99 23       	and	r25, r25
     f26:	39 f0       	breq	.+14     	; 0xf36 <xMBPortEventGet+0x18>
    {
        *eEvent = eQueuedEvent;
     f28:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <eQueuedEvent>
     f2c:	80 83       	st	Z, r24
        xEventInQueue = FALSE;
     f2e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <xEventInQueue>
        xEventHappened = TRUE;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	08 95       	ret
}

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
     f36:	80 e0       	ldi	r24, 0x00	; 0
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
     f38:	08 95       	ret

00000f3a <vMBPortSerialEnable>:

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
#ifdef RTS_ENABLE
    UCSRB |= _BV( TXEN ) | _BV(TXCIE);
     f3a:	e1 ec       	ldi	r30, 0xC1	; 193
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	90 81       	ld	r25, Z
     f40:	98 64       	ori	r25, 0x48	; 72
     f42:	90 83       	st	Z, r25
#else
    UCSRB |= _BV( TXEN );
#endif

    if( xRxEnable )
     f44:	88 23       	and	r24, r24
     f46:	21 f0       	breq	.+8      	; 0xf50 <vMBPortSerialEnable+0x16>
    {
        UCSRB |= _BV( RXEN ) | _BV( RXCIE );
     f48:	80 81       	ld	r24, Z
     f4a:	80 69       	ori	r24, 0x90	; 144
     f4c:	80 83       	st	Z, r24
     f4e:	05 c0       	rjmp	.+10     	; 0xf5a <vMBPortSerialEnable+0x20>
    }
    else
    {
        UCSRB &= ~( _BV( RXEN ) | _BV( RXCIE ) );
     f50:	e1 ec       	ldi	r30, 0xC1	; 193
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	8f 76       	andi	r24, 0x6F	; 111
     f58:	80 83       	st	Z, r24
    }

    if( xTxEnable )
     f5a:	66 23       	and	r22, r22
     f5c:	39 f0       	breq	.+14     	; 0xf6c <vMBPortSerialEnable+0x32>
    {
        UCSRB |= _BV( TXEN ) | _BV( UDRE );
     f5e:	e1 ec       	ldi	r30, 0xC1	; 193
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 62       	ori	r24, 0x28	; 40
     f66:	80 83       	st	Z, r24
#ifdef RTS_ENABLE
        RTS_HIGH;
     f68:	5d 9a       	sbi	0x0b, 5	; 11
     f6a:	08 95       	ret
#endif
    }
    else
    {
        UCSRB &= ~( _BV( UDRE ) );
     f6c:	e1 ec       	ldi	r30, 0xC1	; 193
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8f 7d       	andi	r24, 0xDF	; 223
     f74:	80 83       	st	Z, r24
     f76:	08 95       	ret

00000f78 <xMBPortSerialInit>:
    }
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
     f78:	0f 93       	push	r16
     f7a:	cf 93       	push	r28
     f7c:	c2 2f       	mov	r28, r18
    UCHAR ucUCSRC = 0;

    /* prevent compiler warning. */
    (void)ucPORT;
	
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );
     f7e:	db 01       	movw	r26, r22
     f80:	ca 01       	movw	r24, r20
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	aa 1f       	adc	r26, r26
     f88:	bb 1f       	adc	r27, r27
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	aa 1f       	adc	r26, r26
     f90:	bb 1f       	adc	r27, r27
     f92:	9c 01       	movw	r18, r24
     f94:	ad 01       	movw	r20, r26
     f96:	22 0f       	add	r18, r18
     f98:	33 1f       	adc	r19, r19
     f9a:	44 1f       	adc	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	22 0f       	add	r18, r18
     fa0:	33 1f       	adc	r19, r19
     fa2:	44 1f       	adc	r20, r20
     fa4:	55 1f       	adc	r21, r21
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	74 e2       	ldi	r23, 0x24	; 36
     faa:	84 ef       	ldi	r24, 0xF4	; 244
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 48 0b 	call	0x1690	; 0x1690 <__udivmodsi4>
     fb2:	21 50       	subi	r18, 0x01	; 1
     fb4:	31 09       	sbc	r19, r1
     fb6:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     fba:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

    switch ( eParity )
     fbe:	01 30       	cpi	r16, 0x01	; 1
     fc0:	21 f0       	breq	.+8      	; 0xfca <xMBPortSerialInit+0x52>
     fc2:	02 30       	cpi	r16, 0x02	; 2
     fc4:	21 f4       	brne	.+8      	; 0xfce <xMBPortSerialInit+0x56>
    {
        case MB_PAR_EVEN:
            ucUCSRC |= _BV( UPM1 );
     fc6:	90 e2       	ldi	r25, 0x20	; 32
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <xMBPortSerialInit+0x58>
            break;
        case MB_PAR_ODD:
            ucUCSRC |= _BV( UPM1 ) | _BV( UPM0 );
     fca:	90 e3       	ldi	r25, 0x30	; 48
            break;
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <xMBPortSerialInit+0x58>
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
    UCHAR ucUCSRC = 0;
     fce:	90 e0       	ldi	r25, 0x00	; 0
            break;
        case MB_PAR_NONE:
            break;
    }

    switch ( ucDataBits )
     fd0:	c7 30       	cpi	r28, 0x07	; 7
     fd2:	21 f0       	breq	.+8      	; 0xfdc <xMBPortSerialInit+0x64>
     fd4:	c8 30       	cpi	r28, 0x08	; 8
     fd6:	19 f4       	brne	.+6      	; 0xfde <xMBPortSerialInit+0x66>
    {
        case 8:
            ucUCSRC |= _BV( UCSZ0 ) | _BV( UCSZ1 );
     fd8:	96 60       	ori	r25, 0x06	; 6
            break;
     fda:	01 c0       	rjmp	.+2      	; 0xfde <xMBPortSerialInit+0x66>
        case 7:
            ucUCSRC |= _BV( UCSZ1 );
     fdc:	94 60       	ori	r25, 0x04	; 4
            break;
    }

#if defined (__AVR_ATmega168__) | defined (__AVR_ATmega328__) | defined (__AVR_ATmega328P__)
    UCSRC |= ucUCSRC;
     fde:	e2 ec       	ldi	r30, 0xC2	; 194
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	89 2b       	or	r24, r25
     fe6:	80 83       	st	Z, r24
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega128__)
    UCSRC |= ucUCSRC;
#endif

    vMBPortSerialEnable( FALSE, FALSE );
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	0e 94 9d 07 	call	0xf3a	; 0xf3a <vMBPortSerialEnable>


#ifdef RTS_ENABLE
    RTS_INIT;
     ff0:	55 9a       	sbi	0x0a, 5	; 10
     ff2:	5d 98       	cbi	0x0b, 5	; 11
	
#endif
    return TRUE;
}
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	cf 91       	pop	r28
     ff8:	0f 91       	pop	r16
     ffa:	08 95       	ret

00000ffc <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
    UDR = ucByte;
     ffc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    return TRUE;
}
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	08 95       	ret

00001004 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
    *pucByte = UDR;
    1004:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1008:	fc 01       	movw	r30, r24
    100a:	20 83       	st	Z, r18
    return TRUE;
}
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	08 95       	ret

00001010 <__vector_19>:
ISR( USART0_UDRE_vect )
#else
#error "Part Not Supported"
#endif
/*SIGNAL( SIG_USART_DATA )*/
{
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    pxMBFrameCBTransmitterEmpty(  );
    1032:	e0 91 f3 01 	lds	r30, 0x01F3	; 0x8001f3 <pxMBFrameCBTransmitterEmpty>
    1036:	f0 91 f4 01 	lds	r31, 0x01F4	; 0x8001f4 <pxMBFrameCBTransmitterEmpty+0x1>
    103a:	09 95       	icall
}
    103c:	ff 91       	pop	r31
    103e:	ef 91       	pop	r30
    1040:	bf 91       	pop	r27
    1042:	af 91       	pop	r26
    1044:	9f 91       	pop	r25
    1046:	8f 91       	pop	r24
    1048:	7f 91       	pop	r23
    104a:	6f 91       	pop	r22
    104c:	5f 91       	pop	r21
    104e:	4f 91       	pop	r20
    1050:	3f 91       	pop	r19
    1052:	2f 91       	pop	r18
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <__vector_18>:
ISR( USART0_RX_vect )
#else
#error "Part Not Supported"
#endif
/*SIGNAL( SIG_USART_RECV )*/
{
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	2f 93       	push	r18
    106a:	3f 93       	push	r19
    106c:	4f 93       	push	r20
    106e:	5f 93       	push	r21
    1070:	6f 93       	push	r22
    1072:	7f 93       	push	r23
    1074:	8f 93       	push	r24
    1076:	9f 93       	push	r25
    1078:	af 93       	push	r26
    107a:	bf 93       	push	r27
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
    pxMBFrameCBByteReceived(  );
    1080:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <pxMBFrameCBByteReceived>
    1084:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <pxMBFrameCBByteReceived+0x1>
    1088:	09 95       	icall
}
    108a:	ff 91       	pop	r31
    108c:	ef 91       	pop	r30
    108e:	bf 91       	pop	r27
    1090:	af 91       	pop	r26
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	7f 91       	pop	r23
    1098:	6f 91       	pop	r22
    109a:	5f 91       	pop	r21
    109c:	4f 91       	pop	r20
    109e:	3f 91       	pop	r19
    10a0:	2f 91       	pop	r18
    10a2:	0f 90       	pop	r0
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	0f 90       	pop	r0
    10a8:	1f 90       	pop	r1
    10aa:	18 95       	reti

000010ac <__vector_20>:
ISR( USART0_TX_vect )
#else
#error "Part Not Supported"
#endif
/*SIGNAL( SIG_UART_TRANS )*/
{
    10ac:	1f 92       	push	r1
    10ae:	0f 92       	push	r0
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	0f 92       	push	r0
    10b4:	11 24       	eor	r1, r1
    RTS_LOW;
    10b6:	5d 98       	cbi	0x0b, 5	; 11
}
    10b8:	0f 90       	pop	r0
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	0f 90       	pop	r0
    10be:	1f 90       	pop	r1
    10c0:	18 95       	reti

000010c2 <xMBPortTimersInit>:
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );
    10c2:	9c 01       	movw	r18, r24
    10c4:	a9 e0       	ldi	r26, 0x09	; 9
    10c6:	bd e3       	ldi	r27, 0x3D	; 61
    10c8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__umulhisi3>
    10cc:	20 e2       	ldi	r18, 0x20	; 32
    10ce:	3e e4       	ldi	r19, 0x4E	; 78
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	0e 94 48 0b 	call	0x1690	; 0x1690 <__udivmodsi4>

    usTimerOCRDeltaHi = usTimerOCRADelta >> 8;
    10d8:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <usTimerOCRDeltaHi>
    usTimerOCRDeltaLo = usTimerOCRADelta & 0xFF;
    10dc:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <usTimerOCRDeltaLo>
    //TCCR1B = 0x00;
    //TCCR1C = 0x00;
#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
    TCCR2A = 0;
    10e0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    TCCR2B = 0;
    10e4:	e1 eb       	ldi	r30, 0xB1	; 177
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	10 82       	st	Z, r1
//    TIFR1 |= _BV( OCF1A ) ;

#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
	TCCR2B &= ~(_BV( CS22 ) | _BV( CS21 ) | _BV( CS20 ));
    10ea:	80 81       	ld	r24, Z
    10ec:	88 7f       	andi	r24, 0xF8	; 248
    10ee:	80 83       	st	Z, r24
	TIMSK2 &= ~( _BV( OCIE2A ) | _BV( TOIE2 ));
    10f0:	e0 e7       	ldi	r30, 0x70	; 112
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	8c 7f       	andi	r24, 0xFC	; 252
    10f8:	80 83       	st	Z, r24
	TIFR2 |= _BV( OCF2A ) | _BV( TOV2 );
    10fa:	87 b3       	in	r24, 0x17	; 23
    10fc:	83 60       	ori	r24, 0x03	; 3
    10fe:	87 bb       	out	0x17, r24	; 23
#endif

    vMBPortTimersDisable(  );

    return TRUE;
}
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	08 95       	ret

00001104 <vMBPortTimersEnable>:
inline void
vMBPortTimersEnable(  )
{

    //TCNT1 = 0x0000;
	TCNT2_Hi = 0;
    1104:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <TCNT2_Hi>
	TCNT2 = 0;
    1108:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
//    {
//        TIMSK1 |= _BV( OCIE1A );
//        OCR1A = usTimerOCRADelta;
//    }

	if (usTimerOCRDeltaHi > 0)
    110c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <usTimerOCRDeltaHi>
    1110:	88 23       	and	r24, r24
    1112:	89 f0       	breq	.+34     	; 0x1136 <vMBPortTimersEnable+0x32>
	{
		//overflow init
#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
		TIMSK2 |= _BV( TOV2 );
    1114:	e0 e7       	ldi	r30, 0x70	; 112
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	81 60       	ori	r24, 0x01	; 1
    111c:	80 83       	st	Z, r24
		TIMSK2 &= ~_BV( OCIE2A );
    111e:	80 81       	ld	r24, Z
    1120:	8d 7f       	andi	r24, 0xFD	; 253
    1122:	80 83       	st	Z, r24
		OCR2_Hi = usTimerOCRDeltaHi;
    1124:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <usTimerOCRDeltaHi>
    1128:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <OCR2_Hi>
		OCR2A = usTimerOCRDeltaLo;
    112c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <usTimerOCRDeltaLo>
    1130:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <vMBPortTimersEnable+0x5a>
		OCR2_Hi = usTimerOCRDeltaHi;
		OCR2 = usTimerOCRDeltaLo;
#endif

	}
	else if (usTimerOCRDeltaLo > 0)
    1136:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <usTimerOCRDeltaLo>
    113a:	88 23       	and	r24, r24
    113c:	81 f0       	breq	.+32     	; 0x115e <vMBPortTimersEnable+0x5a>
	{
		//only compare
#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
		TIMSK2 |= _BV( OCIE2A );
    113e:	e0 e7       	ldi	r30, 0x70	; 112
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	82 60       	ori	r24, 0x02	; 2
    1146:	80 83       	st	Z, r24
		TIMSK2 &= ~_BV( TOV2 );
    1148:	80 81       	ld	r24, Z
    114a:	8e 7f       	andi	r24, 0xFE	; 254
    114c:	80 83       	st	Z, r24
		OCR2_Hi = usTimerOCRDeltaHi;
    114e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <usTimerOCRDeltaHi>
    1152:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <OCR2_Hi>
		OCR2A = usTimerOCRDeltaLo;
    1156:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <usTimerOCRDeltaLo>
    115a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

//    TCCR1B |= _BV( CS12 ) | _BV( CS10 );
#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
	TCCR2B |= _BV( CS22 ) | _BV( CS21 ) | _BV( CS20 );
    115e:	e1 eb       	ldi	r30, 0xB1	; 177
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	87 60       	ori	r24, 0x07	; 7
    1166:	80 83       	st	Z, r24
    1168:	08 95       	ret

0000116a <vMBPortTimersDisable>:
//    TIFR1 |= _BV( OCF1A ) ;

#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
	TCCR2B &= ~(_BV( CS22 ) | _BV( CS21 ) | _BV( CS20 ));
    116a:	e1 eb       	ldi	r30, 0xB1	; 177
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	88 7f       	andi	r24, 0xF8	; 248
    1172:	80 83       	st	Z, r24
	TIMSK2 &= ~( _BV( OCIE2A ) | _BV( TOIE2 ));
    1174:	e0 e7       	ldi	r30, 0x70	; 112
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8c 7f       	andi	r24, 0xFC	; 252
    117c:	80 83       	st	Z, r24
	TIFR2 |= _BV( OCF2A ) | _BV( TOV2 );
    117e:	87 b3       	in	r24, 0x17	; 23
    1180:	83 60       	ori	r24, 0x03	; 3
    1182:	87 bb       	out	0x17, r24	; 23
    1184:	08 95       	ret

00001186 <__vector_7>:
#elif defined(__AVR_ATmega8__)
ISR( TIMER2_COMP_vect )
#else
#error "Part Not Supported"
#endif
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
    ( void )pxMBPortCBTimerExpired(  );
    11a8:	e0 91 f1 01 	lds	r30, 0x01F1	; 0x8001f1 <pxMBPortCBTimerExpired>
    11ac:	f0 91 f2 01 	lds	r31, 0x01F2	; 0x8001f2 <pxMBPortCBTimerExpired+0x1>
    11b0:	09 95       	icall
}
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <__vector_9>:

ISR( TIMER2_OVF_vect )
{
    11d4:	1f 92       	push	r1
    11d6:	0f 92       	push	r0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	0f 92       	push	r0
    11dc:	11 24       	eor	r1, r1
    11de:	2f 93       	push	r18
    11e0:	3f 93       	push	r19
    11e2:	4f 93       	push	r20
    11e4:	5f 93       	push	r21
    11e6:	6f 93       	push	r22
    11e8:	7f 93       	push	r23
    11ea:	8f 93       	push	r24
    11ec:	9f 93       	push	r25
    11ee:	af 93       	push	r26
    11f0:	bf 93       	push	r27
    11f2:	ef 93       	push	r30
    11f4:	ff 93       	push	r31
	TCNT2_Hi++;
    11f6:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <TCNT2_Hi>
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <TCNT2_Hi>
	if (TCNT2_Hi < OCR2_Hi)
    1200:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <OCR2_Hi>
    1204:	89 17       	cp	r24, r25
    1206:	e0 f0       	brcs	.+56     	; 0x1240 <__vector_9+0x6c>
	{
		//TCNT2_Hi < OCR2_Hi
	}
	else if (TCNT2_Hi == OCR2_Hi)
    1208:	89 13       	cpse	r24, r25
    120a:	15 c0       	rjmp	.+42     	; 0x1236 <__vector_9+0x62>
		//enable ocr2 interrupt
		//disable ovf interrupt
#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
		TIMSK2 |= _BV( OCIE2A );
    120c:	e0 e7       	ldi	r30, 0x70	; 112
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	82 60       	ori	r24, 0x02	; 2
    1214:	80 83       	st	Z, r24
		OCR2A = usTimerOCRDeltaLo;
    1216:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <usTimerOCRDeltaLo>
    121a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		TCCR2B &= ~(_BV( CS22 ) | _BV( CS21 ) | _BV( CS20 ));
    121e:	a1 eb       	ldi	r26, 0xB1	; 177
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	8c 91       	ld	r24, X
    1224:	88 7f       	andi	r24, 0xF8	; 248
    1226:	8c 93       	st	X, r24
		TIMSK2 &= ~_BV( TOIE2 );
    1228:	80 81       	ld	r24, Z
    122a:	8e 7f       	andi	r24, 0xFE	; 254
    122c:	80 83       	st	Z, r24
		TIFR2 |= _BV( OCF2A ) | _BV( TOV2 );
    122e:	87 b3       	in	r24, 0x17	; 23
    1230:	83 60       	ori	r24, 0x03	; 3
    1232:	87 bb       	out	0x17, r24	; 23
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <__vector_9+0x6c>

	}
	else
	{	//TCNT2_Hi > OCR2_Hi
		//for sanity's sake
	    ( void )pxMBPortCBTimerExpired(  );
    1236:	e0 91 f1 01 	lds	r30, 0x01F1	; 0x8001f1 <pxMBPortCBTimerExpired>
    123a:	f0 91 f2 01 	lds	r31, 0x01F2	; 0x8001f2 <pxMBPortCBTimerExpired+0x1>
    123e:	09 95       	icall
	}
}
    1240:	ff 91       	pop	r31
    1242:	ef 91       	pop	r30
    1244:	bf 91       	pop	r27
    1246:	af 91       	pop	r26
    1248:	9f 91       	pop	r25
    124a:	8f 91       	pop	r24
    124c:	7f 91       	pop	r23
    124e:	6f 91       	pop	r22
    1250:	5f 91       	pop	r21
    1252:	4f 91       	pop	r20
    1254:	3f 91       	pop	r19
    1256:	2f 91       	pop	r18
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <_Z13softpwm_writehh>:
volatile uint8_t _swpwm_tgt[16];
volatile uint8_t _swpwm_cnt = 128;
volatile uint8_t _pwm_changed;

void softpwm_write(uint8_t channel, uint8_t pwm){
	if ((channel > 15) || (pwm > 127)) return;
    1262:	80 31       	cpi	r24, 0x10	; 16
    1264:	70 f4       	brcc	.+28     	; 0x1282 <_Z13softpwm_writehh+0x20>
    1266:	66 23       	and	r22, r22
    1268:	64 f0       	brlt	.+24     	; 0x1282 <_Z13softpwm_writehh+0x20>
	_swpwm_nstep[channel] = 0;
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	fc 01       	movw	r30, r24
    126e:	e7 5e       	subi	r30, 0xE7	; 231
    1270:	fd 4f       	sbci	r31, 0xFD	; 253
    1272:	10 82       	st	Z, r1
	__swpwm_dc[channel] = pwm;
    1274:	fc 01       	movw	r30, r24
    1276:	e7 59       	subi	r30, 0x97	; 151
    1278:	fd 4f       	sbci	r31, 0xFD	; 253
    127a:	60 83       	st	Z, r22
	_pwm_changed = 1;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_pwm_changed>
    1282:	08 95       	ret

00001284 <_Z18softpwm_transitionhhj>:
}

int16_t softpwm_transition(uint8_t channel, uint8_t target_pwm, uint16_t ms){
    1284:	af 92       	push	r10
    1286:	bf 92       	push	r11
    1288:	cf 92       	push	r12
    128a:	df 92       	push	r13
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
	if (channel > 15)		return -1;
    1296:	80 31       	cpi	r24, 0x10	; 16
    1298:	08 f0       	brcs	.+2      	; 0x129c <_Z18softpwm_transitionhhj+0x18>
    129a:	8f c0       	rjmp	.+286    	; 0x13ba <_Z18softpwm_transitionhhj+0x136>
	if (target_pwm > 127)	return -2;
    129c:	66 23       	and	r22, r22
    129e:	0c f4       	brge	.+2      	; 0x12a2 <_Z18softpwm_transitionhhj+0x1e>
    12a0:	8f c0       	rjmp	.+286    	; 0x13c0 <_Z18softpwm_transitionhhj+0x13c>

	int8_t del_pwm = target_pwm - __swpwm_dc[channel];
    12a2:	08 2f       	mov	r16, r24
    12a4:	10 e0       	ldi	r17, 0x00	; 0
    12a6:	f8 01       	movw	r30, r16
    12a8:	e7 59       	subi	r30, 0x97	; 151
    12aa:	fd 4f       	sbci	r31, 0xFD	; 253
    12ac:	90 81       	ld	r25, Z
    12ae:	e6 2f       	mov	r30, r22
    12b0:	e9 1b       	sub	r30, r25
	if (del_pwm == 0)		return 0;
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <_Z18softpwm_transitionhhj+0x32>
    12b4:	88 c0       	rjmp	.+272    	; 0x13c6 <_Z18softpwm_transitionhhj+0x142>
    12b6:	c6 2f       	mov	r28, r22
    12b8:	f8 2f       	mov	r31, r24

	uint16_t ncycles = ms/msPerCycle;
    12ba:	9a 01       	movw	r18, r20
    12bc:	32 95       	swap	r19
    12be:	22 95       	swap	r18
    12c0:	2f 70       	andi	r18, 0x0F	; 15
    12c2:	23 27       	eor	r18, r19
    12c4:	3f 70       	andi	r19, 0x0F	; 15
    12c6:	23 27       	eor	r18, r19
	if (ncycles == 0){
    12c8:	21 15       	cp	r18, r1
    12ca:	31 05       	cpc	r19, r1
    12cc:	29 f4       	brne	.+10     	; 0x12d8 <_Z18softpwm_transitionhhj+0x54>
		softpwm_write(channel, target_pwm);
    12ce:	0e 94 31 09 	call	0x1262	; 0x1262 <_Z13softpwm_writehh>
		return 0;
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	79 c0       	rjmp	.+242    	; 0x13ca <_Z18softpwm_transitionhhj+0x146>
	}

	if (ncycles/abs(del_pwm) > 16){
    12d8:	ee 2e       	mov	r14, r30
    12da:	0e 2e       	mov	r0, r30
    12dc:	00 0c       	add	r0, r0
    12de:	ff 08       	sbc	r15, r15
    12e0:	67 01       	movw	r12, r14
    12e2:	ff 20       	and	r15, r15
    12e4:	24 f4       	brge	.+8      	; 0x12ee <_Z18softpwm_transitionhhj+0x6a>
    12e6:	cc 24       	eor	r12, r12
    12e8:	dd 24       	eor	r13, r13
    12ea:	ce 18       	sub	r12, r14
    12ec:	df 08       	sbc	r13, r15
    12ee:	c9 01       	movw	r24, r18
    12f0:	b6 01       	movw	r22, r12
    12f2:	0e 94 20 0b 	call	0x1640	; 0x1640 <__udivmodhi4>
    12f6:	61 31       	cpi	r22, 0x11	; 17
    12f8:	71 05       	cpc	r23, r1
    12fa:	38 f0       	brcs	.+14     	; 0x130a <_Z18softpwm_transitionhhj+0x86>
		ncycles = abs(del_pwm) * 16;
    12fc:	96 01       	movw	r18, r12
    12fe:	22 95       	swap	r18
    1300:	32 95       	swap	r19
    1302:	30 7f       	andi	r19, 0xF0	; 240
    1304:	32 27       	eor	r19, r18
    1306:	20 7f       	andi	r18, 0xF0	; 240
    1308:	32 27       	eor	r19, r18
	}
	
	int8_t step = ((int16_t)del_pwm)/((int16_t)ncycles);
    130a:	c7 01       	movw	r24, r14
    130c:	b9 01       	movw	r22, r18
    130e:	0e 94 34 0b 	call	0x1668	; 0x1668 <__divmodhi4>
    1312:	46 2f       	mov	r20, r22
	step = (step==0)?((del_pwm<0)?-1:1):step;
    1314:	61 11       	cpse	r22, r1
    1316:	05 c0       	rjmp	.+10     	; 0x1322 <_Z18softpwm_transitionhhj+0x9e>
    1318:	ee 23       	and	r30, r30
    131a:	14 f0       	brlt	.+4      	; 0x1320 <_Z18softpwm_transitionhhj+0x9c>
    131c:	41 e0       	ldi	r20, 0x01	; 1
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <_Z18softpwm_transitionhhj+0x9e>
    1320:	4f ef       	ldi	r20, 0xFF	; 255
	
	uint8_t dt = (((int16_t)step)*((int16_t)ncycles))/((int16_t)del_pwm);
    1322:	a4 2e       	mov	r10, r20
    1324:	04 2e       	mov	r0, r20
    1326:	00 0c       	add	r0, r0
    1328:	bb 08       	sbc	r11, r11
    132a:	2a 9d       	mul	r18, r10
    132c:	c0 01       	movw	r24, r0
    132e:	2b 9d       	mul	r18, r11
    1330:	90 0d       	add	r25, r0
    1332:	3a 9d       	mul	r19, r10
    1334:	90 0d       	add	r25, r0
    1336:	11 24       	eor	r1, r1
    1338:	b7 01       	movw	r22, r14
    133a:	0e 94 34 0b 	call	0x1668	; 0x1668 <__divmodhi4>
    133e:	26 2f       	mov	r18, r22
	if (dt==0)	dt = 1;
    1340:	61 11       	cpse	r22, r1
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <_Z18softpwm_transitionhhj+0xc2>
    1344:	21 e0       	ldi	r18, 0x01	; 1
	
	ncycles = dt * del_pwm/step;
    1346:	c2 2e       	mov	r12, r18
    1348:	d1 2c       	mov	r13, r1
	uint8_t nstep = ncycles/dt;
    134a:	ec 9c       	mul	r14, r12
    134c:	c0 01       	movw	r24, r0
    134e:	ed 9c       	mul	r14, r13
    1350:	90 0d       	add	r25, r0
    1352:	fc 9c       	mul	r15, r12
    1354:	90 0d       	add	r25, r0
    1356:	11 24       	eor	r1, r1
    1358:	b5 01       	movw	r22, r10
    135a:	0e 94 34 0b 	call	0x1668	; 0x1668 <__divmodhi4>
    135e:	cb 01       	movw	r24, r22
    1360:	b6 01       	movw	r22, r12
    1362:	0e 94 20 0b 	call	0x1640	; 0x1640 <__udivmodhi4>
	if (nstep == 0){
    1366:	61 11       	cpse	r22, r1
    1368:	07 c0       	rjmp	.+14     	; 0x1378 <_Z18softpwm_transitionhhj+0xf4>
		softpwm_write(channel, target_pwm);
    136a:	6c 2f       	mov	r22, r28
    136c:	8f 2f       	mov	r24, r31
    136e:	0e 94 31 09 	call	0x1262	; 0x1262 <_Z13softpwm_writehh>
		return 0;
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	29 c0       	rjmp	.+82     	; 0x13ca <_Z18softpwm_transitionhhj+0x146>
	}
	_swpwm_nstep[channel] = 0;
    1378:	d8 01       	movw	r26, r16
    137a:	a7 5e       	subi	r26, 0xE7	; 231
    137c:	bd 4f       	sbci	r27, 0xFD	; 253
    137e:	1c 92       	st	X, r1
	_swpwm_step[channel] = step;
    1380:	f8 01       	movw	r30, r16
    1382:	e7 5b       	subi	r30, 0xB7	; 183
    1384:	fd 4f       	sbci	r31, 0xFD	; 253
    1386:	40 83       	st	Z, r20
	_swpwm_dt[channel] = dt;
    1388:	f8 01       	movw	r30, r16
    138a:	e7 5c       	subi	r30, 0xC7	; 199
    138c:	fd 4f       	sbci	r31, 0xFD	; 253
    138e:	20 83       	st	Z, r18
	__swpwm_dt[channel] = dt;
    1390:	f8 01       	movw	r30, r16
    1392:	e7 5d       	subi	r30, 0xD7	; 215
    1394:	fd 4f       	sbci	r31, 0xFD	; 253
    1396:	20 83       	st	Z, r18
	_swpwm_tgt[channel] = target_pwm;
    1398:	f8 01       	movw	r30, r16
    139a:	e7 5f       	subi	r30, 0xF7	; 247
    139c:	fd 4f       	sbci	r31, 0xFD	; 253
    139e:	c0 83       	st	Z, r28
	_swpwm_nstep[channel] = nstep;
    13a0:	6c 93       	st	X, r22

	return nstep*dt*msPerCycle;
    13a2:	6c 9d       	mul	r22, r12
    13a4:	c0 01       	movw	r24, r0
    13a6:	6d 9d       	mul	r22, r13
    13a8:	90 0d       	add	r25, r0
    13aa:	11 24       	eor	r1, r1
    13ac:	82 95       	swap	r24
    13ae:	92 95       	swap	r25
    13b0:	90 7f       	andi	r25, 0xF0	; 240
    13b2:	98 27       	eor	r25, r24
    13b4:	80 7f       	andi	r24, 0xF0	; 240
    13b6:	98 27       	eor	r25, r24
    13b8:	08 c0       	rjmp	.+16     	; 0x13ca <_Z18softpwm_transitionhhj+0x146>
	__swpwm_dc[channel] = pwm;
	_pwm_changed = 1;
}

int16_t softpwm_transition(uint8_t channel, uint8_t target_pwm, uint16_t ms){
	if (channel > 15)		return -1;
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	9f ef       	ldi	r25, 0xFF	; 255
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <_Z18softpwm_transitionhhj+0x146>
	if (target_pwm > 127)	return -2;
    13c0:	8e ef       	ldi	r24, 0xFE	; 254
    13c2:	9f ef       	ldi	r25, 0xFF	; 255
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <_Z18softpwm_transitionhhj+0x146>

	int8_t del_pwm = target_pwm - __swpwm_dc[channel];
	if (del_pwm == 0)		return 0;
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
	__swpwm_dt[channel] = dt;
	_swpwm_tgt[channel] = target_pwm;
	_swpwm_nstep[channel] = nstep;

	return nstep*dt*msPerCycle;
}
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	cf 90       	pop	r12
    13d8:	bf 90       	pop	r11
    13da:	af 90       	pop	r10
    13dc:	08 95       	ret

000013de <_Z12softpwm_initv>:

void softpwm_init(){
	TIMSK1 = 0;//~(1<<OCIE1A);
    13de:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0

	for (uint8_t i=0; i<16; i++){
		_swpwm_dc[i] = 0;
    13e6:	fc 01       	movw	r30, r24
    13e8:	e7 5a       	subi	r30, 0xA7	; 167
    13ea:	fd 4f       	sbci	r31, 0xFD	; 253
    13ec:	10 82       	st	Z, r1
		__swpwm_dc[i] = 0;
    13ee:	fc 01       	movw	r30, r24
    13f0:	e7 59       	subi	r30, 0x97	; 151
    13f2:	fd 4f       	sbci	r31, 0xFD	; 253
    13f4:	10 82       	st	Z, r1
		_swpwm_nstep[i] = 0;
    13f6:	fc 01       	movw	r30, r24
    13f8:	e7 5e       	subi	r30, 0xE7	; 231
    13fa:	fd 4f       	sbci	r31, 0xFD	; 253
    13fc:	10 82       	st	Z, r1
    13fe:	01 96       	adiw	r24, 0x01	; 1
}

void softpwm_init(){
	TIMSK1 = 0;//~(1<<OCIE1A);

	for (uint8_t i=0; i<16; i++){
    1400:	80 31       	cpi	r24, 0x10	; 16
    1402:	91 05       	cpc	r25, r1
    1404:	81 f7       	brne	.-32     	; 0x13e6 <_Z12softpwm_initv+0x8>
		_swpwm_dc[i] = 0;
		__swpwm_dc[i] = 0;
		_swpwm_nstep[i] = 0;
	}
	_swpwm_cnt=128;
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_swpwm_cnt>

	DDRB = 0x3F;
    140c:	8f e3       	ldi	r24, 0x3F	; 63
    140e:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x3F;
    1410:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0xF0;
    1412:	8a b1       	in	r24, 0x0a	; 10
    1414:	80 6f       	ori	r24, 0xF0	; 240
    1416:	8a b9       	out	0x0a, r24	; 10

	OCR1A = 2000;		//interrupt every this many cycles
    1418:	80 ed       	ldi	r24, 0xD0	; 208
    141a:	97 e0       	ldi	r25, 0x07	; 7
    141c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1420:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR1A = 0;
    1424:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (0<<WGM13) | (1<<WGM12) | 0x01;
    1428:	89 e0       	ldi	r24, 0x09	; 9
    142a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (1<<OCIE1A);
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	
	sei();
    1434:	78 94       	sei
    1436:	08 95       	ret

00001438 <__vector_11>:
}

ISR(TIMER1_COMPA_vect){ 
    1438:	1f 92       	push	r1
    143a:	0f 92       	push	r0
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	0f 92       	push	r0
    1440:	11 24       	eor	r1, r1
    1442:	2f 93       	push	r18
    1444:	3f 93       	push	r19
    1446:	4f 93       	push	r20
    1448:	8f 93       	push	r24
    144a:	9f 93       	push	r25
    144c:	af 93       	push	r26
    144e:	bf 93       	push	r27
    1450:	ef 93       	push	r30
    1452:	ff 93       	push	r31
	//using local variable so compiler will use register for faster code
	uint8_t _cnt = _swpwm_cnt;	
    1454:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <_swpwm_cnt>
	_cnt--;
    1458:	81 50       	subi	r24, 0x01	; 1
	if (_cnt){	
    145a:	09 f4       	brne	.+2      	; 0x145e <__vector_11+0x26>
    145c:	51 c0       	rjmp	.+162    	; 0x1500 <__vector_11+0xc8>
		//hard coded for faster ISR code
		if (_cnt == _swpwm_dc[0])	PORTC |= (1<<5);	//B1
    145e:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <_swpwm_dc>
    1462:	89 13       	cpse	r24, r25
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <__vector_11+0x30>
    1466:	45 9a       	sbi	0x08, 5	; 8
		if (_cnt == _swpwm_dc[1])	PORTC |= (1<<4);	//G1
    1468:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <_swpwm_dc+0x1>
    146c:	89 13       	cpse	r24, r25
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <__vector_11+0x3a>
    1470:	44 9a       	sbi	0x08, 4	; 8
		if (_cnt == _swpwm_dc[2])	PORTC |= (1<<3);	//R1
    1472:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <_swpwm_dc+0x2>
    1476:	89 13       	cpse	r24, r25
    1478:	01 c0       	rjmp	.+2      	; 0x147c <__vector_11+0x44>
    147a:	43 9a       	sbi	0x08, 3	; 8
		if (_cnt == _swpwm_dc[3])	PORTC |= (1<<2);	//B2
    147c:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <_swpwm_dc+0x3>
    1480:	89 13       	cpse	r24, r25
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <__vector_11+0x4e>
    1484:	42 9a       	sbi	0x08, 2	; 8
		if (_cnt == _swpwm_dc[4])	PORTC |= (1<<1);	//G2
    1486:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <_swpwm_dc+0x4>
    148a:	89 13       	cpse	r24, r25
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <__vector_11+0x58>
    148e:	41 9a       	sbi	0x08, 1	; 8
		if (_cnt == _swpwm_dc[5])	PORTC |= (1<<0);	//R2
    1490:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <_swpwm_dc+0x5>
    1494:	89 13       	cpse	r24, r25
    1496:	01 c0       	rjmp	.+2      	; 0x149a <__vector_11+0x62>
    1498:	40 9a       	sbi	0x08, 0	; 8
		if (_cnt == _swpwm_dc[6])	PORTB |= (1<<5);	//L1
    149a:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <_swpwm_dc+0x6>
    149e:	89 13       	cpse	r24, r25
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <__vector_11+0x6c>
    14a2:	2d 9a       	sbi	0x05, 5	; 5
		if (_cnt == _swpwm_dc[7])	PORTB |= (1<<4);	//L2
    14a4:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <_swpwm_dc+0x7>
    14a8:	89 13       	cpse	r24, r25
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <__vector_11+0x76>
    14ac:	2c 9a       	sbi	0x05, 4	; 5
		if (_cnt == _swpwm_dc[8])	PORTB |= (1<<3);	//L3
    14ae:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <_swpwm_dc+0x8>
    14b2:	89 13       	cpse	r24, r25
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <__vector_11+0x80>
    14b6:	2b 9a       	sbi	0x05, 3	; 5
		if (_cnt == _swpwm_dc[9])	PORTB |= (1<<2);	//L4
    14b8:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <_swpwm_dc+0x9>
    14bc:	89 13       	cpse	r24, r25
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <__vector_11+0x8a>
    14c0:	2a 9a       	sbi	0x05, 2	; 5
		if (_cnt == _swpwm_dc[10])	PORTB |= (1<<1);	//3R
    14c2:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <_swpwm_dc+0xa>
    14c6:	89 13       	cpse	r24, r25
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <__vector_11+0x94>
    14ca:	29 9a       	sbi	0x05, 1	; 5
		if (_cnt == _swpwm_dc[11])	PORTD |= (1<<4);	//3G
    14cc:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <_swpwm_dc+0xb>
    14d0:	89 13       	cpse	r24, r25
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <__vector_11+0x9e>
    14d4:	5c 9a       	sbi	0x0b, 4	; 11
		if (_cnt == _swpwm_dc[12])	PORTB |= (1<<0);	//3B
    14d6:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <_swpwm_dc+0xc>
    14da:	89 13       	cpse	r24, r25
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <__vector_11+0xa8>
    14de:	28 9a       	sbi	0x05, 0	; 5
		if (_cnt == _swpwm_dc[13])	PORTD |= (1<<7);	//4R
    14e0:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_swpwm_dc+0xd>
    14e4:	89 13       	cpse	r24, r25
    14e6:	01 c0       	rjmp	.+2      	; 0x14ea <__vector_11+0xb2>
    14e8:	5f 9a       	sbi	0x0b, 7	; 11
		if (_cnt == _swpwm_dc[14])	PORTD |= (1<<6);	//4G
    14ea:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <_swpwm_dc+0xe>
    14ee:	89 13       	cpse	r24, r25
    14f0:	01 c0       	rjmp	.+2      	; 0x14f4 <__vector_11+0xbc>
    14f2:	5e 9a       	sbi	0x0b, 6	; 11
		if (_cnt == _swpwm_dc[15])	PORTD |= (1<<5);	//4B
    14f4:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <_swpwm_dc+0xf>
    14f8:	89 13       	cpse	r24, r25
    14fa:	50 c0       	rjmp	.+160    	; 0x159c <__vector_11+0x164>
    14fc:	5d 9a       	sbi	0x0b, 5	; 11
    14fe:	4e c0       	rjmp	.+156    	; 0x159c <__vector_11+0x164>
	}
	else
	{
		PORTB = 0;
    1500:	15 b8       	out	0x05, r1	; 5
		PORTC = 0;
    1502:	18 b8       	out	0x08, r1	; 8
		PORTD &= ~(0xF0);
    1504:	8b b1       	in	r24, 0x0b	; 11
    1506:	8f 70       	andi	r24, 0x0F	; 15
    1508:	8b b9       	out	0x0b, r24	; 11
		_cnt = 128;		//this many pwm steps (0 to this-1)

		if (_pwm_changed)
    150a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_pwm_changed>
    150e:	88 23       	and	r24, r24
    1510:	09 f4       	brne	.+2      	; 0x1514 <__vector_11+0xdc>
    1512:	86 c0       	rjmp	.+268    	; 0x1620 <__vector_11+0x1e8>
		{
			_pwm_changed = 0;
    1514:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <_pwm_changed>
			_swpwm_dc[0] = __swpwm_dc[0];
    1518:	a9 e6       	ldi	r26, 0x69	; 105
    151a:	b2 e0       	ldi	r27, 0x02	; 2
    151c:	8c 91       	ld	r24, X
    151e:	e9 e5       	ldi	r30, 0x59	; 89
    1520:	f2 e0       	ldi	r31, 0x02	; 2
    1522:	80 83       	st	Z, r24
			_swpwm_dc[1] = __swpwm_dc[1];
    1524:	11 96       	adiw	r26, 0x01	; 1
    1526:	8c 91       	ld	r24, X
    1528:	11 97       	sbiw	r26, 0x01	; 1
    152a:	81 83       	std	Z+1, r24	; 0x01
			_swpwm_dc[2] = __swpwm_dc[2];
    152c:	12 96       	adiw	r26, 0x02	; 2
    152e:	8c 91       	ld	r24, X
    1530:	12 97       	sbiw	r26, 0x02	; 2
    1532:	82 83       	std	Z+2, r24	; 0x02
			_swpwm_dc[3] = __swpwm_dc[3];
    1534:	13 96       	adiw	r26, 0x03	; 3
    1536:	8c 91       	ld	r24, X
    1538:	13 97       	sbiw	r26, 0x03	; 3
    153a:	83 83       	std	Z+3, r24	; 0x03
			_swpwm_dc[4] = __swpwm_dc[4];
    153c:	14 96       	adiw	r26, 0x04	; 4
    153e:	8c 91       	ld	r24, X
    1540:	14 97       	sbiw	r26, 0x04	; 4
    1542:	84 83       	std	Z+4, r24	; 0x04
			_swpwm_dc[5] = __swpwm_dc[5];
    1544:	15 96       	adiw	r26, 0x05	; 5
    1546:	8c 91       	ld	r24, X
    1548:	15 97       	sbiw	r26, 0x05	; 5
    154a:	85 83       	std	Z+5, r24	; 0x05
			_swpwm_dc[6] = __swpwm_dc[6];
    154c:	16 96       	adiw	r26, 0x06	; 6
    154e:	8c 91       	ld	r24, X
    1550:	16 97       	sbiw	r26, 0x06	; 6
    1552:	86 83       	std	Z+6, r24	; 0x06
			_swpwm_dc[7] = __swpwm_dc[7];
    1554:	17 96       	adiw	r26, 0x07	; 7
    1556:	8c 91       	ld	r24, X
    1558:	17 97       	sbiw	r26, 0x07	; 7
    155a:	87 83       	std	Z+7, r24	; 0x07
			_swpwm_dc[8] = __swpwm_dc[8];
    155c:	18 96       	adiw	r26, 0x08	; 8
    155e:	8c 91       	ld	r24, X
    1560:	18 97       	sbiw	r26, 0x08	; 8
    1562:	80 87       	std	Z+8, r24	; 0x08
			_swpwm_dc[9] = __swpwm_dc[9];
    1564:	19 96       	adiw	r26, 0x09	; 9
    1566:	8c 91       	ld	r24, X
    1568:	19 97       	sbiw	r26, 0x09	; 9
    156a:	81 87       	std	Z+9, r24	; 0x09
			_swpwm_dc[10] = __swpwm_dc[10];
    156c:	1a 96       	adiw	r26, 0x0a	; 10
    156e:	8c 91       	ld	r24, X
    1570:	1a 97       	sbiw	r26, 0x0a	; 10
    1572:	82 87       	std	Z+10, r24	; 0x0a
			_swpwm_dc[11] = __swpwm_dc[11];
    1574:	1b 96       	adiw	r26, 0x0b	; 11
    1576:	8c 91       	ld	r24, X
    1578:	1b 97       	sbiw	r26, 0x0b	; 11
    157a:	83 87       	std	Z+11, r24	; 0x0b
			_swpwm_dc[12] = __swpwm_dc[12];
    157c:	1c 96       	adiw	r26, 0x0c	; 12
    157e:	8c 91       	ld	r24, X
    1580:	1c 97       	sbiw	r26, 0x0c	; 12
    1582:	84 87       	std	Z+12, r24	; 0x0c
			_swpwm_dc[13] = __swpwm_dc[13];
    1584:	1d 96       	adiw	r26, 0x0d	; 13
    1586:	8c 91       	ld	r24, X
    1588:	1d 97       	sbiw	r26, 0x0d	; 13
    158a:	85 87       	std	Z+13, r24	; 0x0d
			_swpwm_dc[14] = __swpwm_dc[14];
    158c:	1e 96       	adiw	r26, 0x0e	; 14
    158e:	8c 91       	ld	r24, X
    1590:	1e 97       	sbiw	r26, 0x0e	; 14
    1592:	86 87       	std	Z+14, r24	; 0x0e
			_swpwm_dc[15] = __swpwm_dc[15];
    1594:	1f 96       	adiw	r26, 0x0f	; 15
    1596:	8c 91       	ld	r24, X
    1598:	87 87       	std	Z+15, r24	; 0x0f
    159a:	42 c0       	rjmp	.+132    	; 0x1620 <__vector_11+0x1e8>
		}
	}

	//every 8 cycles -> 0,8,16,...
	if (!(_cnt&0x7)){
    159c:	98 2f       	mov	r25, r24
    159e:	97 70       	andi	r25, 0x07	; 7
    15a0:	e1 f5       	brne	.+120    	; 0x161a <__vector_11+0x1e2>
		uint8_t channel = _cnt/8 -1;
		
		if (_swpwm_nstep[channel]){
    15a2:	28 2f       	mov	r18, r24
    15a4:	26 95       	lsr	r18
    15a6:	26 95       	lsr	r18
    15a8:	26 95       	lsr	r18
    15aa:	21 50       	subi	r18, 0x01	; 1
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	f9 01       	movw	r30, r18
    15b0:	e7 5e       	subi	r30, 0xE7	; 231
    15b2:	fd 4f       	sbci	r31, 0xFD	; 253
    15b4:	90 81       	ld	r25, Z
    15b6:	99 23       	and	r25, r25
    15b8:	81 f1       	breq	.+96     	; 0x161a <__vector_11+0x1e2>
			--__swpwm_dt[channel];
    15ba:	f9 01       	movw	r30, r18
    15bc:	e7 5d       	subi	r30, 0xD7	; 215
    15be:	fd 4f       	sbci	r31, 0xFD	; 253
    15c0:	90 81       	ld	r25, Z
    15c2:	91 50       	subi	r25, 0x01	; 1
    15c4:	90 83       	st	Z, r25
			
			if (!(__swpwm_dt[channel])){
    15c6:	90 81       	ld	r25, Z
    15c8:	91 11       	cpse	r25, r1
    15ca:	27 c0       	rjmp	.+78     	; 0x161a <__vector_11+0x1e2>
				__swpwm_dt[channel] = _swpwm_dt[channel];
    15cc:	f9 01       	movw	r30, r18
    15ce:	e7 5c       	subi	r30, 0xC7	; 199
    15d0:	fd 4f       	sbci	r31, 0xFD	; 253
    15d2:	90 81       	ld	r25, Z
    15d4:	f9 01       	movw	r30, r18
    15d6:	e7 5d       	subi	r30, 0xD7	; 215
    15d8:	fd 4f       	sbci	r31, 0xFD	; 253
    15da:	90 83       	st	Z, r25
				--_swpwm_nstep[channel];
    15dc:	f9 01       	movw	r30, r18
    15de:	e7 5e       	subi	r30, 0xE7	; 231
    15e0:	fd 4f       	sbci	r31, 0xFD	; 253
    15e2:	90 81       	ld	r25, Z
    15e4:	91 50       	subi	r25, 0x01	; 1
    15e6:	90 83       	st	Z, r25

				if (_swpwm_nstep[channel])
    15e8:	90 81       	ld	r25, Z
    15ea:	99 23       	and	r25, r25
    15ec:	59 f0       	breq	.+22     	; 0x1604 <__vector_11+0x1cc>
					__swpwm_dc[channel] += _swpwm_step[channel];
    15ee:	f9 01       	movw	r30, r18
    15f0:	e7 5b       	subi	r30, 0xB7	; 183
    15f2:	fd 4f       	sbci	r31, 0xFD	; 253
    15f4:	40 81       	ld	r20, Z
    15f6:	f9 01       	movw	r30, r18
    15f8:	e7 59       	subi	r30, 0x97	; 151
    15fa:	fd 4f       	sbci	r31, 0xFD	; 253
    15fc:	90 81       	ld	r25, Z
    15fe:	94 0f       	add	r25, r20
    1600:	90 83       	st	Z, r25
    1602:	08 c0       	rjmp	.+16     	; 0x1614 <__vector_11+0x1dc>
				else
					__swpwm_dc[channel] = _swpwm_tgt[channel];
    1604:	f9 01       	movw	r30, r18
    1606:	e7 5f       	subi	r30, 0xF7	; 247
    1608:	fd 4f       	sbci	r31, 0xFD	; 253
    160a:	90 81       	ld	r25, Z
    160c:	f9 01       	movw	r30, r18
    160e:	e7 59       	subi	r30, 0x97	; 151
    1610:	fd 4f       	sbci	r31, 0xFD	; 253
    1612:	90 83       	st	Z, r25

				_pwm_changed = 1;
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_pwm_changed>
			}
		}
	}
	_swpwm_cnt = _cnt;
    161a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_swpwm_cnt>
}
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <__vector_11+0x1ec>
	TIMSK1 = (1<<OCIE1A);
	
	sei();
}

ISR(TIMER1_COMPA_vect){ 
    1620:	80 e8       	ldi	r24, 0x80	; 128
    1622:	bf cf       	rjmp	.-130    	; 0x15a2 <__vector_11+0x16a>
				_pwm_changed = 1;
			}
		}
	}
	_swpwm_cnt = _cnt;
}
    1624:	ff 91       	pop	r31
    1626:	ef 91       	pop	r30
    1628:	bf 91       	pop	r27
    162a:	af 91       	pop	r26
    162c:	9f 91       	pop	r25
    162e:	8f 91       	pop	r24
    1630:	4f 91       	pop	r20
    1632:	3f 91       	pop	r19
    1634:	2f 91       	pop	r18
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	0f 90       	pop	r0
    163c:	1f 90       	pop	r1
    163e:	18 95       	reti

00001640 <__udivmodhi4>:
    1640:	aa 1b       	sub	r26, r26
    1642:	bb 1b       	sub	r27, r27
    1644:	51 e1       	ldi	r21, 0x11	; 17
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <__udivmodhi4_ep>

00001648 <__udivmodhi4_loop>:
    1648:	aa 1f       	adc	r26, r26
    164a:	bb 1f       	adc	r27, r27
    164c:	a6 17       	cp	r26, r22
    164e:	b7 07       	cpc	r27, r23
    1650:	10 f0       	brcs	.+4      	; 0x1656 <__udivmodhi4_ep>
    1652:	a6 1b       	sub	r26, r22
    1654:	b7 0b       	sbc	r27, r23

00001656 <__udivmodhi4_ep>:
    1656:	88 1f       	adc	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	5a 95       	dec	r21
    165c:	a9 f7       	brne	.-22     	; 0x1648 <__udivmodhi4_loop>
    165e:	80 95       	com	r24
    1660:	90 95       	com	r25
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	08 95       	ret

00001668 <__divmodhi4>:
    1668:	97 fb       	bst	r25, 7
    166a:	07 2e       	mov	r0, r23
    166c:	16 f4       	brtc	.+4      	; 0x1672 <__divmodhi4+0xa>
    166e:	00 94       	com	r0
    1670:	07 d0       	rcall	.+14     	; 0x1680 <__divmodhi4_neg1>
    1672:	77 fd       	sbrc	r23, 7
    1674:	09 d0       	rcall	.+18     	; 0x1688 <__divmodhi4_neg2>
    1676:	0e 94 20 0b 	call	0x1640	; 0x1640 <__udivmodhi4>
    167a:	07 fc       	sbrc	r0, 7
    167c:	05 d0       	rcall	.+10     	; 0x1688 <__divmodhi4_neg2>
    167e:	3e f4       	brtc	.+14     	; 0x168e <__divmodhi4_exit>

00001680 <__divmodhi4_neg1>:
    1680:	90 95       	com	r25
    1682:	81 95       	neg	r24
    1684:	9f 4f       	sbci	r25, 0xFF	; 255
    1686:	08 95       	ret

00001688 <__divmodhi4_neg2>:
    1688:	70 95       	com	r23
    168a:	61 95       	neg	r22
    168c:	7f 4f       	sbci	r23, 0xFF	; 255

0000168e <__divmodhi4_exit>:
    168e:	08 95       	ret

00001690 <__udivmodsi4>:
    1690:	a1 e2       	ldi	r26, 0x21	; 33
    1692:	1a 2e       	mov	r1, r26
    1694:	aa 1b       	sub	r26, r26
    1696:	bb 1b       	sub	r27, r27
    1698:	fd 01       	movw	r30, r26
    169a:	0d c0       	rjmp	.+26     	; 0x16b6 <__udivmodsi4_ep>

0000169c <__udivmodsi4_loop>:
    169c:	aa 1f       	adc	r26, r26
    169e:	bb 1f       	adc	r27, r27
    16a0:	ee 1f       	adc	r30, r30
    16a2:	ff 1f       	adc	r31, r31
    16a4:	a2 17       	cp	r26, r18
    16a6:	b3 07       	cpc	r27, r19
    16a8:	e4 07       	cpc	r30, r20
    16aa:	f5 07       	cpc	r31, r21
    16ac:	20 f0       	brcs	.+8      	; 0x16b6 <__udivmodsi4_ep>
    16ae:	a2 1b       	sub	r26, r18
    16b0:	b3 0b       	sbc	r27, r19
    16b2:	e4 0b       	sbc	r30, r20
    16b4:	f5 0b       	sbc	r31, r21

000016b6 <__udivmodsi4_ep>:
    16b6:	66 1f       	adc	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	88 1f       	adc	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	1a 94       	dec	r1
    16c0:	69 f7       	brne	.-38     	; 0x169c <__udivmodsi4_loop>
    16c2:	60 95       	com	r22
    16c4:	70 95       	com	r23
    16c6:	80 95       	com	r24
    16c8:	90 95       	com	r25
    16ca:	9b 01       	movw	r18, r22
    16cc:	ac 01       	movw	r20, r24
    16ce:	bd 01       	movw	r22, r26
    16d0:	cf 01       	movw	r24, r30
    16d2:	08 95       	ret

000016d4 <__umulhisi3>:
    16d4:	a2 9f       	mul	r26, r18
    16d6:	b0 01       	movw	r22, r0
    16d8:	b3 9f       	mul	r27, r19
    16da:	c0 01       	movw	r24, r0
    16dc:	a3 9f       	mul	r26, r19
    16de:	70 0d       	add	r23, r0
    16e0:	81 1d       	adc	r24, r1
    16e2:	11 24       	eor	r1, r1
    16e4:	91 1d       	adc	r25, r1
    16e6:	b2 9f       	mul	r27, r18
    16e8:	70 0d       	add	r23, r0
    16ea:	81 1d       	adc	r24, r1
    16ec:	11 24       	eor	r1, r1
    16ee:	91 1d       	adc	r25, r1
    16f0:	08 95       	ret

000016f2 <memcpy>:
    16f2:	fb 01       	movw	r30, r22
    16f4:	dc 01       	movw	r26, r24
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <memcpy+0xa>
    16f8:	01 90       	ld	r0, Z+
    16fa:	0d 92       	st	X+, r0
    16fc:	41 50       	subi	r20, 0x01	; 1
    16fe:	50 40       	sbci	r21, 0x00	; 0
    1700:	d8 f7       	brcc	.-10     	; 0x16f8 <memcpy+0x6>
    1702:	08 95       	ret

00001704 <_exit>:
    1704:	f8 94       	cli

00001706 <__stop_program>:
    1706:	ff cf       	rjmp	.-2      	; 0x1706 <__stop_program>
