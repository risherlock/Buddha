
roboSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000201c  000020b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000201c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024f  00800148  00800148  000020f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000630  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000da70  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002962  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e59  00000000  00000000  00012b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013fc  00000000  00000000  000169c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000030b1  00000000  00000000  00017dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a496  00000000  00000000  0001ae71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a0  00000000  00000000  00025307  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__dtors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_3>
      10:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_3>
      14:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_3>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__vector_7>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__vector_9>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 b9 04 	jmp	0x972	; 0x972 <__vector_11>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <__vector_18>
      4c:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__vector_19>
      50:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__vector_20>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	ad 06       	cpc	r10, r29

000000c4 <__ctors_end>:
      c4:	b2 06       	cpc	r11, r18

000000c6 <__dtors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	ec e1       	ldi	r30, 0x1C	; 28
      da:	f0 e2       	ldi	r31, 0x20	; 32
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a8 34       	cpi	r26, 0x48	; 72
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	23 e0       	ldi	r18, 0x03	; 3
      ea:	a8 e4       	ldi	r26, 0x48	; 72
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a7 39       	cpi	r26, 0x97	; 151
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c2 e6       	ldi	r28, 0x62	; 98
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	21 97       	sbiw	r28, 0x01	; 1
     102:	fe 01       	movw	r30, r28
     104:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__tablejump2__>
     108:	c1 36       	cpi	r28, 0x61	; 97
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 6b 05 	call	0xad6	; 0xad6 <main>
     112:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__do_global_dtors>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	08 95       	ret

00000120 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     120:	cf 92       	push	r12
     122:	df 92       	push	r13
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
     130:	41 15       	cp	r20, r1
     132:	51 05       	cpc	r21, r1
     134:	c1 f0       	breq	.+48     	; 0x166 <_ZN5Print5writeEPKhj+0x46>
     136:	6a 01       	movw	r12, r20
     138:	8c 01       	movw	r16, r24
     13a:	e6 2e       	mov	r14, r22
     13c:	f7 2e       	mov	r15, r23
     13e:	c0 e0       	ldi	r28, 0x00	; 0
     140:	d0 e0       	ldi	r29, 0x00	; 0
    if (write(*buffer++)) n++;
     142:	d7 01       	movw	r26, r14
     144:	6d 91       	ld	r22, X+
     146:	7d 01       	movw	r14, r26
     148:	d8 01       	movw	r26, r16
     14a:	ed 91       	ld	r30, X+
     14c:	fc 91       	ld	r31, X
     14e:	01 90       	ld	r0, Z+
     150:	f0 81       	ld	r31, Z
     152:	e0 2d       	mov	r30, r0
     154:	c8 01       	movw	r24, r16
     156:	09 95       	icall
     158:	89 2b       	or	r24, r25
     15a:	39 f0       	breq	.+14     	; 0x16a <_ZN5Print5writeEPKhj+0x4a>
     15c:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     15e:	cc 16       	cp	r12, r28
     160:	dd 06       	cpc	r13, r29
     162:	79 f7       	brne	.-34     	; 0x142 <_ZN5Print5writeEPKhj+0x22>
     164:	02 c0       	rjmp	.+4      	; 0x16a <_ZN5Print5writeEPKhj+0x4a>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
     166:	c0 e0       	ldi	r28, 0x00	; 0
     168:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
     16a:	ce 01       	movw	r24, r28
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	1f 91       	pop	r17
     172:	0f 91       	pop	r16
     174:	ff 90       	pop	r15
     176:	ef 90       	pop	r14
     178:	df 90       	pop	r13
     17a:	cf 90       	pop	r12
     17c:	08 95       	ret

0000017e <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     17e:	20 91 8a 01 	lds	r18, 0x018A
     182:	30 91 8b 01 	lds	r19, 0x018B
     186:	28 17       	cp	r18, r24
     188:	39 07       	cpc	r19, r25
     18a:	f9 f4       	brne	.+62     	; 0x1ca <_ZN14SoftwareSerial4readEv+0x4c>
     18c:	90 91 48 01 	lds	r25, 0x0148
     190:	80 91 49 01 	lds	r24, 0x0149
     194:	98 17       	cp	r25, r24
     196:	e1 f0       	breq	.+56     	; 0x1d0 <_ZN14SoftwareSerial4readEv+0x52>
     198:	e0 91 48 01 	lds	r30, 0x0148
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	e6 5b       	subi	r30, 0xB6	; 182
     1a0:	fe 4f       	sbci	r31, 0xFE	; 254
     1a2:	80 81       	ld	r24, Z
     1a4:	20 91 48 01 	lds	r18, 0x0148
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	2f 5f       	subi	r18, 0xFF	; 255
     1ac:	3f 4f       	sbci	r19, 0xFF	; 255
     1ae:	2f 73       	andi	r18, 0x3F	; 63
     1b0:	30 78       	andi	r19, 0x80	; 128
     1b2:	33 23       	and	r19, r19
     1b4:	34 f4       	brge	.+12     	; 0x1c2 <_ZN14SoftwareSerial4readEv+0x44>
     1b6:	21 50       	subi	r18, 0x01	; 1
     1b8:	31 09       	sbc	r19, r1
     1ba:	20 6c       	ori	r18, 0xC0	; 192
     1bc:	3f 6f       	ori	r19, 0xFF	; 255
     1be:	2f 5f       	subi	r18, 0xFF	; 255
     1c0:	3f 4f       	sbci	r19, 0xFF	; 255
     1c2:	20 93 48 01 	sts	0x0148, r18
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	08 95       	ret
     1ca:	8f ef       	ldi	r24, 0xFF	; 255
     1cc:	9f ef       	ldi	r25, 0xFF	; 255
     1ce:	08 95       	ret
     1d0:	8f ef       	ldi	r24, 0xFF	; 255
     1d2:	9f ef       	ldi	r25, 0xFF	; 255
     1d4:	08 95       	ret

000001d6 <_ZN14SoftwareSerial9availableEv>:
     1d6:	20 91 8a 01 	lds	r18, 0x018A
     1da:	30 91 8b 01 	lds	r19, 0x018B
     1de:	28 17       	cp	r18, r24
     1e0:	39 07       	cpc	r19, r25
     1e2:	b1 f4       	brne	.+44     	; 0x210 <_ZN14SoftwareSerial9availableEv+0x3a>
     1e4:	20 91 49 01 	lds	r18, 0x0149
     1e8:	80 91 48 01 	lds	r24, 0x0148
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	20 5c       	subi	r18, 0xC0	; 192
     1f0:	3f 4f       	sbci	r19, 0xFF	; 255
     1f2:	28 1b       	sub	r18, r24
     1f4:	31 09       	sbc	r19, r1
     1f6:	2f 73       	andi	r18, 0x3F	; 63
     1f8:	30 78       	andi	r19, 0x80	; 128
     1fa:	33 23       	and	r19, r19
     1fc:	34 f4       	brge	.+12     	; 0x20a <_ZN14SoftwareSerial9availableEv+0x34>
     1fe:	21 50       	subi	r18, 0x01	; 1
     200:	31 09       	sbc	r19, r1
     202:	20 6c       	ori	r18, 0xC0	; 192
     204:	3f 6f       	ori	r19, 0xFF	; 255
     206:	2f 5f       	subi	r18, 0xFF	; 255
     208:	3f 4f       	sbci	r19, 0xFF	; 255
     20a:	82 2f       	mov	r24, r18
     20c:	93 2f       	mov	r25, r19
     20e:	08 95       	ret
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	08 95       	ret

00000216 <_ZN14SoftwareSerial5writeEh>:
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	ec 01       	movw	r28, r24
     21e:	4c 8d       	ldd	r20, Y+28	; 0x1c
     220:	5d 8d       	ldd	r21, Y+29	; 0x1d
     222:	41 15       	cp	r20, r1
     224:	51 05       	cpc	r21, r1
     226:	29 f4       	brne	.+10     	; 0x232 <_ZN14SoftwareSerial5writeEh+0x1c>
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	9b 83       	std	Y+3, r25	; 0x03
     22e:	8a 83       	std	Y+2, r24	; 0x02
     230:	39 c0       	rjmp	.+114    	; 0x2a4 <_ZN14SoftwareSerial5writeEh+0x8e>
     232:	a9 89       	ldd	r26, Y+17	; 0x11
     234:	ba 89       	ldd	r27, Y+18	; 0x12
     236:	38 89       	ldd	r19, Y+16	; 0x10
     238:	83 2f       	mov	r24, r19
     23a:	80 95       	com	r24
     23c:	1f b7       	in	r17, 0x3f	; 63
     23e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     240:	91 fb       	bst	r25, 1
     242:	77 27       	eor	r23, r23
     244:	70 f9       	bld	r23, 0
     246:	91 fd       	sbrc	r25, 1
     248:	60 95       	com	r22
     24a:	f8 94       	cli
     24c:	77 23       	and	r23, r23
     24e:	21 f0       	breq	.+8      	; 0x258 <_ZN14SoftwareSerial5writeEh+0x42>
     250:	9c 91       	ld	r25, X
     252:	93 2b       	or	r25, r19
     254:	9c 93       	st	X, r25
     256:	03 c0       	rjmp	.+6      	; 0x25e <_ZN14SoftwareSerial5writeEh+0x48>
     258:	9c 91       	ld	r25, X
     25a:	98 23       	and	r25, r24
     25c:	9c 93       	st	X, r25
     25e:	fa 01       	movw	r30, r20
     260:	31 97       	sbiw	r30, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <_ZN14SoftwareSerial5writeEh+0x4a>
     264:	98 e0       	ldi	r25, 0x08	; 8
     266:	60 ff       	sbrs	r22, 0
     268:	04 c0       	rjmp	.+8      	; 0x272 <_ZN14SoftwareSerial5writeEh+0x5c>
     26a:	2c 91       	ld	r18, X
     26c:	23 2b       	or	r18, r19
     26e:	2c 93       	st	X, r18
     270:	03 c0       	rjmp	.+6      	; 0x278 <_ZN14SoftwareSerial5writeEh+0x62>
     272:	2c 91       	ld	r18, X
     274:	28 23       	and	r18, r24
     276:	2c 93       	st	X, r18
     278:	fa 01       	movw	r30, r20
     27a:	31 97       	sbiw	r30, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <_ZN14SoftwareSerial5writeEh+0x64>
     27e:	66 95       	lsr	r22
     280:	91 50       	subi	r25, 0x01	; 1
     282:	89 f7       	brne	.-30     	; 0x266 <_ZN14SoftwareSerial5writeEh+0x50>
     284:	77 23       	and	r23, r23
     286:	21 f0       	breq	.+8      	; 0x290 <_ZN14SoftwareSerial5writeEh+0x7a>
     288:	9c 91       	ld	r25, X
     28a:	89 23       	and	r24, r25
     28c:	8c 93       	st	X, r24
     28e:	03 c0       	rjmp	.+6      	; 0x296 <_ZN14SoftwareSerial5writeEh+0x80>
     290:	8c 91       	ld	r24, X
     292:	38 2b       	or	r19, r24
     294:	3c 93       	st	X, r19
     296:	1f bf       	out	0x3f, r17	; 63
     298:	8c 8d       	ldd	r24, Y+28	; 0x1c
     29a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <_ZN14SoftwareSerial5writeEh+0x86>
     2a0:	41 e0       	ldi	r20, 0x01	; 1
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	ca 01       	movw	r24, r20
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	1f 91       	pop	r17
     2ac:	08 95       	ret

000002ae <_ZN14SoftwareSerial5flushEv>:
     2ae:	08 95       	ret

000002b0 <_ZN14SoftwareSerial4peekEv>:
     2b0:	20 91 8a 01 	lds	r18, 0x018A
     2b4:	30 91 8b 01 	lds	r19, 0x018B
     2b8:	28 17       	cp	r18, r24
     2ba:	39 07       	cpc	r19, r25
     2bc:	71 f4       	brne	.+28     	; 0x2da <_ZN14SoftwareSerial4peekEv+0x2a>
     2be:	90 91 48 01 	lds	r25, 0x0148
     2c2:	80 91 49 01 	lds	r24, 0x0149
     2c6:	98 17       	cp	r25, r24
     2c8:	59 f0       	breq	.+22     	; 0x2e0 <_ZN14SoftwareSerial4peekEv+0x30>
     2ca:	e0 91 48 01 	lds	r30, 0x0148
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	e6 5b       	subi	r30, 0xB6	; 182
     2d2:	fe 4f       	sbci	r31, 0xFE	; 254
     2d4:	80 81       	ld	r24, Z
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	08 95       	ret
     2da:	8f ef       	ldi	r24, 0xFF	; 255
     2dc:	9f ef       	ldi	r25, 0xFF	; 255
     2de:	08 95       	ret
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
     2e2:	9f ef       	ldi	r25, 0xFF	; 255
     2e4:	08 95       	ret

000002e6 <_ZN14SoftwareSerial13stopListeningEv>:
     2e6:	e0 91 8a 01 	lds	r30, 0x018A
     2ea:	f0 91 8b 01 	lds	r31, 0x018B
     2ee:	e8 17       	cp	r30, r24
     2f0:	f9 07       	cpc	r31, r25
     2f2:	69 f4       	brne	.+26     	; 0x30e <_ZN14SoftwareSerial13stopListeningEv+0x28>
     2f4:	a3 89       	ldd	r26, Z+19	; 0x13
     2f6:	b4 89       	ldd	r27, Z+20	; 0x14
     2f8:	9c 91       	ld	r25, X
     2fa:	85 89       	ldd	r24, Z+21	; 0x15
     2fc:	80 95       	com	r24
     2fe:	89 23       	and	r24, r25
     300:	8c 93       	st	X, r24
     302:	10 92 8b 01 	sts	0x018B, r1
     306:	10 92 8a 01 	sts	0x018A, r1
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	08 95       	ret
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	08 95       	ret

00000312 <_ZN14SoftwareSerial6listenEv>:
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	ec 01       	movw	r28, r24
     318:	8a 8d       	ldd	r24, Y+26	; 0x1a
     31a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     31c:	89 2b       	or	r24, r25
     31e:	f1 f0       	breq	.+60     	; 0x35c <_ZN14SoftwareSerial6listenEv+0x4a>
     320:	80 91 8a 01 	lds	r24, 0x018A
     324:	90 91 8b 01 	lds	r25, 0x018B
     328:	8c 17       	cp	r24, r28
     32a:	9d 07       	cpc	r25, r29
     32c:	c9 f0       	breq	.+50     	; 0x360 <_ZN14SoftwareSerial6listenEv+0x4e>
     32e:	00 97       	sbiw	r24, 0x00	; 0
     330:	11 f0       	breq	.+4      	; 0x336 <_ZN14SoftwareSerial6listenEv+0x24>
     332:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_ZN14SoftwareSerial13stopListeningEv>
     336:	8e 8d       	ldd	r24, Y+30	; 0x1e
     338:	8e 7f       	andi	r24, 0xFE	; 254
     33a:	8e 8f       	std	Y+30, r24	; 0x1e
     33c:	10 92 49 01 	sts	0x0149, r1
     340:	10 92 48 01 	sts	0x0148, r1
     344:	d0 93 8b 01 	sts	0x018B, r29
     348:	c0 93 8a 01 	sts	0x018A, r28
     34c:	eb 89       	ldd	r30, Y+19	; 0x13
     34e:	fc 89       	ldd	r31, Y+20	; 0x14
     350:	90 81       	ld	r25, Z
     352:	8d 89       	ldd	r24, Y+21	; 0x15
     354:	89 2b       	or	r24, r25
     356:	80 83       	st	Z, r24
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	03 c0       	rjmp	.+6      	; 0x362 <_ZN14SoftwareSerial6listenEv+0x50>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	01 c0       	rjmp	.+2      	; 0x362 <_ZN14SoftwareSerial6listenEv+0x50>
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <__vector_3>:
     368:	1f 92       	push	r1
     36a:	0f 92       	push	r0
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	0f 92       	push	r0
     370:	11 24       	eor	r1, r1
     372:	2f 93       	push	r18
     374:	3f 93       	push	r19
     376:	4f 93       	push	r20
     378:	5f 93       	push	r21
     37a:	6f 93       	push	r22
     37c:	7f 93       	push	r23
     37e:	8f 93       	push	r24
     380:	9f 93       	push	r25
     382:	af 93       	push	r26
     384:	bf 93       	push	r27
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	ef 93       	push	r30
     38c:	ff 93       	push	r31
     38e:	a0 91 8a 01 	lds	r26, 0x018A
     392:	b0 91 8b 01 	lds	r27, 0x018B
     396:	10 97       	sbiw	r26, 0x00	; 0
     398:	09 f4       	brne	.+2      	; 0x39c <__vector_3+0x34>
     39a:	81 c0       	rjmp	.+258    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     39c:	5e 96       	adiw	r26, 0x1e	; 30
     39e:	8c 91       	ld	r24, X
     3a0:	5e 97       	sbiw	r26, 0x1e	; 30
     3a2:	81 ff       	sbrs	r24, 1
     3a4:	0d c0       	rjmp	.+26     	; 0x3c0 <__vector_3+0x58>
     3a6:	1e 96       	adiw	r26, 0x0e	; 14
     3a8:	ed 91       	ld	r30, X+
     3aa:	fc 91       	ld	r31, X
     3ac:	1f 97       	sbiw	r26, 0x0f	; 15
     3ae:	90 81       	ld	r25, Z
     3b0:	1d 96       	adiw	r26, 0x0d	; 13
     3b2:	8c 91       	ld	r24, X
     3b4:	1d 97       	sbiw	r26, 0x0d	; 13
     3b6:	98 23       	and	r25, r24
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	71 f4       	brne	.+28     	; 0x3d8 <__vector_3+0x70>
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	0c c0       	rjmp	.+24     	; 0x3d8 <__vector_3+0x70>
     3c0:	1e 96       	adiw	r26, 0x0e	; 14
     3c2:	ed 91       	ld	r30, X+
     3c4:	fc 91       	ld	r31, X
     3c6:	1f 97       	sbiw	r26, 0x0f	; 15
     3c8:	90 81       	ld	r25, Z
     3ca:	1d 96       	adiw	r26, 0x0d	; 13
     3cc:	8c 91       	ld	r24, X
     3ce:	1d 97       	sbiw	r26, 0x0d	; 13
     3d0:	98 23       	and	r25, r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	09 f0       	breq	.+2      	; 0x3d8 <__vector_3+0x70>
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	88 23       	and	r24, r24
     3da:	09 f4       	brne	.+2      	; 0x3de <__vector_3+0x76>
     3dc:	60 c0       	rjmp	.+192    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     3de:	53 96       	adiw	r26, 0x13	; 19
     3e0:	ed 91       	ld	r30, X+
     3e2:	fc 91       	ld	r31, X
     3e4:	54 97       	sbiw	r26, 0x14	; 20
     3e6:	90 81       	ld	r25, Z
     3e8:	55 96       	adiw	r26, 0x15	; 21
     3ea:	8c 91       	ld	r24, X
     3ec:	55 97       	sbiw	r26, 0x15	; 21
     3ee:	80 95       	com	r24
     3f0:	89 23       	and	r24, r25
     3f2:	80 83       	st	Z, r24
     3f4:	56 96       	adiw	r26, 0x16	; 22
     3f6:	8d 91       	ld	r24, X+
     3f8:	9c 91       	ld	r25, X
     3fa:	57 97       	sbiw	r26, 0x17	; 23
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <__vector_3+0x94>
     400:	58 96       	adiw	r26, 0x18	; 24
     402:	6d 91       	ld	r22, X+
     404:	7c 91       	ld	r23, X
     406:	59 97       	sbiw	r26, 0x19	; 25
     408:	1e 96       	adiw	r26, 0x0e	; 14
     40a:	cd 91       	ld	r28, X+
     40c:	dc 91       	ld	r29, X
     40e:	1f 97       	sbiw	r26, 0x0f	; 15
     410:	1d 96       	adiw	r26, 0x0d	; 13
     412:	5c 91       	ld	r21, X
     414:	1d 97       	sbiw	r26, 0x0d	; 13
     416:	38 e0       	ldi	r19, 0x08	; 8
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	fb 01       	movw	r30, r22
     41c:	31 97       	sbiw	r30, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     420:	84 2f       	mov	r24, r20
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	95 95       	asr	r25
     426:	87 95       	ror	r24
     428:	48 2f       	mov	r20, r24
     42a:	28 81       	ld	r18, Y
     42c:	25 23       	and	r18, r21
     42e:	09 f0       	breq	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	40 68       	ori	r20, 0x80	; 128
     432:	31 50       	subi	r19, 0x01	; 1
     434:	91 f7       	brne	.-28     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     436:	5e 96       	adiw	r26, 0x1e	; 30
     438:	8c 91       	ld	r24, X
     43a:	5e 97       	sbiw	r26, 0x1e	; 30
     43c:	81 fd       	sbrc	r24, 1
     43e:	40 95       	com	r20
     440:	80 91 49 01 	lds	r24, 0x0149
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	8f 73       	andi	r24, 0x3F	; 63
     44a:	90 78       	andi	r25, 0x80	; 128
     44c:	99 23       	and	r25, r25
     44e:	24 f4       	brge	.+8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	80 6c       	ori	r24, 0xC0	; 192
     454:	9f 6f       	ori	r25, 0xFF	; 255
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	20 91 48 01 	lds	r18, 0x0148
     45c:	28 17       	cp	r18, r24
     45e:	49 f0       	breq	.+18     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     460:	e0 91 49 01 	lds	r30, 0x0149
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	e6 5b       	subi	r30, 0xB6	; 182
     468:	fe 4f       	sbci	r31, 0xFE	; 254
     46a:	40 83       	st	Z, r20
     46c:	80 93 49 01 	sts	0x0149, r24
     470:	07 c0       	rjmp	.+14     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     472:	5e 96       	adiw	r26, 0x1e	; 30
     474:	8c 91       	ld	r24, X
     476:	5e 97       	sbiw	r26, 0x1e	; 30
     478:	81 60       	ori	r24, 0x01	; 1
     47a:	5e 96       	adiw	r26, 0x1e	; 30
     47c:	8c 93       	st	X, r24
     47e:	5e 97       	sbiw	r26, 0x1e	; 30
     480:	5a 96       	adiw	r26, 0x1a	; 26
     482:	8d 91       	ld	r24, X+
     484:	9c 91       	ld	r25, X
     486:	5b 97       	sbiw	r26, 0x1b	; 27
     488:	01 97       	sbiw	r24, 0x01	; 1
     48a:	f1 f7       	brne	.-4      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     48c:	53 96       	adiw	r26, 0x13	; 19
     48e:	ed 91       	ld	r30, X+
     490:	fc 91       	ld	r31, X
     492:	54 97       	sbiw	r26, 0x14	; 20
     494:	90 81       	ld	r25, Z
     496:	55 96       	adiw	r26, 0x15	; 21
     498:	8c 91       	ld	r24, X
     49a:	89 2b       	or	r24, r25
     49c:	80 83       	st	Z, r24
     49e:	ff 91       	pop	r31
     4a0:	ef 91       	pop	r30
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	bf 91       	pop	r27
     4a8:	af 91       	pop	r26
     4aa:	9f 91       	pop	r25
     4ac:	8f 91       	pop	r24
     4ae:	7f 91       	pop	r23
     4b0:	6f 91       	pop	r22
     4b2:	5f 91       	pop	r21
     4b4:	4f 91       	pop	r20
     4b6:	3f 91       	pop	r19
     4b8:	2f 91       	pop	r18
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <_ZN14SoftwareSerialD1Ev>:
     4c4:	29 e3       	ldi	r18, 0x39	; 57
     4c6:	31 e0       	ldi	r19, 0x01	; 1
     4c8:	fc 01       	movw	r30, r24
     4ca:	31 83       	std	Z+1, r19	; 0x01
     4cc:	20 83       	st	Z, r18
     4ce:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_ZN14SoftwareSerial13stopListeningEv>
     4d2:	08 95       	ret

000004d4 <_ZN14SoftwareSerial5setTXEh>:
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	ec 01       	movw	r28, r24
     4dc:	16 2f       	mov	r17, r22
     4de:	6e 8d       	ldd	r22, Y+30	; 0x1e
     4e0:	66 95       	lsr	r22
     4e2:	61 70       	andi	r22, 0x01	; 1
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	68 27       	eor	r22, r24
     4e8:	81 2f       	mov	r24, r17
     4ea:	0e 94 51 04 	call	0x8a2	; 0x8a2 <digitalWrite>
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	81 2f       	mov	r24, r17
     4f2:	0e 94 12 04 	call	0x824	; 0x824 <pinMode>
     4f6:	61 2f       	mov	r22, r17
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	fb 01       	movw	r30, r22
     4fc:	e4 58       	subi	r30, 0x84	; 132
     4fe:	ff 4f       	sbci	r31, 0xFF	; 255
     500:	e4 91       	lpm	r30, Z
     502:	e8 8b       	std	Y+16, r30	; 0x10
     504:	fb 01       	movw	r30, r22
     506:	e0 57       	subi	r30, 0x70	; 112
     508:	ff 4f       	sbci	r31, 0xFF	; 255
     50a:	e4 91       	lpm	r30, Z
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e2 55       	subi	r30, 0x52	; 82
     514:	ff 4f       	sbci	r31, 0xFF	; 255
     516:	85 91       	lpm	r24, Z+
     518:	94 91       	lpm	r25, Z
     51a:	9a 8b       	std	Y+18, r25	; 0x12
     51c:	89 8b       	std	Y+17, r24	; 0x11
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	08 95       	ret

00000526 <_ZN14SoftwareSerial5setRXEh>:
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	ec 01       	movw	r28, r24
     52e:	16 2f       	mov	r17, r22
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	81 2f       	mov	r24, r17
     534:	0e 94 12 04 	call	0x824	; 0x824 <pinMode>
     538:	8e 8d       	ldd	r24, Y+30	; 0x1e
     53a:	81 fd       	sbrc	r24, 1
     53c:	04 c0       	rjmp	.+8      	; 0x546 <_ZN14SoftwareSerial5setRXEh+0x20>
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	81 2f       	mov	r24, r17
     542:	0e 94 51 04 	call	0x8a2	; 0x8a2 <digitalWrite>
     546:	1c 87       	std	Y+12, r17	; 0x0c
     548:	61 2f       	mov	r22, r17
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	fb 01       	movw	r30, r22
     54e:	e4 58       	subi	r30, 0x84	; 132
     550:	ff 4f       	sbci	r31, 0xFF	; 255
     552:	e4 91       	lpm	r30, Z
     554:	ed 87       	std	Y+13, r30	; 0x0d
     556:	fb 01       	movw	r30, r22
     558:	e0 57       	subi	r30, 0x70	; 112
     55a:	ff 4f       	sbci	r31, 0xFF	; 255
     55c:	e4 91       	lpm	r30, Z
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	ee 0f       	add	r30, r30
     562:	ff 1f       	adc	r31, r31
     564:	ec 55       	subi	r30, 0x5C	; 92
     566:	ff 4f       	sbci	r31, 0xFF	; 255
     568:	85 91       	lpm	r24, Z+
     56a:	94 91       	lpm	r25, Z
     56c:	9f 87       	std	Y+15, r25	; 0x0f
     56e:	8e 87       	std	Y+14, r24	; 0x0e
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	08 95       	ret

00000578 <_ZN14SoftwareSerialC1Ehhb>:
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
     580:	16 2f       	mov	r17, r22
     582:	1b 82       	std	Y+3, r1	; 0x03
     584:	1a 82       	std	Y+2, r1	; 0x02
     586:	88 ee       	ldi	r24, 0xE8	; 232
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	a0 e0       	ldi	r26, 0x00	; 0
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	8c 83       	std	Y+4, r24	; 0x04
     590:	9d 83       	std	Y+5, r25	; 0x05
     592:	ae 83       	std	Y+6, r26	; 0x06
     594:	bf 83       	std	Y+7, r27	; 0x07
     596:	89 e3       	ldi	r24, 0x39	; 57
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	99 83       	std	Y+1, r25	; 0x01
     59c:	88 83       	st	Y, r24
     59e:	1f 8a       	std	Y+23, r1	; 0x17
     5a0:	1e 8a       	std	Y+22, r1	; 0x16
     5a2:	19 8e       	std	Y+25, r1	; 0x19
     5a4:	18 8e       	std	Y+24, r1	; 0x18
     5a6:	1b 8e       	std	Y+27, r1	; 0x1b
     5a8:	1a 8e       	std	Y+26, r1	; 0x1a
     5aa:	1d 8e       	std	Y+29, r1	; 0x1d
     5ac:	1c 8e       	std	Y+28, r1	; 0x1c
     5ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5b0:	8e 7f       	andi	r24, 0xFE	; 254
     5b2:	20 fb       	bst	r18, 0
     5b4:	81 f9       	bld	r24, 1
     5b6:	8e 8f       	std	Y+30, r24	; 0x1e
     5b8:	64 2f       	mov	r22, r20
     5ba:	ce 01       	movw	r24, r28
     5bc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN14SoftwareSerial5setTXEh>
     5c0:	61 2f       	mov	r22, r17
     5c2:	ce 01       	movw	r24, r28
     5c4:	0e 94 93 02 	call	0x526	; 0x526 <_ZN14SoftwareSerial5setRXEh>
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	08 95       	ret

000005d0 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	ec 01       	movw	r28, r24
     5d6:	9a 01       	movw	r18, r20
     5d8:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     5da:	1b 8e       	std	Y+27, r1	; 0x1b
     5dc:	1a 8e       	std	Y+26, r1	; 0x1a
     5de:	19 8e       	std	Y+25, r1	; 0x19
     5e0:	18 8e       	std	Y+24, r1	; 0x18
     5e2:	1f 8a       	std	Y+23, r1	; 0x17
     5e4:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	79 e0       	ldi	r23, 0x09	; 9
     5ea:	8d e3       	ldi	r24, 0x3D	; 61
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__udivmodsi4>
     5f2:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     5f4:	24 30       	cpi	r18, 0x04	; 4
     5f6:	31 05       	cpc	r19, r1
     5f8:	18 f0       	brcs	.+6      	; 0x600 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
     5fa:	c9 01       	movw	r24, r18
     5fc:	03 97       	sbiw	r24, 0x03	; 3
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     604:	9d 8f       	std	Y+29, r25	; 0x1d
     606:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR((int8_t)_receivePin)) {
     608:	8c 85       	ldd	r24, Y+12	; 0x0c
     60a:	86 31       	cpi	r24, 0x16	; 22
     60c:	08 f0       	brcs	.+2      	; 0x610 <_ZN14SoftwareSerial5beginEl+0x40>
     60e:	41 c0       	rjmp	.+130    	; 0x692 <_ZN14SoftwareSerial5beginEl+0xc2>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     610:	b9 01       	movw	r22, r18
     612:	76 95       	lsr	r23
     614:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     616:	64 31       	cpi	r22, 0x14	; 20
     618:	71 05       	cpc	r23, r1
     61a:	18 f0       	brcs	.+6      	; 0x622 <_ZN14SoftwareSerial5beginEl+0x52>
    return num - sub;
     61c:	63 51       	subi	r22, 0x13	; 19
     61e:	71 09       	sbc	r23, r1
     620:	02 c0       	rjmp	.+4      	; 0x626 <_ZN14SoftwareSerial5beginEl+0x56>
  else
    return 1;
     622:	61 e0       	ldi	r22, 0x01	; 1
     624:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     626:	7f 8b       	std	Y+23, r23	; 0x17
     628:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     62a:	36 97       	sbiw	r30, 0x06	; 6
     62c:	20 f0       	brcs	.+8      	; 0x636 <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
     62e:	b9 01       	movw	r22, r18
     630:	65 50       	subi	r22, 0x05	; 5
     632:	71 09       	sbc	r23, r1
     634:	02 c0       	rjmp	.+4      	; 0x63a <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
     636:	61 e0       	ldi	r22, 0x01	; 1
     638:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     63a:	79 8f       	std	Y+25, r23	; 0x19
     63c:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     63e:	b9 01       	movw	r22, r18
     640:	66 0f       	add	r22, r22
     642:	77 1f       	adc	r23, r23
     644:	26 0f       	add	r18, r22
     646:	37 1f       	adc	r19, r23
     648:	36 95       	lsr	r19
     64a:	27 95       	ror	r18
     64c:	36 95       	lsr	r19
     64e:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     650:	2d 30       	cpi	r18, 0x0D	; 13
     652:	31 05       	cpc	r19, r1
     654:	10 f1       	brcs	.+68     	; 0x69a <_ZN14SoftwareSerial5beginEl+0xca>
    return num - sub;
     656:	2c 50       	subi	r18, 0x0C	; 12
     658:	31 09       	sbc	r19, r1
     65a:	21 c0       	rjmp	.+66     	; 0x69e <_ZN14SoftwareSerial5beginEl+0xce>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR((int8_t)_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	8e 30       	cpi	r24, 0x0E	; 14
     660:	08 f4       	brcc	.+2      	; 0x664 <_ZN14SoftwareSerial5beginEl+0x94>
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	01 c0       	rjmp	.+2      	; 0x66a <_ZN14SoftwareSerial5beginEl+0x9a>
     668:	88 0f       	add	r24, r24
     66a:	2a 95       	dec	r18
     66c:	ea f7       	brpl	.-6      	; 0x668 <_ZN14SoftwareSerial5beginEl+0x98>
     66e:	98 2b       	or	r25, r24
     670:	90 93 68 00 	sts	0x0068, r25
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     674:	9c 85       	ldd	r25, Y+12	; 0x0c
     676:	98 30       	cpi	r25, 0x08	; 8
     678:	d0 f0       	brcs	.+52     	; 0x6ae <_ZN14SoftwareSerial5beginEl+0xde>
     67a:	9e 30       	cpi	r25, 0x0E	; 14
     67c:	10 f1       	brcs	.+68     	; 0x6c2 <_ZN14SoftwareSerial5beginEl+0xf2>
     67e:	96 31       	cpi	r25, 0x16	; 22
     680:	58 f1       	brcs	.+86     	; 0x6d8 <_ZN14SoftwareSerial5beginEl+0x108>
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	2a c0       	rjmp	.+84     	; 0x6dc <_ZN14SoftwareSerial5beginEl+0x10c>
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     688:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     68a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     68c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <_ZN14SoftwareSerial5beginEl+0xbe>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     692:	ce 01       	movw	r24, r28
     694:	0e 94 89 01 	call	0x312	; 0x312 <_ZN14SoftwareSerial6listenEv>
     698:	2a c0       	rjmp	.+84     	; 0x6ee <_ZN14SoftwareSerial5beginEl+0x11e>

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
     69a:	21 e0       	ldi	r18, 0x01	; 1
     69c:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     69e:	3b 8f       	std	Y+27, r19	; 0x1b
     6a0:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR((int8_t)_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     6a2:	90 91 68 00 	lds	r25, 0x0068
     6a6:	88 30       	cpi	r24, 0x08	; 8
     6a8:	c8 f6       	brcc	.-78     	; 0x65c <_ZN14SoftwareSerial5beginEl+0x8c>
     6aa:	84 e0       	ldi	r24, 0x04	; 4
     6ac:	e0 cf       	rjmp	.-64     	; 0x66e <_ZN14SoftwareSerial5beginEl+0x9e>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     6ae:	2d e6       	ldi	r18, 0x6D	; 109
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	3c 8b       	std	Y+20, r19	; 0x14
     6b4:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <_ZN14SoftwareSerial5beginEl+0xec>
     6ba:	88 0f       	add	r24, r24
     6bc:	9a 95       	dec	r25
     6be:	ea f7       	brpl	.-6      	; 0x6ba <_ZN14SoftwareSerial5beginEl+0xea>
     6c0:	e3 cf       	rjmp	.-58     	; 0x688 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR((int8_t)_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     6c2:	2b e6       	ldi	r18, 0x6B	; 107
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	3c 8b       	std	Y+20, r19	; 0x14
     6c8:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     6ca:	98 50       	subi	r25, 0x08	; 8
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <_ZN14SoftwareSerial5beginEl+0x102>
     6d0:	88 0f       	add	r24, r24
     6d2:	9a 95       	dec	r25
     6d4:	ea f7       	brpl	.-6      	; 0x6d0 <_ZN14SoftwareSerial5beginEl+0x100>
     6d6:	d8 cf       	rjmp	.-80     	; 0x688 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR((int8_t)_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     6d8:	2c e6       	ldi	r18, 0x6C	; 108
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	3c 8b       	std	Y+20, r19	; 0x14
     6de:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     6e0:	9e 50       	subi	r25, 0x0E	; 14
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <_ZN14SoftwareSerial5beginEl+0x118>
     6e6:	88 0f       	add	r24, r24
     6e8:	9a 95       	dec	r25
     6ea:	ea f7       	brpl	.-6      	; 0x6e6 <_ZN14SoftwareSerial5beginEl+0x116>
     6ec:	cd cf       	rjmp	.-102    	; 0x688 <_ZN14SoftwareSerial5beginEl+0xb8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	2f 93       	push	r18
     700:	3f 93       	push	r19
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
     70a:	80 91 8d 01 	lds	r24, 0x018D
     70e:	90 91 8e 01 	lds	r25, 0x018E
     712:	a0 91 8f 01 	lds	r26, 0x018F
     716:	b0 91 90 01 	lds	r27, 0x0190
     71a:	30 91 8c 01 	lds	r19, 0x018C
     71e:	23 e0       	ldi	r18, 0x03	; 3
     720:	23 0f       	add	r18, r19
     722:	2d 37       	cpi	r18, 0x7D	; 125
     724:	20 f4       	brcc	.+8      	; 0x72e <__vector_16+0x3a>
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	a1 1d       	adc	r26, r1
     72a:	b1 1d       	adc	r27, r1
     72c:	05 c0       	rjmp	.+10     	; 0x738 <__vector_16+0x44>
     72e:	26 e8       	ldi	r18, 0x86	; 134
     730:	23 0f       	add	r18, r19
     732:	02 96       	adiw	r24, 0x02	; 2
     734:	a1 1d       	adc	r26, r1
     736:	b1 1d       	adc	r27, r1
     738:	20 93 8c 01 	sts	0x018C, r18
     73c:	80 93 8d 01 	sts	0x018D, r24
     740:	90 93 8e 01 	sts	0x018E, r25
     744:	a0 93 8f 01 	sts	0x018F, r26
     748:	b0 93 90 01 	sts	0x0190, r27
     74c:	80 91 91 01 	lds	r24, 0x0191
     750:	90 91 92 01 	lds	r25, 0x0192
     754:	a0 91 93 01 	lds	r26, 0x0193
     758:	b0 91 94 01 	lds	r27, 0x0194
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	a1 1d       	adc	r26, r1
     760:	b1 1d       	adc	r27, r1
     762:	80 93 91 01 	sts	0x0191, r24
     766:	90 93 92 01 	sts	0x0192, r25
     76a:	a0 93 93 01 	sts	0x0193, r26
     76e:	b0 93 94 01 	sts	0x0194, r27
     772:	bf 91       	pop	r27
     774:	af 91       	pop	r26
     776:	9f 91       	pop	r25
     778:	8f 91       	pop	r24
     77a:	3f 91       	pop	r19
     77c:	2f 91       	pop	r18
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <millis>:
     788:	2f b7       	in	r18, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	60 91 8d 01 	lds	r22, 0x018D
     790:	70 91 8e 01 	lds	r23, 0x018E
     794:	80 91 8f 01 	lds	r24, 0x018F
     798:	90 91 90 01 	lds	r25, 0x0190
     79c:	2f bf       	out	0x3f, r18	; 63
     79e:	08 95       	ret

000007a0 <init>:
	// return = 4 cycles
}

void init()
{
	sei();
     7a0:	78 94       	sei
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     7a2:	84 b5       	in	r24, 0x24	; 36
     7a4:	82 60       	ori	r24, 0x02	; 2
     7a6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     7a8:	84 b5       	in	r24, 0x24	; 36
     7aa:	81 60       	ori	r24, 0x01	; 1
     7ac:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     7ae:	85 b5       	in	r24, 0x25	; 37
     7b0:	82 60       	ori	r24, 0x02	; 2
     7b2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     7b4:	85 b5       	in	r24, 0x25	; 37
     7b6:	81 60       	ori	r24, 0x01	; 1
     7b8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     7ba:	ee e6       	ldi	r30, 0x6E	; 110
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	81 60       	ori	r24, 0x01	; 1
     7c2:	80 83       	st	Z, r24
     7c4:	08 95       	ret

000007c6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     7c6:	83 30       	cpi	r24, 0x03	; 3
     7c8:	69 f0       	breq	.+26     	; 0x7e4 <turnOffPWM+0x1e>
     7ca:	28 f4       	brcc	.+10     	; 0x7d6 <turnOffPWM+0x10>
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	b1 f0       	breq	.+44     	; 0x7fc <turnOffPWM+0x36>
     7d0:	82 30       	cpi	r24, 0x02	; 2
     7d2:	c1 f0       	breq	.+48     	; 0x804 <turnOffPWM+0x3e>
     7d4:	08 95       	ret
     7d6:	87 30       	cpi	r24, 0x07	; 7
     7d8:	c9 f0       	breq	.+50     	; 0x80c <turnOffPWM+0x46>
     7da:	88 30       	cpi	r24, 0x08	; 8
     7dc:	e9 f0       	breq	.+58     	; 0x818 <turnOffPWM+0x52>
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	01 f5       	brne	.+64     	; 0x822 <turnOffPWM+0x5c>
     7e2:	06 c0       	rjmp	.+12     	; 0x7f0 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     7e4:	e0 e8       	ldi	r30, 0x80	; 128
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 81       	ld	r24, Z
     7ea:	8f 77       	andi	r24, 0x7F	; 127
     7ec:	80 83       	st	Z, r24
     7ee:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     7f0:	e0 e8       	ldi	r30, 0x80	; 128
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	8f 7d       	andi	r24, 0xDF	; 223
     7f8:	80 83       	st	Z, r24
     7fa:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     7fc:	84 b5       	in	r24, 0x24	; 36
     7fe:	8f 77       	andi	r24, 0x7F	; 127
     800:	84 bd       	out	0x24, r24	; 36
     802:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     804:	84 b5       	in	r24, 0x24	; 36
     806:	8f 7d       	andi	r24, 0xDF	; 223
     808:	84 bd       	out	0x24, r24	; 36
     80a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     80c:	e0 eb       	ldi	r30, 0xB0	; 176
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	8f 77       	andi	r24, 0x7F	; 127
     814:	80 83       	st	Z, r24
     816:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     818:	e0 eb       	ldi	r30, 0xB0	; 176
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	8f 7d       	andi	r24, 0xDF	; 223
     820:	80 83       	st	Z, r24
     822:	08 95       	ret

00000824 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	fc 01       	movw	r30, r24
     82c:	e4 58       	subi	r30, 0x84	; 132
     82e:	ff 4f       	sbci	r31, 0xFF	; 255
     830:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     832:	fc 01       	movw	r30, r24
     834:	e0 57       	subi	r30, 0x70	; 112
     836:	ff 4f       	sbci	r31, 0xFF	; 255
     838:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     83a:	88 23       	and	r24, r24
     83c:	79 f1       	breq	.+94     	; 0x89c <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	fc 01       	movw	r30, r24
     846:	e8 54       	subi	r30, 0x48	; 72
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	a5 91       	lpm	r26, Z+
     84c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     84e:	fc 01       	movw	r30, r24
     850:	e2 55       	subi	r30, 0x52	; 82
     852:	ff 4f       	sbci	r31, 0xFF	; 255
     854:	c5 91       	lpm	r28, Z+
     856:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     858:	61 11       	cpse	r22, r1
     85a:	0c c0       	rjmp	.+24     	; 0x874 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     85c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     85e:	f8 94       	cli
		*reg &= ~bit;
     860:	8c 91       	ld	r24, X
     862:	e2 2f       	mov	r30, r18
     864:	e0 95       	com	r30
     866:	8e 23       	and	r24, r30
     868:	8c 93       	st	X, r24
		*out &= ~bit;
     86a:	28 81       	ld	r18, Y
     86c:	e2 23       	and	r30, r18
     86e:	e8 83       	st	Y, r30
		SREG = oldSREG;
     870:	9f bf       	out	0x3f, r25	; 63
     872:	14 c0       	rjmp	.+40     	; 0x89c <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     874:	62 30       	cpi	r22, 0x02	; 2
     876:	61 f4       	brne	.+24     	; 0x890 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     878:	9f b7       	in	r25, 0x3f	; 63
                cli();
     87a:	f8 94       	cli
		*reg &= ~bit;
     87c:	3c 91       	ld	r19, X
     87e:	82 2f       	mov	r24, r18
     880:	80 95       	com	r24
     882:	83 23       	and	r24, r19
     884:	8c 93       	st	X, r24
		*out |= bit;
     886:	e8 81       	ld	r30, Y
     888:	e2 2b       	or	r30, r18
     88a:	e8 83       	st	Y, r30
		SREG = oldSREG;
     88c:	9f bf       	out	0x3f, r25	; 63
     88e:	06 c0       	rjmp	.+12     	; 0x89c <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     890:	8f b7       	in	r24, 0x3f	; 63
                cli();
     892:	f8 94       	cli
		*reg |= bit;
     894:	ec 91       	ld	r30, X
     896:	e2 2b       	or	r30, r18
     898:	ec 93       	st	X, r30
		SREG = oldSREG;
     89a:	8f bf       	out	0x3f, r24	; 63
	}
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     8a8:	28 2f       	mov	r18, r24
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	f9 01       	movw	r30, r18
     8ae:	e8 59       	subi	r30, 0x98	; 152
     8b0:	ff 4f       	sbci	r31, 0xFF	; 255
     8b2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     8b4:	f9 01       	movw	r30, r18
     8b6:	e4 58       	subi	r30, 0x84	; 132
     8b8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ba:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     8bc:	f9 01       	movw	r30, r18
     8be:	e0 57       	subi	r30, 0x70	; 112
     8c0:	ff 4f       	sbci	r31, 0xFF	; 255
     8c2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     8c4:	cc 23       	and	r28, r28
     8c6:	d1 f0       	breq	.+52     	; 0x8fc <digitalWrite+0x5a>
     8c8:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     8ca:	81 11       	cpse	r24, r1
     8cc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <turnOffPWM>

	out = portOutputRegister(port);
     8d0:	ec 2f       	mov	r30, r28
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	e2 55       	subi	r30, 0x52	; 82
     8da:	ff 4f       	sbci	r31, 0xFF	; 255
     8dc:	a5 91       	lpm	r26, Z+
     8de:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     8e0:	8f b7       	in	r24, 0x3f	; 63
	cli();
     8e2:	f8 94       	cli

	if (val == LOW) {
     8e4:	d1 11       	cpse	r29, r1
     8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <digitalWrite+0x52>
		*out &= ~bit;
     8e8:	9c 91       	ld	r25, X
     8ea:	e1 2f       	mov	r30, r17
     8ec:	e0 95       	com	r30
     8ee:	e9 23       	and	r30, r25
     8f0:	ec 93       	st	X, r30
     8f2:	03 c0       	rjmp	.+6      	; 0x8fa <digitalWrite+0x58>
	} else {
		*out |= bit;
     8f4:	ec 91       	ld	r30, X
     8f6:	e1 2b       	or	r30, r17
     8f8:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     8fa:	8f bf       	out	0x3f, r24	; 63
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	08 95       	ret

00000904 <_Z13pneumaticInitv>:

//Viewing from connector side
//tip122 pins:  C4, B5, C3, C5, 12V
#if (!BUDDHA_SLAVE)
	uint8_t pneumatic_pin[4] = {PIN_A4, LED_BUILTIN, PIN_A3, PIN_A5};
	void pneumaticInit(){
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	c0 e0       	ldi	r28, 0x00	; 0
     912:	d1 e0       	ldi	r29, 0x01	; 1
     914:	0f 2e       	mov	r0, r31
     916:	f4 e0       	ldi	r31, 0x04	; 4
     918:	ef 2e       	mov	r14, r31
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	ff 2e       	mov	r15, r31
     91e:	f0 2d       	mov	r31, r0
     920:	8e 01       	movw	r16, r28
		for (uint8_t i=0; i<4; i++){
			pinMode(pneumatic_pin[i], OUTPUT);
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	89 91       	ld	r24, Y+
     926:	0e 94 12 04 	call	0x824	; 0x824 <pinMode>
			digitalWrite(pneumatic_pin[i], LOW);
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	f8 01       	movw	r30, r16
     92e:	80 81       	ld	r24, Z
     930:	0e 94 51 04 	call	0x8a2	; 0x8a2 <digitalWrite>
//Viewing from connector side
//tip122 pins:  C4, B5, C3, C5, 12V
#if (!BUDDHA_SLAVE)
	uint8_t pneumatic_pin[4] = {PIN_A4, LED_BUILTIN, PIN_A3, PIN_A5};
	void pneumaticInit(){
		for (uint8_t i=0; i<4; i++){
     934:	ce 15       	cp	r28, r14
     936:	df 05       	cpc	r29, r15
     938:	99 f7       	brne	.-26     	; 0x920 <_Z13pneumaticInitv+0x1c>
			pinMode(pneumatic_pin[i], OUTPUT);
			digitalWrite(pneumatic_pin[i], LOW);
		}
	}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	08 95       	ret

00000948 <_Z7oscInitv>:
void oscInit(){
	
	uint16_t compare_value = (((F_CPU /100) / 1024) - 1);  //10ms
	
	//CTC, PS:1024 
	TCCR1A |= ((0<<WGM11) | (0<<WGM10));
     948:	e0 e8       	ldi	r30, 0x80	; 128
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	80 83       	st	Z, r24
	TCCR1B |= ((0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10));
     950:	e1 e8       	ldi	r30, 0x81	; 129
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	8d 60       	ori	r24, 0x0D	; 13
     958:	80 83       	st	Z, r24
	
	//Output Compare Match A interrupt enable
	TIMSK1 |= ((0<<OCIE1B) | (1<<OCIE1A) | (0<<TOIE1));
     95a:	ef e6       	ldi	r30, 0x6F	; 111
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	82 60       	ori	r24, 0x02	; 2
     962:	80 83       	st	Z, r24
	
	//8 bit compare value
	OCR1AL = uint8_t(compare_value);
     964:	8b e9       	ldi	r24, 0x9B	; 155
     966:	80 93 88 00 	sts	0x0088, r24
	OCR1AH = (compare_value<<8);
     96a:	10 92 89 00 	sts	0x0089, r1
	
	sei();
     96e:	78 94       	sei
     970:	08 95       	ret

00000972 <__vector_11>:
	
}

ISR(TIMER1_COMPA_vect){
     972:	1f 92       	push	r1
     974:	0f 92       	push	r0
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	0f 92       	push	r0
     97a:	11 24       	eor	r1, r1
     97c:	0f 93       	push	r16
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	4f 93       	push	r20
     984:	5f 93       	push	r21
     986:	6f 93       	push	r22
     988:	7f 93       	push	r23
     98a:	8f 93       	push	r24
     98c:	9f 93       	push	r25
     98e:	af 93       	push	r26
     990:	bf 93       	push	r27
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
	osc_counter++;
     996:	80 91 27 02 	lds	r24, 0x0227
     99a:	90 91 28 02 	lds	r25, 0x0228
     99e:	a0 91 29 02 	lds	r26, 0x0229
     9a2:	b0 91 2a 02 	lds	r27, 0x022A
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	a1 1d       	adc	r26, r1
     9aa:	b1 1d       	adc	r27, r1
     9ac:	80 93 27 02 	sts	0x0227, r24
     9b0:	90 93 28 02 	sts	0x0228, r25
     9b4:	a0 93 29 02 	sts	0x0229, r26
     9b8:	b0 93 2a 02 	sts	0x022A, r27
		
	//Repeats every 'TASK_INTERVAL' sec(s)  
	if (osc_counter == TASK_INTERVAL * 100){
     9bc:	80 91 27 02 	lds	r24, 0x0227
     9c0:	90 91 28 02 	lds	r25, 0x0228
     9c4:	a0 91 29 02 	lds	r26, 0x0229
     9c8:	b0 91 2a 02 	lds	r27, 0x022A
     9cc:	84 36       	cpi	r24, 0x64	; 100
     9ce:	91 05       	cpc	r25, r1
     9d0:	a1 05       	cpc	r26, r1
     9d2:	b1 05       	cpc	r27, r1
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <__vector_11+0x66>
     9d6:	6d c0       	rjmp	.+218    	; 0xab2 <__vector_11+0x140>
		osc_counter = 0;
     9d8:	10 92 27 02 	sts	0x0227, r1
     9dc:	10 92 28 02 	sts	0x0228, r1
     9e0:	10 92 29 02 	sts	0x0229, r1
     9e4:	10 92 2a 02 	sts	0x022A, r1
		PORTD ^= (1<<PIND7);
     9e8:	8b b1       	in	r24, 0x0b	; 11
     9ea:	80 58       	subi	r24, 0x80	; 128
     9ec:	8b b9       	out	0x0b, r24	; 11
	
		//Start speaking & set_pos must not be 0 
		if ((osc_switch == 1) & (osc_open_pos>0) & (osc_close_pos>0)){
     9ee:	20 91 25 02 	lds	r18, 0x0225
     9f2:	40 91 21 02 	lds	r20, 0x0221
     9f6:	50 91 22 02 	lds	r21, 0x0222
     9fa:	60 91 23 02 	lds	r22, 0x0223
     9fe:	70 91 24 02 	lds	r23, 0x0224
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	45 2b       	or	r20, r21
     a06:	09 f4       	brne	.+2      	; 0xa0a <__vector_11+0x98>
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	21 30       	cpi	r18, 0x01	; 1
     a0e:	09 f0       	breq	.+2      	; 0xa12 <__vector_11+0xa0>
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	89 23       	and	r24, r25
     a14:	59 f1       	breq	.+86     	; 0xa6c <__vector_11+0xfa>
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	67 2b       	or	r22, r23
     a1a:	09 f4       	brne	.+2      	; 0xa1e <__vector_11+0xac>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	88 23       	and	r24, r24
     a20:	29 f1       	breq	.+74     	; 0xa6c <__vector_11+0xfa>
			//close
			if (!osc_state_flag){
     a22:	80 91 26 02 	lds	r24, 0x0226
     a26:	81 11       	cpse	r24, r1
     a28:	0d c0       	rjmp	.+26     	; 0xa44 <__vector_11+0xd2>
				servo.WritePos(1, osc_close_pos, SERVO_VELOCITY);
     a2a:	40 91 23 02 	lds	r20, 0x0223
     a2e:	50 91 24 02 	lds	r21, 0x0224
     a32:	01 e0       	ldi	r16, 0x01	; 1
     a34:	2f ef       	ldi	r18, 0xFF	; 255
     a36:	33 e0       	ldi	r19, 0x03	; 3
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	8b e2       	ldi	r24, 0x2B	; 43
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7SCServo8WritePosEhiih>
     a42:	0c c0       	rjmp	.+24     	; 0xa5c <__vector_11+0xea>
			}
			//open
			else{
				servo.WritePos(1, osc_open_pos, SERVO_VELOCITY);
     a44:	40 91 21 02 	lds	r20, 0x0221
     a48:	50 91 22 02 	lds	r21, 0x0222
     a4c:	01 e0       	ldi	r16, 0x01	; 1
     a4e:	2f ef       	ldi	r18, 0xFF	; 255
     a50:	33 e0       	ldi	r19, 0x03	; 3
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	8b e2       	ldi	r24, 0x2B	; 43
     a56:	92 e0       	ldi	r25, 0x02	; 2
     a58:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7SCServo8WritePosEhiih>
			}
			osc_state_flag = !(osc_state_flag);
     a5c:	90 91 26 02 	lds	r25, 0x0226
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	91 11       	cpse	r25, r1
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	80 93 26 02 	sts	0x0226, r24
     a6a:	23 c0       	rjmp	.+70     	; 0xab2 <__vector_11+0x140>
		}
		
		//Stop speaking
		else if((osc_switch == 2) & (osc_close_pos>0)){
     a6c:	90 91 25 02 	lds	r25, 0x0225
     a70:	20 91 23 02 	lds	r18, 0x0223
     a74:	30 91 24 02 	lds	r19, 0x0224
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	23 2b       	or	r18, r19
     a7c:	09 f4       	brne	.+2      	; 0xa80 <__vector_11+0x10e>
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	88 23       	and	r24, r24
     a82:	b9 f0       	breq	.+46     	; 0xab2 <__vector_11+0x140>
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	92 30       	cpi	r25, 0x02	; 2
     a88:	09 f0       	breq	.+2      	; 0xa8c <__vector_11+0x11a>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	88 23       	and	r24, r24
     a8e:	89 f0       	breq	.+34     	; 0xab2 <__vector_11+0x140>
			servo.WritePos(1, osc_close_pos, SERVO_VELOCITY);	
     a90:	40 91 23 02 	lds	r20, 0x0223
     a94:	50 91 24 02 	lds	r21, 0x0224
     a98:	01 e0       	ldi	r16, 0x01	; 1
     a9a:	2f ef       	ldi	r18, 0xFF	; 255
     a9c:	33 e0       	ldi	r19, 0x03	; 3
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	8b e2       	ldi	r24, 0x2B	; 43
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7SCServo8WritePosEhiih>
			osc_state_flag = 1; //Open next time
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 26 02 	sts	0x0226, r24
			osc_switch = 0;     //Switch off oscillator		
     aae:	10 92 25 02 	sts	0x0225, r1
		}
	}
}
     ab2:	ff 91       	pop	r31
     ab4:	ef 91       	pop	r30
     ab6:	bf 91       	pop	r27
     ab8:	af 91       	pop	r26
     aba:	9f 91       	pop	r25
     abc:	8f 91       	pop	r24
     abe:	7f 91       	pop	r23
     ac0:	6f 91       	pop	r22
     ac2:	5f 91       	pop	r21
     ac4:	4f 91       	pop	r20
     ac6:	3f 91       	pop	r19
     ac8:	2f 91       	pop	r18
     aca:	0f 91       	pop	r16
     acc:	0f 90       	pop	r0
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	0f 90       	pop	r0
     ad2:	1f 90       	pop	r1
     ad4:	18 95       	reti

00000ad6 <main>:
static USHORT   usRegInputStart = REG_INPUT_START;
static USHORT   usRegOutputBuf[REG_OUTPUT_NREGS];
static USHORT   usRegInputBuf[REG_INPUT_NREGS];

int main(void)
{
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	00 d0       	rcall	.+0      	; 0xadc <main+0x6>
     adc:	1f 92       	push	r1
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
	//Indicator init
	DDRB |= (1<<PINB0);
     ae2:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1<<PIND7);
     ae4:	57 9a       	sbi	0x0a, 7	; 10
		
	//Timer initializations 
	init();    //for millis();
     ae6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <init>
	oscInit(); //for speak function
     aea:	0e 94 a4 04 	call	0x948	; 0x948 <_Z7oscInitv>
 
    //scServo init
	servo.init(57600);
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	51 ee       	ldi	r21, 0xE1	; 225
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	8b e2       	ldi	r24, 0x2B	; 43
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_ZN7SCServo4initEl>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     afe:	2f ef       	ldi	r18, 0xFF	; 255
     b00:	89 e6       	ldi	r24, 0x69	; 105
     b02:	98 e1       	ldi	r25, 0x18	; 24
     b04:	21 50       	subi	r18, 0x01	; 1
     b06:	80 40       	sbci	r24, 0x00	; 0
     b08:	90 40       	sbci	r25, 0x00	; 0
     b0a:	e1 f7       	brne	.-8      	; 0xb04 <main+0x2e>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <main+0x38>
     b0e:	00 00       	nop
	_delay_ms(500);
	
	//DDR init for pneumatic pins
	pneumaticInit();
     b10:	0e 94 82 04 	call	0x904	; 0x904 <_Z13pneumaticInitv>
	
	//Enable torque for possible motors
	for(uint8_t i=1; i<=5; i++){
     b14:	11 e0       	ldi	r17, 0x01	; 1
		servo.EnableTorque(i, 1);
     b16:	21 e0       	ldi	r18, 0x01	; 1
     b18:	41 e0       	ldi	r20, 0x01	; 1
     b1a:	61 2f       	mov	r22, r17
     b1c:	8b e2       	ldi	r24, 0x2B	; 43
     b1e:	92 e0       	ldi	r25, 0x02	; 2
     b20:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <_ZN7SCServo12EnableTorqueEhhh>
     b24:	2f ef       	ldi	r18, 0xFF	; 255
     b26:	89 e6       	ldi	r24, 0x69	; 105
     b28:	98 e1       	ldi	r25, 0x18	; 24
     b2a:	21 50       	subi	r18, 0x01	; 1
     b2c:	80 40       	sbci	r24, 0x00	; 0
     b2e:	90 40       	sbci	r25, 0x00	; 0
     b30:	e1 f7       	brne	.-8      	; 0xb2a <main+0x54>
     b32:	00 c0       	rjmp	.+0      	; 0xb34 <main+0x5e>
     b34:	00 00       	nop
	
	//DDR init for pneumatic pins
	pneumaticInit();
	
	//Enable torque for possible motors
	for(uint8_t i=1; i<=5; i++){
     b36:	1f 5f       	subi	r17, 0xFF	; 255
     b38:	16 30       	cpi	r17, 0x06	; 6
     b3a:	69 f7       	brne	.-38     	; 0xb16 <main+0x40>
		servo.EnableTorque(i, 1);
		_delay_ms(500);	
	}
	
	//Modbus initialization
	const UCHAR ucSlaveID[] = {0xAA, 0xBB, 0xCC};
     b3c:	8a ea       	ldi	r24, 0xAA	; 170
     b3e:	89 83       	std	Y+1, r24	; 0x01
     b40:	8b eb       	ldi	r24, 0xBB	; 187
     b42:	8a 83       	std	Y+2, r24	; 0x02
     b44:	8c ec       	ldi	r24, 0xCC	; 204
     b46:	8b 83       	std	Y+3, r24	; 0x03
	eMBInit(MB_ASCII, SLAVE_ADDRESS, 0, 9600, MB_PAR_ODD);
     b48:	ee 24       	eor	r14, r14
     b4a:	e3 94       	inc	r14
     b4c:	00 e8       	ldi	r16, 0x80	; 128
     b4e:	15 e2       	ldi	r17, 0x25	; 37
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	67 e4       	ldi	r22, 0x47	; 71
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eMBInit>
	eMBSetSlaveID(0x34, TRUE, ucSlaveID, 3);
     b5e:	23 e0       	ldi	r18, 0x03	; 3
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	ae 01       	movw	r20, r28
     b64:	4f 5f       	subi	r20, 0xFF	; 255
     b66:	5f 4f       	sbci	r21, 0xFF	; 255
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	84 e3       	ldi	r24, 0x34	; 52
     b6c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <eMBSetSlaveID>
	eMBEnable();
     b70:	0e 94 30 0c 	call	0x1860	; 0x1860 <eMBEnable>
	
	while (1)
	{
		(void )eMBPoll( );
     b74:	0e 94 3f 0c 	call	0x187e	; 0x187e <eMBPoll>
	}
     b78:	fd cf       	rjmp	.-6      	; 0xb74 <main+0x9e>

00000b7a <eMBRegInputCB>:
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
	int             iRegIndex;

	if( ( usAddress >= REG_INPUT_START )
     b7a:	68 3e       	cpi	r22, 0xE8	; 232
     b7c:	23 e0       	ldi	r18, 0x03	; 3
     b7e:	72 07       	cpc	r23, r18
     b80:	90 f0       	brcs	.+36     	; 0xba6 <eMBRegInputCB+0x2c>
	&& ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
     b82:	64 0f       	add	r22, r20
     b84:	75 1f       	adc	r23, r21
     b86:	6d 3e       	cpi	r22, 0xED	; 237
     b88:	73 40       	sbci	r23, 0x03	; 3
     b8a:	78 f4       	brcc	.+30     	; 0xbaa <eMBRegInputCB+0x30>
	{
		iRegIndex = ( int )( usAddress - usRegInputStart );
		while( usNRegs > 0 )
     b8c:	41 15       	cp	r20, r1
     b8e:	51 05       	cpc	r21, r1
     b90:	71 f0       	breq	.+28     	; 0xbae <eMBRegInputCB+0x34>
		{
			*pucRegBuffer++ =
			( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
     b92:	fc 01       	movw	r30, r24
     b94:	10 82       	st	Z, r1
     b96:	02 96       	adiw	r24, 0x02	; 2
     b98:	31 96       	adiw	r30, 0x01	; 1
			*pucRegBuffer++ =
			( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
     b9a:	10 82       	st	Z, r1
			iRegIndex++;
			usNRegs--;
     b9c:	41 50       	subi	r20, 0x01	; 1
     b9e:	51 09       	sbc	r21, r1

	if( ( usAddress >= REG_INPUT_START )
	&& ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
	{
		iRegIndex = ( int )( usAddress - usRegInputStart );
		while( usNRegs > 0 )
     ba0:	c1 f7       	brne	.-16     	; 0xb92 <eMBRegInputCB+0x18>
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	08 95       	ret
			usNRegs--;
		}
	}
	else
	{
		eStatus = MB_ENOREG;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	08 95       	ret
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	08 95       	ret
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     bae:	80 e0       	ldi	r24, 0x00	; 0
	{
		eStatus = MB_ENOREG;
	}

	return eStatus;
}
     bb0:	08 95       	ret

00000bb2 <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
     bb2:	2f 92       	push	r2
     bb4:	3f 92       	push	r3
     bb6:	4f 92       	push	r4
     bb8:	5f 92       	push	r5
     bba:	6f 92       	push	r6
     bbc:	7f 92       	push	r7
     bbe:	8f 92       	push	r8
     bc0:	9f 92       	push	r9
     bc2:	af 92       	push	r10
     bc4:	bf 92       	push	r11
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	ec 01       	movw	r28, r24
     bd8:	6a 01       	movw	r12, r20
	eMBErrorCode    eStatus = MB_ENOERR;
	int             iRegIndex;

	if( ( usAddress >= REG_OUTPUT_START )
     bda:	68 3e       	cpi	r22, 0xE8	; 232
     bdc:	33 e0       	ldi	r19, 0x03	; 3
     bde:	73 07       	cpc	r23, r19
     be0:	08 f4       	brcc	.+2      	; 0xbe4 <eMBRegHoldingCB+0x32>
     be2:	9b c0       	rjmp	.+310    	; 0xd1a <eMBRegHoldingCB+0x168>
	&& ( usAddress + usNRegs <= REG_OUTPUT_START + REG_OUTPUT_NREGS ) )
     be4:	cb 01       	movw	r24, r22
     be6:	84 0f       	add	r24, r20
     be8:	95 1f       	adc	r25, r21
     bea:	8f 32       	cpi	r24, 0x2F	; 47
     bec:	94 40       	sbci	r25, 0x04	; 4
     bee:	08 f0       	brcs	.+2      	; 0xbf2 <eMBRegHoldingCB+0x40>
     bf0:	96 c0       	rjmp	.+300    	; 0xd1e <eMBRegHoldingCB+0x16c>
	{
		iRegIndex = ( int )( usAddress - usRegOutputStart );
     bf2:	5b 01       	movw	r10, r22
     bf4:	b8 ee       	ldi	r27, 0xE8	; 232
     bf6:	ab 1a       	sub	r10, r27
     bf8:	b3 e0       	ldi	r27, 0x03	; 3
     bfa:	bb 0a       	sbc	r11, r27
		if(eMode==MB_REG_READ){
     bfc:	21 11       	cpse	r18, r1
     bfe:	19 c0       	rjmp	.+50     	; 0xc32 <eMBRegHoldingCB+0x80>
			while( usNRegs > 0 )
     c00:	45 2b       	or	r20, r21
     c02:	09 f4       	brne	.+2      	; 0xc06 <eMBRegHoldingCB+0x54>
     c04:	8e c0       	rjmp	.+284    	; 0xd22 <eMBRegHoldingCB+0x170>
     c06:	66 0f       	add	r22, r22
     c08:	77 1f       	adc	r23, r23
     c0a:	fb 01       	movw	r30, r22
     c0c:	eb 53       	subi	r30, 0x3B	; 59
     c0e:	f6 40       	sbci	r31, 0x06	; 6
     c10:	cc 0c       	add	r12, r12
     c12:	dd 1c       	adc	r13, r13
     c14:	cc 0e       	add	r12, r28
     c16:	dd 1e       	adc	r13, r29
			{
				*pucRegBuffer++ =
				( unsigned char )( usRegOutputBuf[iRegIndex] >> 8 );
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01
     c1c:	32 96       	adiw	r30, 0x02	; 2
     c1e:	98 83       	st	Y, r25
     c20:	22 96       	adiw	r28, 0x02	; 2
     c22:	de 01       	movw	r26, r28
     c24:	11 97       	sbiw	r26, 0x01	; 1
				*pucRegBuffer++ =
				( unsigned char )( usRegOutputBuf[iRegIndex] & 0xFF );
     c26:	8c 93       	st	X, r24
	if( ( usAddress >= REG_OUTPUT_START )
	&& ( usAddress + usNRegs <= REG_OUTPUT_START + REG_OUTPUT_NREGS ) )
	{
		iRegIndex = ( int )( usAddress - usRegOutputStart );
		if(eMode==MB_REG_READ){
			while( usNRegs > 0 )
     c28:	cc 16       	cp	r12, r28
     c2a:	dd 06       	cpc	r13, r29
     c2c:	a9 f7       	brne	.-22     	; 0xc18 <eMBRegHoldingCB+0x66>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	7d c0       	rjmp	.+250    	; 0xd2c <eMBRegHoldingCB+0x17a>
				( unsigned char )( usRegOutputBuf[iRegIndex] & 0xFF );
				iRegIndex++;
				usNRegs--;
			}
		}
		else if(eMode==MB_REG_WRITE){
     c32:	21 30       	cpi	r18, 0x01	; 1
     c34:	09 f0       	breq	.+2      	; 0xc38 <eMBRegHoldingCB+0x86>
     c36:	77 c0       	rjmp	.+238    	; 0xd26 <eMBRegHoldingCB+0x174>
			while( usNRegs > 0 )
     c38:	45 2b       	or	r20, r21
     c3a:	09 f4       	brne	.+2      	; 0xc3e <eMBRegHoldingCB+0x8c>
     c3c:	76 c0       	rjmp	.+236    	; 0xd2a <eMBRegHoldingCB+0x178>
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	fb 01       	movw	r30, r22
     c44:	eb 53       	subi	r30, 0x3B	; 59
     c46:	f6 40       	sbci	r31, 0x06	; 6
     c48:	7f 01       	movw	r14, r30
					osc_switch = 2; //Stop oscillation
				}
				
				//Pneumatic command
				else if(iRegIndex == PNEUMATIC_ADDR){
					PORTB ^= (1<<PINB0);
     c4a:	11 e0       	ldi	r17, 0x01	; 1
					uint16_t pneu_ID = usRegOutputBuf[iRegIndex] - 1;
					digitalWrite(pneumatic_pin[pneu_ID], usRegOutputBuf[iRegIndex+1]);	
     c4c:	0f 2e       	mov	r0, r31
     c4e:	f1 e0       	ldi	r31, 0x01	; 1
     c50:	6f 2e       	mov	r6, r31
     c52:	f2 e0       	ldi	r31, 0x02	; 2
     c54:	7f 2e       	mov	r7, r31
     c56:	f0 2d       	mov	r31, r0
     c58:	0f 2e       	mov	r0, r31
     c5a:	ff ef       	ldi	r31, 0xFF	; 255
     c5c:	8f 2e       	mov	r8, r31
     c5e:	f1 e0       	ldi	r31, 0x01	; 1
     c60:	9f 2e       	mov	r9, r31
     c62:	f0 2d       	mov	r31, r0
				}
				
				//Speak start command
				else if(iRegIndex == MOUTH_START_ADDR){
					osc_close_pos = (int)usRegOutputBuf[iRegIndex];   //up
					osc_open_pos  = (int)usRegOutputBuf[iRegIndex+1]; //down
     c64:	0f 2e       	mov	r0, r31
     c66:	ff e0       	ldi	r31, 0x0F	; 15
     c68:	4f 2e       	mov	r4, r31
     c6a:	f2 e0       	ldi	r31, 0x02	; 2
     c6c:	5f 2e       	mov	r5, r31
     c6e:	f0 2d       	mov	r31, r0
				
				usRegOutputBuf[iRegIndex] = (((uint16_t)upper)<<8) | ((uint16_t)lower);
				
				//Servo position command
				if(iRegIndex == SERVO_ADDR){
					servo.WritePos(usRegOutputBuf[iRegIndex], (int)usRegOutputBuf[iRegIndex+1],  SERVO_VELOCITY);
     c70:	0f 2e       	mov	r0, r31
     c72:	f9 e0       	ldi	r31, 0x09	; 9
     c74:	2f 2e       	mov	r2, r31
     c76:	f2 e0       	ldi	r31, 0x02	; 2
     c78:	3f 2e       	mov	r3, r31
     c7a:	f0 2d       	mov	r31, r0
			}
		}
		else if(eMode==MB_REG_WRITE){
			while( usNRegs > 0 )
			{
				UCHAR upper = *pucRegBuffer++;
     c7c:	88 81       	ld	r24, Y
     c7e:	22 96       	adiw	r28, 0x02	; 2
     c80:	fe 01       	movw	r30, r28
     c82:	31 97       	sbiw	r30, 0x01	; 1
				UCHAR lower = *pucRegBuffer++;
				
				usRegOutputBuf[iRegIndex] = (((uint16_t)upper)<<8) | ((uint16_t)lower);
     c84:	60 81       	ld	r22, Z
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	78 2b       	or	r23, r24
     c8a:	d7 01       	movw	r26, r14
     c8c:	6d 93       	st	X+, r22
     c8e:	7d 93       	st	X+, r23
     c90:	7d 01       	movw	r14, r26
				
				//Servo position command
				if(iRegIndex == SERVO_ADDR){
     c92:	b9 e3       	ldi	r27, 0x39	; 57
     c94:	ab 16       	cp	r10, r27
     c96:	b1 04       	cpc	r11, r1
     c98:	59 f4       	brne	.+22     	; 0xcb0 <eMBRegHoldingCB+0xfe>
					servo.WritePos(usRegOutputBuf[iRegIndex], (int)usRegOutputBuf[iRegIndex+1],  SERVO_VELOCITY);
     c9a:	f1 01       	movw	r30, r2
     c9c:	40 81       	ld	r20, Z
     c9e:	51 81       	ldd	r21, Z+1	; 0x01
     ca0:	01 2f       	mov	r16, r17
     ca2:	2f ef       	ldi	r18, 0xFF	; 255
     ca4:	33 e0       	ldi	r19, 0x03	; 3
     ca6:	8b e2       	ldi	r24, 0x2B	; 43
     ca8:	92 e0       	ldi	r25, 0x02	; 2
     caa:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7SCServo8WritePosEhiih>
     cae:	2b c0       	rjmp	.+86     	; 0xd06 <eMBRegHoldingCB+0x154>
				}
				
				//Speak start command
				else if(iRegIndex == MOUTH_START_ADDR){
     cb0:	fc e3       	ldi	r31, 0x3C	; 60
     cb2:	af 16       	cp	r10, r31
     cb4:	b1 04       	cpc	r11, r1
     cb6:	71 f4       	brne	.+28     	; 0xcd4 <eMBRegHoldingCB+0x122>
					osc_close_pos = (int)usRegOutputBuf[iRegIndex];   //up
     cb8:	70 93 24 02 	sts	0x0224, r23
     cbc:	60 93 23 02 	sts	0x0223, r22
					osc_open_pos  = (int)usRegOutputBuf[iRegIndex+1]; //down
     cc0:	d2 01       	movw	r26, r4
     cc2:	8d 91       	ld	r24, X+
     cc4:	9c 91       	ld	r25, X
     cc6:	90 93 22 02 	sts	0x0222, r25
     cca:	80 93 21 02 	sts	0x0221, r24
					osc_switch = 1; //Start oscillation		
     cce:	10 93 25 02 	sts	0x0225, r17
     cd2:	19 c0       	rjmp	.+50     	; 0xd06 <eMBRegHoldingCB+0x154>
				}
				
				//Speak stop command
				else if(iRegIndex == MOUTH_STOP_ADDR){
     cd4:	bf e3       	ldi	r27, 0x3F	; 63
     cd6:	ab 16       	cp	r10, r27
     cd8:	b1 04       	cpc	r11, r1
     cda:	21 f4       	brne	.+8      	; 0xce4 <eMBRegHoldingCB+0x132>
					osc_switch = 2; //Stop oscillation
     cdc:	e2 e0       	ldi	r30, 0x02	; 2
     cde:	e0 93 25 02 	sts	0x0225, r30
     ce2:	11 c0       	rjmp	.+34     	; 0xd06 <eMBRegHoldingCB+0x154>
				}
				
				//Pneumatic command
				else if(iRegIndex == PNEUMATIC_ADDR){
     ce4:	f5 e3       	ldi	r31, 0x35	; 53
     ce6:	af 16       	cp	r10, r31
     ce8:	b1 04       	cpc	r11, r1
     cea:	69 f4       	brne	.+26     	; 0xd06 <eMBRegHoldingCB+0x154>
					PORTB ^= (1<<PINB0);
     cec:	85 b1       	in	r24, 0x05	; 5
     cee:	81 27       	eor	r24, r17
     cf0:	85 b9       	out	0x05, r24	; 5
					uint16_t pneu_ID = usRegOutputBuf[iRegIndex] - 1;
					digitalWrite(pneumatic_pin[pneu_ID], usRegOutputBuf[iRegIndex+1]);	
     cf2:	d4 01       	movw	r26, r8
     cf4:	ed 91       	ld	r30, X+
     cf6:	fc 91       	ld	r31, X
     cf8:	e1 50       	subi	r30, 0x01	; 1
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	d3 01       	movw	r26, r6
     cfe:	6c 91       	ld	r22, X
     d00:	80 81       	ld	r24, Z
     d02:	0e 94 51 04 	call	0x8a2	; 0x8a2 <digitalWrite>
				}
				iRegIndex++;
     d06:	bf ef       	ldi	r27, 0xFF	; 255
     d08:	ab 1a       	sub	r10, r27
     d0a:	bb 0a       	sbc	r11, r27
				usNRegs--;
     d0c:	e1 e0       	ldi	r30, 0x01	; 1
     d0e:	ce 1a       	sub	r12, r30
     d10:	d1 08       	sbc	r13, r1
				iRegIndex++;
				usNRegs--;
			}
		}
		else if(eMode==MB_REG_WRITE){
			while( usNRegs > 0 )
     d12:	09 f0       	breq	.+2      	; 0xd16 <eMBRegHoldingCB+0x164>
     d14:	b3 cf       	rjmp	.-154    	; 0xc7c <eMBRegHoldingCB+0xca>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	09 c0       	rjmp	.+18     	; 0xd2c <eMBRegHoldingCB+0x17a>
			}
		}
	} 
	else
	{
		eStatus = MB_ENOREG;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	07 c0       	rjmp	.+14     	; 0xd2c <eMBRegHoldingCB+0x17a>
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <eMBRegHoldingCB+0x17a>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <eMBRegHoldingCB+0x17a>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <eMBRegHoldingCB+0x17a>
     d2a:	80 e0       	ldi	r24, 0x00	; 0
	{
		eStatus = MB_ENOREG;
	}

	return eStatus;
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	df 90       	pop	r13
     d3a:	cf 90       	pop	r12
     d3c:	bf 90       	pop	r11
     d3e:	af 90       	pop	r10
     d40:	9f 90       	pop	r9
     d42:	8f 90       	pop	r8
     d44:	7f 90       	pop	r7
     d46:	6f 90       	pop	r6
     d48:	5f 90       	pop	r5
     d4a:	4f 90       	pop	r4
     d4c:	3f 90       	pop	r3
     d4e:	2f 90       	pop	r2
     d50:	08 95       	ret

00000d52 <eMBRegCoilsCB>:
eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
eMBRegisterMode eMode )
{
	return MB_ENOREG;
}
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	08 95       	ret

00000d56 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
	return MB_ENOREG;
}
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	08 95       	ret

00000d5a <_GLOBAL__sub_I_pneumatic_pin>:
#include <avr/interrupt.h>

#include "../slaveConfig.h"
#include "scServo.h"

SCServo servo;
     d5a:	8b e2       	ldi	r24, 0x2B	; 43
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7SCServoC1Ev>
     d62:	08 95       	ret

00000d64 <_GLOBAL__sub_D_pneumatic_pin>:
#define		u16		unsigned short
#define		s16		short
#define		u32		unsigned long
#define		s32		long

class SCServo{
     d64:	8b e2       	ldi	r24, 0x2B	; 43
     d66:	92 e0       	ldi	r25, 0x02	; 2
     d68:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_ZN14SoftwareSerialD1Ev>
     d6c:	08 95       	ret

00000d6e <eMBASCIIInit>:
static volatile UCHAR ucMBLFCharacter;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
     d6e:	0f 93       	push	r16
     d70:	86 2f       	mov	r24, r22
     d72:	ba 01       	movw	r22, r20
     d74:	a9 01       	movw	r20, r18
    eMBErrorCode    eStatus = MB_ENOERR;
    ( void )ucSlaveAddress;
    
    ENTER_CRITICAL_SECTION(  );
     d76:	f8 94       	cli
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;
     d78:	9a e0       	ldi	r25, 0x0A	; 10
     d7a:	90 93 4a 02 	sts	0x024A, r25

    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
     d7e:	28 e0       	ldi	r18, 0x08	; 8
     d80:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <xMBPortSerialInit>
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	41 f4       	brne	.+16     	; 0xd98 <eMBASCIIInit+0x2a>
    {
        eStatus = MB_EPORTERR;
    }
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
     d88:	80 e2       	ldi	r24, 0x20	; 32
     d8a:	9e e4       	ldi	r25, 0x4E	; 78
     d8c:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xMBPortTimersInit>
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	21 f0       	breq	.+8      	; 0xd9c <eMBASCIIInit+0x2e>
    {
        eStatus = MB_EPORTERR;
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <eMBASCIIInit+0x30>
    ENTER_CRITICAL_SECTION(  );
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;

    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <eMBASCIIInit+0x30>

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     d9c:	80 e0       	ldi	r24, 0x00	; 0
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
    {
        eStatus = MB_EPORTERR;
    }

    EXIT_CRITICAL_SECTION(  );
     d9e:	78 94       	sei

    return eStatus;
}
     da0:	0f 91       	pop	r16
     da2:	08 95       	ret

00000da4 <eMBASCIIStart>:

void
eMBASCIIStart( void )
{
    ENTER_CRITICAL_SECTION(  );
     da4:	f8 94       	cli
    vMBPortSerialEnable( TRUE, FALSE );
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <vMBPortSerialEnable>
    eRcvState = STATE_RX_IDLE;
     dae:	10 92 52 02 	sts	0x0252, r1
    EXIT_CRITICAL_SECTION(  );
     db2:	78 94       	sei

    /* No special startup required for ASCII. */
    ( void )xMBPortEventPost( EV_READY );
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <xMBPortEventPost>
     dba:	08 95       	ret

00000dbc <eMBASCIIStop>:
}

void
eMBASCIIStop( void )
{
    ENTER_CRITICAL_SECTION(  );
     dbc:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
     dc6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
     dca:	78 94       	sei
     dcc:	08 95       	ret

00000dce <eMBASCIIReceive>:
}

eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	ec 01       	movw	r28, r24
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
     dd4:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
     dd6:	20 91 50 02 	lds	r18, 0x0250
     dda:	30 91 51 02 	lds	r19, 0x0251
     dde:	23 30       	cpi	r18, 0x03	; 3
     de0:	31 05       	cpc	r19, r1
     de2:	20 f1       	brcs	.+72     	; 0xe2c <eMBASCIIReceive+0x5e>
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
     de4:	a0 91 50 02 	lds	r26, 0x0250
     de8:	b0 91 51 02 	lds	r27, 0x0251
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     dec:	10 97       	sbiw	r26, 0x00	; 0
     dee:	61 f0       	breq	.+24     	; 0xe08 <eMBASCIIReceive+0x3a>
     df0:	e7 e9       	ldi	r30, 0x97	; 151
     df2:	f2 e0       	ldi	r31, 0x02	; 2
     df4:	a9 56       	subi	r26, 0x69	; 105
     df6:	bd 4f       	sbci	r27, 0xFD	; 253
     df8:	90 e0       	ldi	r25, 0x00	; 0
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
     dfa:	21 91       	ld	r18, Z+
     dfc:	92 0f       	add	r25, r18
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     dfe:	ea 17       	cp	r30, r26
     e00:	fb 07       	cpc	r31, r27
     e02:	d9 f7       	brne	.-10     	; 0xdfa <eMBASCIIReceive+0x2c>
    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
     e04:	91 11       	cpse	r25, r1
     e06:	14 c0       	rjmp	.+40     	; 0xe30 <eMBASCIIReceive+0x62>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucASCIIBuf[MB_SER_PDU_ADDR_OFF];
     e08:	80 91 97 02 	lds	r24, 0x0297
     e0c:	88 83       	st	Y, r24

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );
     e0e:	80 91 50 02 	lds	r24, 0x0250
     e12:	90 91 51 02 	lds	r25, 0x0251
     e16:	02 97       	sbiw	r24, 0x02	; 2
     e18:	fa 01       	movw	r30, r20
     e1a:	91 83       	std	Z+1, r25	; 0x01
     e1c:	80 83       	st	Z, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
     e1e:	88 e9       	ldi	r24, 0x98	; 152
     e20:	92 e0       	ldi	r25, 0x02	; 2
     e22:	fb 01       	movw	r30, r22
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	80 83       	st	Z, r24
}

eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     e28:	80 e0       	ldi	r24, 0x00	; 0
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <eMBASCIIReceive+0x64>
    }
    else
    {
        eStatus = MB_EIO;
     e2c:	85 e0       	ldi	r24, 0x05	; 5
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <eMBASCIIReceive+0x64>
     e30:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
     e32:	78 94       	sei
    return eStatus;
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <eMBASCIISend>:
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR           usLRC;

    ENTER_CRITICAL_SECTION(  );
     e3a:	f8 94       	cli
    /* Check if the receiver is still in idle state. If not we where too
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
     e3c:	90 91 52 02 	lds	r25, 0x0252
     e40:	91 11       	cpse	r25, r1
     e42:	42 c0       	rjmp	.+132    	; 0xec8 <eMBASCIISend+0x8e>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
     e44:	fb 01       	movw	r30, r22
     e46:	31 97       	sbiw	r30, 0x01	; 1
     e48:	f0 93 4e 02 	sts	0x024E, r31
     e4c:	e0 93 4d 02 	sts	0x024D, r30
        usSndBufferCount = 1;
     e50:	21 e0       	ldi	r18, 0x01	; 1
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	30 93 4c 02 	sts	0x024C, r19
     e58:	20 93 4b 02 	sts	0x024B, r18

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
     e5c:	80 83       	st	Z, r24
        usSndBufferCount += usLength;
     e5e:	80 91 4b 02 	lds	r24, 0x024B
     e62:	90 91 4c 02 	lds	r25, 0x024C
     e66:	48 0f       	add	r20, r24
     e68:	59 1f       	adc	r21, r25
     e6a:	50 93 4c 02 	sts	0x024C, r21
     e6e:	40 93 4b 02 	sts	0x024B, r20

        /* Calculate LRC checksum for Modbus-Serial-Line-PDU. */
        usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
     e72:	20 91 4b 02 	lds	r18, 0x024B
     e76:	30 91 4c 02 	lds	r19, 0x024C
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     e7a:	c9 01       	movw	r24, r18
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	23 2b       	or	r18, r19
     e80:	49 f0       	breq	.+18     	; 0xe94 <eMBASCIISend+0x5a>
     e82:	68 0f       	add	r22, r24
     e84:	79 1f       	adc	r23, r25
     e86:	80 e0       	ldi	r24, 0x00	; 0
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
     e88:	91 91       	ld	r25, Z+
     e8a:	89 0f       	add	r24, r25
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     e8c:	e6 17       	cp	r30, r22
     e8e:	f7 07       	cpc	r31, r23
     e90:	d9 f7       	brne	.-10     	; 0xe88 <eMBASCIISend+0x4e>
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <eMBASCIISend+0x5c>


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */
     e94:	80 e0       	ldi	r24, 0x00	; 0
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
    }

    /* Return twos complement */
    ucLRC = ( UCHAR ) ( -( ( CHAR ) ucLRC ) );
     e96:	81 95       	neg	r24
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
        usSndBufferCount += usLength;

        /* Calculate LRC checksum for Modbus-Serial-Line-PDU. */
        usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
        ucASCIIBuf[usSndBufferCount++] = usLRC;
     e98:	20 91 4b 02 	lds	r18, 0x024B
     e9c:	30 91 4c 02 	lds	r19, 0x024C
     ea0:	a9 01       	movw	r20, r18
     ea2:	4f 5f       	subi	r20, 0xFF	; 255
     ea4:	5f 4f       	sbci	r21, 0xFF	; 255
     ea6:	50 93 4c 02 	sts	0x024C, r21
     eaa:	40 93 4b 02 	sts	0x024B, r20
     eae:	f9 01       	movw	r30, r18
     eb0:	e9 56       	subi	r30, 0x69	; 105
     eb2:	fd 4f       	sbci	r31, 0xFD	; 253
     eb4:	80 83       	st	Z, r24

        /* Activate the transmitter. */
        eSndState = STATE_TX_START;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	80 93 53 02 	sts	0x0253, r24
        vMBPortSerialEnable( FALSE, TRUE );
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <vMBPortSerialEnable>
}

eMBErrorCode
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <eMBASCIISend+0x90>
        eSndState = STATE_TX_START;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
     ec8:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
     eca:	78 94       	sei
    return eStatus;
}
     ecc:	08 95       	ret

00000ece <xMBASCIIReceiveFSM>:

BOOL
xMBASCIIReceiveFSM( void )
{
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	1f 92       	push	r1
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;
    UCHAR           ucResult;

    assert( eSndState == STATE_TX_IDLE );

    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <xMBPortSerialGetByte>
    switch ( eRcvState )
     ee0:	80 91 52 02 	lds	r24, 0x0252
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	31 f0       	breq	.+12     	; 0xef4 <xMBASCIIReceiveFSM+0x26>
     ee8:	08 f4       	brcc	.+2      	; 0xeec <xMBASCIIReceiveFSM+0x1e>
     eea:	7d c0       	rjmp	.+250    	; 0xfe6 <xMBASCIIReceiveFSM+0x118>
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	09 f4       	brne	.+2      	; 0xef2 <xMBASCIIReceiveFSM+0x24>
     ef0:	5a c0       	rjmp	.+180    	; 0xfa6 <xMBASCIIReceiveFSM+0xd8>
     ef2:	89 c0       	rjmp	.+274    	; 0x1006 <xMBASCIIReceiveFSM+0x138>
         * block. Other characters are part of the data block and their
         * ASCII value is converted back to a binary representation.
         */
    case STATE_RX_RCV:
        /* Enable timer for character timeout. */
        vMBPortTimersEnable(  );
     ef4:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <vMBPortTimersEnable>
        if( ucByte == ':' )
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	8a 33       	cpi	r24, 0x3A	; 58
     efc:	41 f4       	brne	.+16     	; 0xf0e <xMBASCIIReceiveFSM+0x40>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
     efe:	10 92 4f 02 	sts	0x024F, r1
            usRcvBufferPos = 0;
     f02:	10 92 51 02 	sts	0x0251, r1
     f06:	10 92 50 02 	sts	0x0250, r1
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	81 c0       	rjmp	.+258    	; 0x1010 <xMBASCIIReceiveFSM+0x142>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
            usRcvBufferPos = 0;
        }
        else if( ucByte == MB_ASCII_DEFAULT_CR )
     f0e:	8d 30       	cpi	r24, 0x0D	; 13
     f10:	29 f4       	brne	.+10     	; 0xf1c <xMBASCIIReceiveFSM+0x4e>
        {
            eRcvState = STATE_RX_WAIT_EOF;
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	80 93 52 02 	sts	0x0252, r24
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	7a c0       	rjmp	.+244    	; 0x1010 <xMBASCIIReceiveFSM+0x142>


static          UCHAR
prvucMBCHAR2BIN( UCHAR ucCharacter )
{
    if( ( ucCharacter >= '0' ) && ( ucCharacter <= '9' ) )
     f1c:	90 ed       	ldi	r25, 0xD0	; 208
     f1e:	98 0f       	add	r25, r24
     f20:	9a 30       	cpi	r25, 0x0A	; 10
     f22:	40 f0       	brcs	.+16     	; 0xf34 <xMBASCIIReceiveFSM+0x66>
    {
        return ( UCHAR )( ucCharacter - '0' );
    }
    else if( ( ucCharacter >= 'A' ) && ( ucCharacter <= 'F' ) )
     f24:	9f eb       	ldi	r25, 0xBF	; 191
     f26:	98 0f       	add	r25, r24
     f28:	96 30       	cpi	r25, 0x06	; 6
     f2a:	18 f4       	brcc	.+6      	; 0xf32 <xMBASCIIReceiveFSM+0x64>
    {
        return ( UCHAR )( ucCharacter - 'A' + 0x0A );
     f2c:	99 ec       	ldi	r25, 0xC9	; 201
     f2e:	98 0f       	add	r25, r24
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <xMBASCIIReceiveFSM+0x66>
    }
    else
    {
        return 0xFF;
     f32:	9f ef       	ldi	r25, 0xFF	; 255
            eRcvState = STATE_RX_WAIT_EOF;
        }
        else
        {
            ucResult = prvucMBCHAR2BIN( ucByte );
            switch ( eBytePos )
     f34:	80 91 4f 02 	lds	r24, 0x024F
     f38:	88 23       	and	r24, r24
     f3a:	19 f0       	breq	.+6      	; 0xf42 <xMBASCIIReceiveFSM+0x74>
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	e9 f0       	breq	.+58     	; 0xf7a <xMBASCIIReceiveFSM+0xac>
     f40:	64 c0       	rjmp	.+200    	; 0x100a <xMBASCIIReceiveFSM+0x13c>
            {
                /* High nibble of the byte comes first. We check for
                 * a buffer overflow here. */
            case BYTE_HIGH_NIBBLE:
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
     f42:	20 91 50 02 	lds	r18, 0x0250
     f46:	30 91 51 02 	lds	r19, 0x0251
     f4a:	2f 3f       	cpi	r18, 0xFF	; 255
     f4c:	31 05       	cpc	r19, r1
     f4e:	09 f0       	breq	.+2      	; 0xf52 <xMBASCIIReceiveFSM+0x84>
     f50:	70 f4       	brcc	.+28     	; 0xf6e <xMBASCIIReceiveFSM+0xa0>
                {
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
     f52:	e0 91 50 02 	lds	r30, 0x0250
     f56:	f0 91 51 02 	lds	r31, 0x0251
     f5a:	e9 56       	subi	r30, 0x69	; 105
     f5c:	fd 4f       	sbci	r31, 0xFD	; 253
     f5e:	92 95       	swap	r25
     f60:	90 7f       	andi	r25, 0xF0	; 240
     f62:	90 83       	st	Z, r25
                    eBytePos = BYTE_LOW_NIBBLE;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	80 93 4f 02 	sts	0x024F, r24
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
            case BYTE_HIGH_NIBBLE:
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
                {
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
                    eBytePos = BYTE_LOW_NIBBLE;
                    break;
     f6c:	51 c0       	rjmp	.+162    	; 0x1010 <xMBASCIIReceiveFSM+0x142>
                }
                else
                {
                    /* not handled in Modbus specification but seems
                     * a resonable implementation. */
                    eRcvState = STATE_RX_IDLE;
     f6e:	10 92 52 02 	sts	0x0252, r1
                    /* Disable previously activated timer because of error state. */
                    vMBPortTimersDisable(  );
     f72:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <vMBPortTimersDisable>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     f76:	80 e0       	ldi	r24, 0x00	; 0
                     * a resonable implementation. */
                    eRcvState = STATE_RX_IDLE;
                    /* Disable previously activated timer because of error state. */
                    vMBPortTimersDisable(  );
                }
                break;
     f78:	4b c0       	rjmp	.+150    	; 0x1010 <xMBASCIIReceiveFSM+0x142>

            case BYTE_LOW_NIBBLE:
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
     f7a:	e0 91 50 02 	lds	r30, 0x0250
     f7e:	f0 91 51 02 	lds	r31, 0x0251
     f82:	e9 56       	subi	r30, 0x69	; 105
     f84:	fd 4f       	sbci	r31, 0xFD	; 253
     f86:	80 81       	ld	r24, Z
     f88:	98 2b       	or	r25, r24
     f8a:	90 83       	st	Z, r25
                usRcvBufferPos++;
     f8c:	80 91 50 02 	lds	r24, 0x0250
     f90:	90 91 51 02 	lds	r25, 0x0251
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	90 93 51 02 	sts	0x0251, r25
     f9a:	80 93 50 02 	sts	0x0250, r24
                eBytePos = BYTE_HIGH_NIBBLE;
     f9e:	10 92 4f 02 	sts	0x024F, r1
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     fa2:	80 e0       	ldi	r24, 0x00	; 0

            case BYTE_LOW_NIBBLE:
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
                usRcvBufferPos++;
                eBytePos = BYTE_HIGH_NIBBLE;
                break;
     fa4:	35 c0       	rjmp	.+106    	; 0x1010 <xMBASCIIReceiveFSM+0x142>
            }
        }
        break;

    case STATE_RX_WAIT_EOF:
        if( ucByte == ucMBLFCharacter )
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	90 91 4a 02 	lds	r25, 0x024A
     fac:	89 13       	cpse	r24, r25
     fae:	08 c0       	rjmp	.+16     	; 0xfc0 <xMBASCIIReceiveFSM+0xf2>
        {
            /* Disable character timeout timer because all characters are
             * received. */
            vMBPortTimersDisable(  );
     fb0:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <vMBPortTimersDisable>
            /* Receiver is again in idle state. */
            eRcvState = STATE_RX_IDLE;
     fb4:	10 92 52 02 	sts	0x0252, r1

            /* Notify the caller of eMBASCIIReceive that a new frame
             * was received. */
            xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <xMBPortEventPost>
     fbe:	28 c0       	rjmp	.+80     	; 0x1010 <xMBASCIIReceiveFSM+0x142>
        }
        else if( ucByte == ':' )
     fc0:	8a 33       	cpi	r24, 0x3A	; 58
     fc2:	69 f4       	brne	.+26     	; 0xfde <xMBASCIIReceiveFSM+0x110>
        {
            /* Empty receive buffer and back to receive state. */
            eBytePos = BYTE_HIGH_NIBBLE;
     fc4:	10 92 4f 02 	sts	0x024F, r1
            usRcvBufferPos = 0;
     fc8:	10 92 51 02 	sts	0x0251, r1
     fcc:	10 92 50 02 	sts	0x0250, r1
            eRcvState = STATE_RX_RCV;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	80 93 52 02 	sts	0x0252, r24

            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
     fd6:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <vMBPortTimersEnable>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	19 c0       	rjmp	.+50     	; 0x1010 <xMBASCIIReceiveFSM+0x142>
            vMBPortTimersEnable(  );
        }
        else
        {
            /* Frame is not okay. Delete entire frame. */
            eRcvState = STATE_RX_IDLE;
     fde:	10 92 52 02 	sts	0x0252, r1
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	15 c0       	rjmp	.+42     	; 0x1010 <xMBASCIIReceiveFSM+0x142>
            eRcvState = STATE_RX_IDLE;
        }
        break;

    case STATE_RX_IDLE:
        if( ucByte == ':' )
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	8a 33       	cpi	r24, 0x3A	; 58
     fea:	89 f4       	brne	.+34     	; 0x100e <xMBASCIIReceiveFSM+0x140>
        {
            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
     fec:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <vMBPortTimersEnable>
            /* Reset the input buffers to store the frame. */
            usRcvBufferPos = 0;;
     ff0:	10 92 51 02 	sts	0x0251, r1
     ff4:	10 92 50 02 	sts	0x0250, r1
            eBytePos = BYTE_HIGH_NIBBLE;
     ff8:	10 92 4f 02 	sts	0x024F, r1
            eRcvState = STATE_RX_RCV;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	80 93 52 02 	sts	0x0252, r24
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	05 c0       	rjmp	.+10     	; 0x1010 <xMBASCIIReceiveFSM+0x142>
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <xMBASCIIReceiveFSM+0x142>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <xMBASCIIReceiveFSM+0x142>
    100e:	80 e0       	ldi	r24, 0x00	; 0
        }
        break;
    }

    return xNeedPoll;
}
    1010:	0f 90       	pop	r0
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	08 95       	ret

00001018 <xMBASCIITransmitFSM>:

BOOL
xMBASCIITransmitFSM( void )
{
    1018:	cf 93       	push	r28
    BOOL            xNeedPoll = FALSE;
    UCHAR           ucByte;

    assert( eRcvState == STATE_RX_IDLE );
    switch ( eSndState )
    101a:	80 91 53 02 	lds	r24, 0x0253
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	c1 f0       	breq	.+48     	; 0x1052 <xMBASCIITransmitFSM+0x3a>
    1022:	30 f4       	brcc	.+12     	; 0x1030 <xMBASCIITransmitFSM+0x18>
    1024:	88 23       	and	r24, r24
    1026:	09 f4       	brne	.+2      	; 0x102a <xMBASCIITransmitFSM+0x12>
    1028:	82 c0       	rjmp	.+260    	; 0x112e <xMBASCIITransmitFSM+0x116>
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	41 f0       	breq	.+16     	; 0x103e <xMBASCIITransmitFSM+0x26>
    102e:	85 c0       	rjmp	.+266    	; 0x113a <xMBASCIITransmitFSM+0x122>
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	09 f4       	brne	.+2      	; 0x1036 <xMBASCIITransmitFSM+0x1e>
    1034:	66 c0       	rjmp	.+204    	; 0x1102 <xMBASCIITransmitFSM+0xea>
    1036:	84 30       	cpi	r24, 0x04	; 4
    1038:	09 f4       	brne	.+2      	; 0x103c <xMBASCIITransmitFSM+0x24>
    103a:	6c c0       	rjmp	.+216    	; 0x1114 <xMBASCIITransmitFSM+0xfc>
    103c:	7e c0       	rjmp	.+252    	; 0x113a <xMBASCIITransmitFSM+0x122>
    {
        /* Start of transmission. The start of a frame is defined by sending
         * the character ':'. */
    case STATE_TX_START:
        ucByte = ':';
        xMBPortSerialPutByte( ( CHAR )ucByte );
    103e:	8a e3       	ldi	r24, 0x3A	; 58
    1040:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <xMBPortSerialPutByte>
        eSndState = STATE_TX_DATA;
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	80 93 53 02 	sts	0x0253, r24
        eBytePos = BYTE_HIGH_NIBBLE;
    104a:	10 92 4f 02 	sts	0x024F, r1
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    104e:	c0 e0       	ldi	r28, 0x00	; 0
    case STATE_TX_START:
        ucByte = ':';
        xMBPortSerialPutByte( ( CHAR )ucByte );
        eSndState = STATE_TX_DATA;
        eBytePos = BYTE_HIGH_NIBBLE;
        break;
    1050:	77 c0       	rjmp	.+238    	; 0x1140 <xMBASCIITransmitFSM+0x128>
        /* Send the data block. Each data byte is encoded as a character hex
         * stream with the high nibble sent first and the low nibble sent
         * last. If all data bytes are exhausted we send a '\r' character
         * to end the transmission. */
    case STATE_TX_DATA:
        if( usSndBufferCount > 0 )
    1052:	80 91 4b 02 	lds	r24, 0x024B
    1056:	90 91 4c 02 	lds	r25, 0x024C
    105a:	89 2b       	or	r24, r25
    105c:	09 f4       	brne	.+2      	; 0x1060 <xMBASCIITransmitFSM+0x48>
    105e:	49 c0       	rjmp	.+146    	; 0x10f2 <xMBASCIITransmitFSM+0xda>
        {
            switch ( eBytePos )
    1060:	80 91 4f 02 	lds	r24, 0x024F
    1064:	88 23       	and	r24, r24
    1066:	19 f0       	breq	.+6      	; 0x106e <xMBASCIITransmitFSM+0x56>
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	d1 f0       	breq	.+52     	; 0x10a0 <xMBASCIITransmitFSM+0x88>
    106c:	68 c0       	rjmp	.+208    	; 0x113e <xMBASCIITransmitFSM+0x126>
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
    106e:	e0 91 4d 02 	lds	r30, 0x024D
    1072:	f0 91 4e 02 	lds	r31, 0x024E
    1076:	80 81       	ld	r24, Z
    1078:	82 95       	swap	r24
    107a:	8f 70       	andi	r24, 0x0F	; 15
}

static          UCHAR
prvucMBBIN2CHAR( UCHAR ucByte )
{
    if( ucByte <= 0x09 )
    107c:	8a 30       	cpi	r24, 0x0A	; 10
    107e:	10 f4       	brcc	.+4      	; 0x1084 <xMBASCIITransmitFSM+0x6c>
    {
        return ( UCHAR )( '0' + ucByte );
    1080:	80 5d       	subi	r24, 0xD0	; 208
    1082:	07 c0       	rjmp	.+14     	; 0x1092 <xMBASCIITransmitFSM+0x7a>
    }
    else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
    1084:	96 ef       	ldi	r25, 0xF6	; 246
    1086:	98 0f       	add	r25, r24
    1088:	96 30       	cpi	r25, 0x06	; 6
    108a:	10 f4       	brcc	.+4      	; 0x1090 <xMBASCIITransmitFSM+0x78>
    {
        return ( UCHAR )( ucByte - 0x0A + 'A' );
    108c:	89 5c       	subi	r24, 0xC9	; 201
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <xMBASCIITransmitFSM+0x7a>
    else
    {
        /* Programming error. */
        assert( 0 );
    }
    return '0';
    1090:	80 e3       	ldi	r24, 0x30	; 48
        {
            switch ( eBytePos )
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
                xMBPortSerialPutByte( ( CHAR ) ucByte );
    1092:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <xMBPortSerialPutByte>
                eBytePos = BYTE_LOW_NIBBLE;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 4f 02 	sts	0x024F, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    109c:	c0 e0       	ldi	r28, 0x00	; 0
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
                xMBPortSerialPutByte( ( CHAR ) ucByte );
                eBytePos = BYTE_LOW_NIBBLE;
                break;
    109e:	50 c0       	rjmp	.+160    	; 0x1140 <xMBASCIITransmitFSM+0x128>

            case BYTE_LOW_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
    10a0:	e0 91 4d 02 	lds	r30, 0x024D
    10a4:	f0 91 4e 02 	lds	r31, 0x024E
    10a8:	80 81       	ld	r24, Z
    10aa:	8f 70       	andi	r24, 0x0F	; 15
}

static          UCHAR
prvucMBBIN2CHAR( UCHAR ucByte )
{
    if( ucByte <= 0x09 )
    10ac:	8a 30       	cpi	r24, 0x0A	; 10
    10ae:	10 f4       	brcc	.+4      	; 0x10b4 <xMBASCIITransmitFSM+0x9c>
    {
        return ( UCHAR )( '0' + ucByte );
    10b0:	80 5d       	subi	r24, 0xD0	; 208
    10b2:	07 c0       	rjmp	.+14     	; 0x10c2 <xMBASCIITransmitFSM+0xaa>
    }
    else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
    10b4:	96 ef       	ldi	r25, 0xF6	; 246
    10b6:	98 0f       	add	r25, r24
    10b8:	96 30       	cpi	r25, 0x06	; 6
    10ba:	10 f4       	brcc	.+4      	; 0x10c0 <xMBASCIITransmitFSM+0xa8>
    {
        return ( UCHAR )( ucByte - 0x0A + 'A' );
    10bc:	89 5c       	subi	r24, 0xC9	; 201
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <xMBASCIITransmitFSM+0xaa>
    else
    {
        /* Programming error. */
        assert( 0 );
    }
    return '0';
    10c0:	80 e3       	ldi	r24, 0x30	; 48
                eBytePos = BYTE_LOW_NIBBLE;
                break;

            case BYTE_LOW_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
                xMBPortSerialPutByte( ( CHAR )ucByte );
    10c2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <xMBPortSerialPutByte>
                pucSndBufferCur++;
    10c6:	80 91 4d 02 	lds	r24, 0x024D
    10ca:	90 91 4e 02 	lds	r25, 0x024E
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	90 93 4e 02 	sts	0x024E, r25
    10d4:	80 93 4d 02 	sts	0x024D, r24
                eBytePos = BYTE_HIGH_NIBBLE;
    10d8:	10 92 4f 02 	sts	0x024F, r1
                usSndBufferCount--;
    10dc:	80 91 4b 02 	lds	r24, 0x024B
    10e0:	90 91 4c 02 	lds	r25, 0x024C
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	90 93 4c 02 	sts	0x024C, r25
    10ea:	80 93 4b 02 	sts	0x024B, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    10ee:	c0 e0       	ldi	r28, 0x00	; 0
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
                xMBPortSerialPutByte( ( CHAR )ucByte );
                pucSndBufferCur++;
                eBytePos = BYTE_HIGH_NIBBLE;
                usSndBufferCount--;
                break;
    10f0:	27 c0       	rjmp	.+78     	; 0x1140 <xMBASCIITransmitFSM+0x128>
            }
        }
        else
        {
            xMBPortSerialPutByte( MB_ASCII_DEFAULT_CR );
    10f2:	8d e0       	ldi	r24, 0x0D	; 13
    10f4:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <xMBPortSerialPutByte>
            eSndState = STATE_TX_END;
    10f8:	83 e0       	ldi	r24, 0x03	; 3
    10fa:	80 93 53 02 	sts	0x0253, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    10fe:	c0 e0       	ldi	r28, 0x00	; 0
    1100:	1f c0       	rjmp	.+62     	; 0x1140 <xMBASCIITransmitFSM+0x128>
        }
        break;

        /* Finish the frame by sending a LF character. */
    case STATE_TX_END:
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
    1102:	80 91 4a 02 	lds	r24, 0x024A
    1106:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <xMBPortSerialPutByte>
        /* We need another state to make sure that the CR character has
         * been sent. */
        eSndState = STATE_TX_NOTIFY;
    110a:	84 e0       	ldi	r24, 0x04	; 4
    110c:	80 93 53 02 	sts	0x0253, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    1110:	c0 e0       	ldi	r28, 0x00	; 0
    case STATE_TX_END:
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
        /* We need another state to make sure that the CR character has
         * been sent. */
        eSndState = STATE_TX_NOTIFY;
        break;
    1112:	16 c0       	rjmp	.+44     	; 0x1140 <xMBASCIITransmitFSM+0x128>

        /* Notify the task which called eMBASCIISend that the frame has
         * been sent. */
    case STATE_TX_NOTIFY:
        eSndState = STATE_TX_IDLE;
    1114:	10 92 53 02 	sts	0x0253, r1
        xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
    1118:	83 e0       	ldi	r24, 0x03	; 3
    111a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <xMBPortEventPost>
    111e:	c8 2f       	mov	r28, r24

        /* Disable transmitter. This prevents another transmit buffer
         * empty interrupt. */
        vMBPortSerialEnable( TRUE, FALSE );
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <vMBPortSerialEnable>
        eSndState = STATE_TX_IDLE;
    1128:	10 92 53 02 	sts	0x0253, r1
        break;
    112c:	09 c0       	rjmp	.+18     	; 0x1140 <xMBASCIITransmitFSM+0x128>

        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <vMBPortSerialEnable>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    1136:	c0 e0       	ldi	r28, 0x00	; 0
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <xMBASCIITransmitFSM+0x128>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    113a:	c0 e0       	ldi	r28, 0x00	; 0
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <xMBASCIITransmitFSM+0x128>
    113e:	c0 e0       	ldi	r28, 0x00	; 0
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    }

    return xNeedPoll;
}
    1140:	8c 2f       	mov	r24, r28
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <xMBASCIITimerT1SExpired>:

BOOL
xMBASCIITimerT1SExpired( void )
{
    switch ( eRcvState )
    1146:	80 91 52 02 	lds	r24, 0x0252
    114a:	81 50       	subi	r24, 0x01	; 1
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	10 f4       	brcc	.+4      	; 0x1154 <xMBASCIITimerT1SExpired+0xe>
        /* If we have a timeout we go back to the idle state and wait for
         * the next frame.
         */
    case STATE_RX_RCV:
    case STATE_RX_WAIT_EOF:
        eRcvState = STATE_RX_IDLE;
    1150:	10 92 52 02 	sts	0x0252, r1

    default:
        assert( ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_WAIT_EOF ) );
        break;
    }
    vMBPortTimersDisable(  );
    1154:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <vMBPortTimersDisable>

    /* no context switch required. */
    return FALSE;
}
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	08 95       	ret

0000115c <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    1162:	eb 01       	movw	r28, r22
    1164:	28 81       	ld	r18, Y
    1166:	39 81       	ldd	r19, Y+1	; 0x01
    1168:	25 30       	cpi	r18, 0x05	; 5
    116a:	31 05       	cpc	r19, r1
    116c:	09 f0       	breq	.+2      	; 0x1170 <eMBFuncReadCoils+0x14>
    116e:	50 c0       	rjmp	.+160    	; 0x1210 <eMBFuncReadCoils+0xb4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1170:	fc 01       	movw	r30, r24
    1172:	a1 81       	ldd	r26, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1174:	22 81       	ldd	r18, Z+2	; 0x02
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
    1176:	43 81       	ldd	r20, Z+3	; 0x03
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	54 2f       	mov	r21, r20
    117c:	44 27       	eor	r20, r20
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
    117e:	34 81       	ldd	r19, Z+4	; 0x04
    1180:	43 2b       	or	r20, r19

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
    1182:	fa 01       	movw	r30, r20
    1184:	31 97       	sbiw	r30, 0x01	; 1
    1186:	ef 3c       	cpi	r30, 0xCF	; 207
    1188:	f7 40       	sbci	r31, 0x07	; 7
    118a:	08 f0       	brcs	.+2      	; 0x118e <eMBFuncReadCoils+0x32>
    118c:	43 c0       	rjmp	.+134    	; 0x1214 <eMBFuncReadCoils+0xb8>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    118e:	19 82       	std	Y+1, r1	; 0x01
    1190:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
    1192:	31 e0       	ldi	r19, 0x01	; 1
    1194:	ec 01       	movw	r28, r24
    1196:	38 83       	st	Y, r19
            *usLen += 1;
    1198:	eb 01       	movw	r28, r22
    119a:	e8 81       	ld	r30, Y
    119c:	f9 81       	ldd	r31, Y+1	; 0x01
    119e:	31 96       	adiw	r30, 0x01	; 1
    11a0:	f9 83       	std	Y+1, r31	; 0x01
    11a2:	e8 83       	st	Y, r30

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
    11a4:	fa 01       	movw	r30, r20
    11a6:	e7 70       	andi	r30, 0x07	; 7
    11a8:	ff 27       	eor	r31, r31
    11aa:	ef 2b       	or	r30, r31
    11ac:	51 f0       	breq	.+20     	; 0x11c2 <eMBFuncReadCoils+0x66>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
    11ae:	fa 01       	movw	r30, r20
    11b0:	f6 95       	lsr	r31
    11b2:	e7 95       	ror	r30
    11b4:	f6 95       	lsr	r31
    11b6:	e7 95       	ror	r30
    11b8:	f6 95       	lsr	r31
    11ba:	e7 95       	ror	r30
    11bc:	11 e0       	ldi	r17, 0x01	; 1
    11be:	1e 0f       	add	r17, r30
    11c0:	08 c0       	rjmp	.+16     	; 0x11d2 <eMBFuncReadCoils+0x76>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
    11c2:	fa 01       	movw	r30, r20
    11c4:	f6 95       	lsr	r31
    11c6:	e7 95       	ror	r30
    11c8:	f6 95       	lsr	r31
    11ca:	e7 95       	ror	r30
    11cc:	f6 95       	lsr	r31
    11ce:	e7 95       	ror	r30
    11d0:	1e 2f       	mov	r17, r30
    11d2:	eb 01       	movw	r28, r22
            }
            *pucFrameCur++ = ucNBytes;
    11d4:	fc 01       	movw	r30, r24
    11d6:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
    11d8:	68 81       	ld	r22, Y
    11da:	79 81       	ldd	r23, Y+1	; 0x01
    11dc:	6f 5f       	subi	r22, 0xFF	; 255
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	79 83       	std	Y+1, r23	; 0x01
    11e2:	68 83       	st	Y, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    11e4:	62 2f       	mov	r22, r18
    11e6:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    11e8:	7a 2b       	or	r23, r26
        usRegAddress++;
    11ea:	6f 5f       	subi	r22, 0xFF	; 255
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	02 96       	adiw	r24, 0x02	; 2
    11f2:	0e 94 a9 06 	call	0xd52	; 0xd52 <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    11f6:	88 23       	and	r24, r24
    11f8:	19 f0       	breq	.+6      	; 0x1200 <eMBFuncReadCoils+0xa4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    11fa:	0e 94 bc 0b 	call	0x1778	; 0x1778 <prveMBError2Exception>
    11fe:	0b c0       	rjmp	.+22     	; 0x1216 <eMBFuncReadCoils+0xba>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    1200:	88 81       	ld	r24, Y
    1202:	99 81       	ldd	r25, Y+1	; 0x01
    1204:	81 0f       	add	r24, r17
    1206:	91 1d       	adc	r25, r1
    1208:	99 83       	std	Y+1, r25	; 0x01
    120a:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <eMBFuncReadCoils+0xba>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <eMBFuncReadCoils+0xba>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1214:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	08 95       	ret

0000121e <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	00 d0       	rcall	.+0      	; 0x1224 <eMBFuncWriteCoil+0x6>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    1228:	fb 01       	movw	r30, r22
    122a:	20 81       	ld	r18, Z
    122c:	31 81       	ldd	r19, Z+1	; 0x01
    122e:	25 30       	cpi	r18, 0x05	; 5
    1230:	31 05       	cpc	r19, r1
    1232:	11 f5       	brne	.+68     	; 0x1278 <eMBFuncWriteCoil+0x5a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    1234:	fc 01       	movw	r30, r24
    1236:	31 81       	ldd	r19, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    1238:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    123a:	24 81       	ldd	r18, Z+4	; 0x04
    123c:	21 11       	cpse	r18, r1
    123e:	1e c0       	rjmp	.+60     	; 0x127c <eMBFuncWriteCoil+0x5e>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
    1240:	83 81       	ldd	r24, Z+3	; 0x03
    1242:	9f ef       	ldi	r25, 0xFF	; 255
    1244:	98 0f       	add	r25, r24
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    1246:	9e 3f       	cpi	r25, 0xFE	; 254
    1248:	d8 f0       	brcs	.+54     	; 0x1280 <eMBFuncWriteCoil+0x62>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
    124a:	1a 82       	std	Y+2, r1	; 0x02
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
    124c:	8f 3f       	cpi	r24, 0xFF	; 255
    124e:	19 f4       	brne	.+6      	; 0x1256 <eMBFuncWriteCoil+0x38>
            {
                ucBuf[0] = 1;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <eMBFuncWriteCoil+0x3a>
            }
            else
            {
                ucBuf[0] = 0;
    1256:	19 82       	std	Y+1, r1	; 0x01
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    1258:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    125a:	73 2b       	or	r23, r19
        usRegAddress++;
    125c:	6f 5f       	subi	r22, 0xFF	; 255
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	41 e0       	ldi	r20, 0x01	; 1
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	ce 01       	movw	r24, r28
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	0e 94 a9 06 	call	0xd52	; 0xd52 <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    126e:	88 23       	and	r24, r24
    1270:	49 f0       	breq	.+18     	; 0x1284 <eMBFuncWriteCoil+0x66>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1272:	0e 94 bc 0b 	call	0x1778	; 0x1778 <prveMBError2Exception>
    1276:	07 c0       	rjmp	.+14     	; 0x1286 <eMBFuncWriteCoil+0x68>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <eMBFuncWriteCoil+0x68>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <eMBFuncWriteCoil+0x68>
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <eMBFuncWriteCoil+0x68>
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    1284:	80 e0       	ldi	r24, 0x00	; 0
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    1296:	fb 01       	movw	r30, r22
    1298:	20 81       	ld	r18, Z
    129a:	31 81       	ldd	r19, Z+1	; 0x01
    129c:	26 30       	cpi	r18, 0x06	; 6
    129e:	31 05       	cpc	r19, r1
    12a0:	e8 f1       	brcs	.+122    	; 0x131c <eMBFuncWriteMultipleCoils+0x8c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    12a2:	fc 01       	movw	r30, r24
    12a4:	11 81       	ldd	r17, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    12a6:	b2 81       	ldd	r27, Z+2	; 0x02
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
    12a8:	43 81       	ldd	r20, Z+3	; 0x03
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	54 2f       	mov	r21, r20
    12ae:	44 27       	eor	r20, r20
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
    12b0:	24 81       	ldd	r18, Z+4	; 0x04
    12b2:	42 2b       	or	r20, r18

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
    12b4:	a5 81       	ldd	r26, Z+5	; 0x05

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
    12b6:	9a 01       	movw	r18, r20
    12b8:	27 70       	andi	r18, 0x07	; 7
    12ba:	33 27       	eor	r19, r19
    12bc:	23 2b       	or	r18, r19
    12be:	49 f0       	breq	.+18     	; 0x12d2 <eMBFuncWriteMultipleCoils+0x42>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
    12c0:	9a 01       	movw	r18, r20
    12c2:	36 95       	lsr	r19
    12c4:	27 95       	ror	r18
    12c6:	36 95       	lsr	r19
    12c8:	27 95       	ror	r18
    12ca:	36 95       	lsr	r19
    12cc:	27 95       	ror	r18
    12ce:	2f 5f       	subi	r18, 0xFF	; 255
    12d0:	07 c0       	rjmp	.+14     	; 0x12e0 <eMBFuncWriteMultipleCoils+0x50>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
    12d2:	9a 01       	movw	r18, r20
    12d4:	36 95       	lsr	r19
    12d6:	27 95       	ror	r18
    12d8:	36 95       	lsr	r19
    12da:	27 95       	ror	r18
    12dc:	36 95       	lsr	r19
    12de:	27 95       	ror	r18
        }

        if( ( usCoilCnt >= 1 ) &&
    12e0:	fa 01       	movw	r30, r20
    12e2:	31 97       	sbiw	r30, 0x01	; 1
    12e4:	e0 3b       	cpi	r30, 0xB0	; 176
    12e6:	f7 40       	sbci	r31, 0x07	; 7
    12e8:	d8 f4       	brcc	.+54     	; 0x1320 <eMBFuncWriteMultipleCoils+0x90>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
    12ea:	2a 13       	cpse	r18, r26
    12ec:	1b c0       	rjmp	.+54     	; 0x1324 <eMBFuncWriteMultipleCoils+0x94>
    12ee:	eb 01       	movw	r28, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    12f0:	6b 2f       	mov	r22, r27
    12f2:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    12f4:	9b 01       	movw	r18, r22
    12f6:	31 2b       	or	r19, r17
        usRegAddress++;
    12f8:	b9 01       	movw	r22, r18
    12fa:	6f 5f       	subi	r22, 0xFF	; 255
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
    12fe:	21 e0       	ldi	r18, 0x01	; 1
    1300:	06 96       	adiw	r24, 0x06	; 6
    1302:	0e 94 a9 06 	call	0xd52	; 0xd52 <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1306:	88 23       	and	r24, r24
    1308:	19 f0       	breq	.+6      	; 0x1310 <eMBFuncWriteMultipleCoils+0x80>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    130a:	0e 94 bc 0b 	call	0x1778	; 0x1778 <prveMBError2Exception>
    130e:	0b c0       	rjmp	.+22     	; 0x1326 <eMBFuncWriteMultipleCoils+0x96>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    1310:	85 e0       	ldi	r24, 0x05	; 5
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	99 83       	std	Y+1, r25	; 0x01
    1316:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <eMBFuncWriteMultipleCoils+0x96>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	03 c0       	rjmp	.+6      	; 0x1326 <eMBFuncWriteMultipleCoils+0x96>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1320:	83 e0       	ldi	r24, 0x03	; 3
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <eMBFuncWriteMultipleCoils+0x96>
    1324:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	08 95       	ret

0000132e <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    1334:	eb 01       	movw	r28, r22
    1336:	28 81       	ld	r18, Y
    1338:	39 81       	ldd	r19, Y+1	; 0x01
    133a:	25 30       	cpi	r18, 0x05	; 5
    133c:	31 05       	cpc	r19, r1
    133e:	09 f0       	breq	.+2      	; 0x1342 <eMBFuncReadDiscreteInputs+0x14>
    1340:	4f c0       	rjmp	.+158    	; 0x13e0 <eMBFuncReadDiscreteInputs+0xb2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1342:	fc 01       	movw	r30, r24
    1344:	a1 81       	ldd	r26, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1346:	22 81       	ldd	r18, Z+2	; 0x02
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
    1348:	43 81       	ldd	r20, Z+3	; 0x03
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	54 2f       	mov	r21, r20
    134e:	44 27       	eor	r20, r20
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
    1350:	34 81       	ldd	r19, Z+4	; 0x04
    1352:	43 2b       	or	r20, r19

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
    1354:	fa 01       	movw	r30, r20
    1356:	31 97       	sbiw	r30, 0x01	; 1
    1358:	ef 3c       	cpi	r30, 0xCF	; 207
    135a:	f7 40       	sbci	r31, 0x07	; 7
    135c:	08 f0       	brcs	.+2      	; 0x1360 <eMBFuncReadDiscreteInputs+0x32>
    135e:	42 c0       	rjmp	.+132    	; 0x13e4 <eMBFuncReadDiscreteInputs+0xb6>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    1360:	19 82       	std	Y+1, r1	; 0x01
    1362:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
    1364:	32 e0       	ldi	r19, 0x02	; 2
    1366:	ec 01       	movw	r28, r24
    1368:	38 83       	st	Y, r19
            *usLen += 1;
    136a:	eb 01       	movw	r28, r22
    136c:	e8 81       	ld	r30, Y
    136e:	f9 81       	ldd	r31, Y+1	; 0x01
    1370:	31 96       	adiw	r30, 0x01	; 1
    1372:	f9 83       	std	Y+1, r31	; 0x01
    1374:	e8 83       	st	Y, r30

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
    1376:	fa 01       	movw	r30, r20
    1378:	e7 70       	andi	r30, 0x07	; 7
    137a:	ff 27       	eor	r31, r31
    137c:	ef 2b       	or	r30, r31
    137e:	51 f0       	breq	.+20     	; 0x1394 <eMBFuncReadDiscreteInputs+0x66>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
    1380:	fa 01       	movw	r30, r20
    1382:	f6 95       	lsr	r31
    1384:	e7 95       	ror	r30
    1386:	f6 95       	lsr	r31
    1388:	e7 95       	ror	r30
    138a:	f6 95       	lsr	r31
    138c:	e7 95       	ror	r30
    138e:	11 e0       	ldi	r17, 0x01	; 1
    1390:	1e 0f       	add	r17, r30
    1392:	08 c0       	rjmp	.+16     	; 0x13a4 <eMBFuncReadDiscreteInputs+0x76>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
    1394:	fa 01       	movw	r30, r20
    1396:	f6 95       	lsr	r31
    1398:	e7 95       	ror	r30
    139a:	f6 95       	lsr	r31
    139c:	e7 95       	ror	r30
    139e:	f6 95       	lsr	r31
    13a0:	e7 95       	ror	r30
    13a2:	1e 2f       	mov	r17, r30
    13a4:	eb 01       	movw	r28, r22
            }
            *pucFrameCur++ = ucNBytes;
    13a6:	fc 01       	movw	r30, r24
    13a8:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
    13aa:	68 81       	ld	r22, Y
    13ac:	79 81       	ldd	r23, Y+1	; 0x01
    13ae:	6f 5f       	subi	r22, 0xFF	; 255
    13b0:	7f 4f       	sbci	r23, 0xFF	; 255
    13b2:	79 83       	std	Y+1, r23	; 0x01
    13b4:	68 83       	st	Y, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    13b6:	62 2f       	mov	r22, r18
    13b8:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    13ba:	7a 2b       	or	r23, r26
        usRegAddress++;
    13bc:	6f 5f       	subi	r22, 0xFF	; 255
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    13c0:	02 96       	adiw	r24, 0x02	; 2
    13c2:	0e 94 ab 06 	call	0xd56	; 0xd56 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    13c6:	88 23       	and	r24, r24
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <eMBFuncReadDiscreteInputs+0xa2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    13ca:	0e 94 bc 0b 	call	0x1778	; 0x1778 <prveMBError2Exception>
    13ce:	0b c0       	rjmp	.+22     	; 0x13e6 <eMBFuncReadDiscreteInputs+0xb8>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    13d0:	88 81       	ld	r24, Y
    13d2:	99 81       	ldd	r25, Y+1	; 0x01
    13d4:	81 0f       	add	r24, r17
    13d6:	91 1d       	adc	r25, r1
    13d8:	99 83       	std	Y+1, r25	; 0x01
    13da:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	03 c0       	rjmp	.+6      	; 0x13e6 <eMBFuncReadDiscreteInputs+0xb8>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <eMBFuncReadDiscreteInputs+0xb8>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    13e4:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	08 95       	ret

000013ee <eMBFuncWriteHoldingRegister>:
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    13ee:	fb 01       	movw	r30, r22
    13f0:	20 81       	ld	r18, Z
    13f2:	31 81       	ldd	r19, Z+1	; 0x01
    13f4:	25 30       	cpi	r18, 0x05	; 5
    13f6:	31 05       	cpc	r19, r1
    13f8:	a1 f4       	brne	.+40     	; 0x1422 <eMBFuncWriteHoldingRegister+0x34>
    13fa:	fc 01       	movw	r30, r24
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    13fc:	61 81       	ldd	r22, Z+1	; 0x01
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	76 2f       	mov	r23, r22
    1402:	66 27       	eor	r22, r22
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    1404:	22 81       	ldd	r18, Z+2	; 0x02
    1406:	62 2b       	or	r22, r18
        usRegAddress++;
    1408:	6f 5f       	subi	r22, 0xFF	; 255
    140a:	7f 4f       	sbci	r23, 0xFF	; 255

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
    140c:	21 e0       	ldi	r18, 0x01	; 1
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	03 96       	adiw	r24, 0x03	; 3
    1414:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
    1418:	88 23       	and	r24, r24
    141a:	29 f0       	breq	.+10     	; 0x1426 <eMBFuncWriteHoldingRegister+0x38>
        {
            eStatus = prveMBError2Exception( eRegStatus );
    141c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <prveMBError2Exception>
    1420:	08 95       	ret
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	08 95       	ret

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    1426:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1428:	08 95       	ret

0000142a <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    142e:	eb 01       	movw	r28, r22
    1430:	28 81       	ld	r18, Y
    1432:	39 81       	ldd	r19, Y+1	; 0x01
    1434:	26 30       	cpi	r18, 0x06	; 6
    1436:	31 05       	cpc	r19, r1
    1438:	50 f1       	brcs	.+84     	; 0x148e <eMBFuncWriteMultipleHoldingRegister+0x64>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    143a:	fc 01       	movw	r30, r24
    143c:	a1 81       	ldd	r26, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    143e:	f2 81       	ldd	r31, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
    1440:	ec 01       	movw	r28, r24
    1442:	4b 81       	ldd	r20, Y+3	; 0x03
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	54 2f       	mov	r21, r20
    1448:	44 27       	eor	r20, r20
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
    144a:	2c 81       	ldd	r18, Y+4	; 0x04
    144c:	42 2b       	or	r20, r18

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
    144e:	ed 81       	ldd	r30, Y+5	; 0x05

        if( ( usRegCount >= 1 ) &&
    1450:	9a 01       	movw	r18, r20
    1452:	21 50       	subi	r18, 0x01	; 1
    1454:	31 09       	sbc	r19, r1
    1456:	28 37       	cpi	r18, 0x78	; 120
    1458:	31 05       	cpc	r19, r1
    145a:	d8 f4       	brcc	.+54     	; 0x1492 <eMBFuncWriteMultipleHoldingRegister+0x68>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
    145c:	24 2f       	mov	r18, r20
    145e:	22 0f       	add	r18, r18
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
    1460:	2e 13       	cpse	r18, r30
    1462:	19 c0       	rjmp	.+50     	; 0x1496 <eMBFuncWriteMultipleHoldingRegister+0x6c>
    1464:	eb 01       	movw	r28, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    1466:	6f 2f       	mov	r22, r31
    1468:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    146a:	7a 2b       	or	r23, r26
        usRegAddress++;
    146c:	6f 5f       	subi	r22, 0xFF	; 255
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
    1470:	21 e0       	ldi	r18, 0x01	; 1
    1472:	06 96       	adiw	r24, 0x06	; 6
    1474:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1478:	88 23       	and	r24, r24
    147a:	19 f0       	breq	.+6      	; 0x1482 <eMBFuncWriteMultipleHoldingRegister+0x58>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    147c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <prveMBError2Exception>
    1480:	0b c0       	rjmp	.+22     	; 0x1498 <eMBFuncWriteMultipleHoldingRegister+0x6e>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    1482:	85 e0       	ldi	r24, 0x05	; 5
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	99 83       	std	Y+1, r25	; 0x01
    1488:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	05 c0       	rjmp	.+10     	; 0x1498 <eMBFuncWriteMultipleHoldingRegister+0x6e>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    148e:	83 e0       	ldi	r24, 0x03	; 3
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <eMBFuncWriteMultipleHoldingRegister+0x6e>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <eMBFuncWriteMultipleHoldingRegister+0x6e>
    1496:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	08 95       	ret

0000149e <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    14a6:	db 01       	movw	r26, r22
    14a8:	2d 91       	ld	r18, X+
    14aa:	3c 91       	ld	r19, X
    14ac:	25 30       	cpi	r18, 0x05	; 5
    14ae:	31 05       	cpc	r19, r1
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <eMBFuncReadHoldingRegister+0x16>
    14b2:	3f c0       	rjmp	.+126    	; 0x1532 <eMBFuncReadHoldingRegister+0x94>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    14b4:	dc 01       	movw	r26, r24
    14b6:	11 96       	adiw	r26, 0x01	; 1
    14b8:	ec 91       	ld	r30, X
    14ba:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    14bc:	12 96       	adiw	r26, 0x02	; 2
    14be:	3c 91       	ld	r19, X
    14c0:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
    14c2:	14 96       	adiw	r26, 0x04	; 4
    14c4:	2c 91       	ld	r18, X
    14c6:	14 97       	sbiw	r26, 0x04	; 4
    14c8:	02 2f       	mov	r16, r18
    14ca:	10 e0       	ldi	r17, 0x00	; 0

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
    14cc:	a8 01       	movw	r20, r16
    14ce:	41 50       	subi	r20, 0x01	; 1
    14d0:	51 09       	sbc	r21, r1
    14d2:	4d 37       	cpi	r20, 0x7D	; 125
    14d4:	51 05       	cpc	r21, r1
    14d6:	78 f5       	brcc	.+94     	; 0x1536 <eMBFuncReadHoldingRegister+0x98>
    14d8:	eb 01       	movw	r28, r22
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    14da:	19 82       	std	Y+1, r1	; 0x01
    14dc:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
    14de:	43 e0       	ldi	r20, 0x03	; 3
    14e0:	4c 93       	st	X, r20
            *usLen += 1;
    14e2:	48 81       	ld	r20, Y
    14e4:	59 81       	ldd	r21, Y+1	; 0x01
    14e6:	4f 5f       	subi	r20, 0xFF	; 255
    14e8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ea:	59 83       	std	Y+1, r21	; 0x01
    14ec:	48 83       	st	Y, r20

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
    14ee:	22 0f       	add	r18, r18
    14f0:	11 96       	adiw	r26, 0x01	; 1
    14f2:	2c 93       	st	X, r18
            *usLen += 1;
    14f4:	48 81       	ld	r20, Y
    14f6:	59 81       	ldd	r21, Y+1	; 0x01
    14f8:	4f 5f       	subi	r20, 0xFF	; 255
    14fa:	5f 4f       	sbci	r21, 0xFF	; 255
    14fc:	59 83       	std	Y+1, r21	; 0x01
    14fe:	48 83       	st	Y, r20
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1500:	63 2f       	mov	r22, r19
    1502:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1504:	7e 2b       	or	r23, r30
        usRegAddress++;
    1506:	6f 5f       	subi	r22, 0xFF	; 255
    1508:	7f 4f       	sbci	r23, 0xFF	; 255
            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	a8 01       	movw	r20, r16
    150e:	02 96       	adiw	r24, 0x02	; 2
    1510:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1514:	88 23       	and	r24, r24
    1516:	19 f0       	breq	.+6      	; 0x151e <eMBFuncReadHoldingRegister+0x80>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1518:	0e 94 bc 0b 	call	0x1778	; 0x1778 <prveMBError2Exception>
    151c:	0d c0       	rjmp	.+26     	; 0x1538 <eMBFuncReadHoldingRegister+0x9a>
            }
            else
            {
                *usLen += usRegCount * 2;
    151e:	00 0f       	add	r16, r16
    1520:	11 1f       	adc	r17, r17
    1522:	88 81       	ld	r24, Y
    1524:	99 81       	ldd	r25, Y+1	; 0x01
    1526:	08 0f       	add	r16, r24
    1528:	19 1f       	adc	r17, r25
    152a:	19 83       	std	Y+1, r17	; 0x01
    152c:	08 83       	st	Y, r16
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <eMBFuncReadHoldingRegister+0x9a>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1532:	83 e0       	ldi	r24, 0x03	; 3
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <eMBFuncReadHoldingRegister+0x9a>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1536:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret

00001542 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    1542:	cf 92       	push	r12
    1544:	df 92       	push	r13
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	fc 01       	movw	r30, r24
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    1554:	db 01       	movw	r26, r22
    1556:	8d 91       	ld	r24, X+
    1558:	9c 91       	ld	r25, X
    155a:	0a 97       	sbiw	r24, 0x0a	; 10
    155c:	08 f4       	brcc	.+2      	; 0x1560 <eMBFuncReadWriteMultipleHoldingRegister+0x1e>
    155e:	5e c0       	rjmp	.+188    	; 0x161c <eMBFuncReadWriteMultipleHoldingRegister+0xda>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
    1560:	e1 80       	ldd	r14, Z+1	; 0x01
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
    1562:	f2 80       	ldd	r15, Z+2	; 0x02
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
    1564:	c3 81       	ldd	r28, Z+3	; 0x03
    1566:	d0 e0       	ldi	r29, 0x00	; 0
    1568:	dc 2f       	mov	r29, r28
    156a:	cc 27       	eor	r28, r28
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
    156c:	84 81       	ldd	r24, Z+4	; 0x04
    156e:	c8 2b       	or	r28, r24

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
    1570:	b5 81       	ldd	r27, Z+5	; 0x05
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
    1572:	a6 81       	ldd	r26, Z+6	; 0x06
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
    1574:	27 81       	ldd	r18, Z+7	; 0x07
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
    1576:	40 85       	ldd	r20, Z+8	; 0x08

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
    1578:	31 85       	ldd	r19, Z+9	; 0x09

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    157a:	ce 01       	movw	r24, r28
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	8d 37       	cpi	r24, 0x7D	; 125
    1580:	91 05       	cpc	r25, r1
    1582:	08 f0       	brcs	.+2      	; 0x1586 <eMBFuncReadWriteMultipleHoldingRegister+0x44>
    1584:	4d c0       	rjmp	.+154    	; 0x1620 <eMBFuncReadWriteMultipleHoldingRegister+0xde>

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
    1586:	50 e0       	ldi	r21, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
    1588:	52 2b       	or	r21, r18

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    158a:	ca 01       	movw	r24, r20
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	89 37       	cpi	r24, 0x79	; 121
    1590:	91 05       	cpc	r25, r1
    1592:	08 f0       	brcs	.+2      	; 0x1596 <eMBFuncReadWriteMultipleHoldingRegister+0x54>
    1594:	47 c0       	rjmp	.+142    	; 0x1624 <eMBFuncReadWriteMultipleHoldingRegister+0xe2>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
    1596:	83 2f       	mov	r24, r19
    1598:	90 e0       	ldi	r25, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
    159a:	9a 01       	movw	r18, r20
    159c:	22 0f       	add	r18, r18
    159e:	33 1f       	adc	r19, r19
    15a0:	28 17       	cp	r18, r24
    15a2:	39 07       	cpc	r19, r25
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <eMBFuncReadWriteMultipleHoldingRegister+0x66>
    15a6:	40 c0       	rjmp	.+128    	; 0x1628 <eMBFuncReadWriteMultipleHoldingRegister+0xe6>
    15a8:	8b 01       	movw	r16, r22
    15aa:	6f 01       	movw	r12, r30
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
    15ac:	6a 2f       	mov	r22, r26
    15ae:	70 e0       	ldi	r23, 0x00	; 0
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
    15b0:	7b 2b       	or	r23, r27
        usRegWriteAddress++;
    15b2:	6f 5f       	subi	r22, 0xFF	; 255
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
    15b6:	21 e0       	ldi	r18, 0x01	; 1
    15b8:	cf 01       	movw	r24, r30
    15ba:	0a 96       	adiw	r24, 0x0a	; 10
    15bc:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <eMBRegHoldingCB>
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
    15c0:	81 11       	cpse	r24, r1
    15c2:	34 c0       	rjmp	.+104    	; 0x162c <eMBFuncReadWriteMultipleHoldingRegister+0xea>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
    15c4:	f8 01       	movw	r30, r16
    15c6:	11 82       	std	Z+1, r1	; 0x01
    15c8:	10 82       	st	Z, r1

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
    15ca:	87 e1       	ldi	r24, 0x17	; 23
    15cc:	d6 01       	movw	r26, r12
    15ce:	8c 93       	st	X, r24
                *usLen += 1;
    15d0:	80 81       	ld	r24, Z
    15d2:	91 81       	ldd	r25, Z+1	; 0x01
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	80 83       	st	Z, r24

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
    15da:	8c 2f       	mov	r24, r28
    15dc:	88 0f       	add	r24, r24
    15de:	11 96       	adiw	r26, 0x01	; 1
    15e0:	8c 93       	st	X, r24
                *usLen += 1;
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	80 83       	st	Z, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
    15ec:	6f 2d       	mov	r22, r15
    15ee:	70 e0       	ldi	r23, 0x00	; 0
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
    15f0:	7e 29       	or	r23, r14
        usRegReadAddress++;
    15f2:	6f 5f       	subi	r22, 0xFF	; 255
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;

                /* Make the read callback. */
                eRegStatus =
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	ae 01       	movw	r20, r28
    15fa:	c6 01       	movw	r24, r12
    15fc:	02 96       	adiw	r24, 0x02	; 2
    15fe:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
    1602:	81 11       	cpse	r24, r1
    1604:	13 c0       	rjmp	.+38     	; 0x162c <eMBFuncReadWriteMultipleHoldingRegister+0xea>
                {
                    *usLen += 2 * usRegReadCount;
    1606:	cc 0f       	add	r28, r28
    1608:	dd 1f       	adc	r29, r29
    160a:	f8 01       	movw	r30, r16
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	8c 0f       	add	r24, r28
    1612:	9d 1f       	adc	r25, r29
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	0a c0       	rjmp	.+20     	; 0x1630 <eMBFuncReadWriteMultipleHoldingRegister+0xee>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <eMBFuncReadWriteMultipleHoldingRegister+0xee>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1620:	83 e0       	ldi	r24, 0x03	; 3
    1622:	06 c0       	rjmp	.+12     	; 0x1630 <eMBFuncReadWriteMultipleHoldingRegister+0xee>
    1624:	83 e0       	ldi	r24, 0x03	; 3
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <eMBFuncReadWriteMultipleHoldingRegister+0xee>
    1628:	83 e0       	ldi	r24, 0x03	; 3
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <eMBFuncReadWriteMultipleHoldingRegister+0xee>
                    *usLen += 2 * usRegReadCount;
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
    162c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <prveMBError2Exception>
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
        }
    }
    return eStatus;
}
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	08 95       	ret

00001642 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
    1642:	0f 93       	push	r16
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    164a:	db 01       	movw	r26, r22
    164c:	2d 91       	ld	r18, X+
    164e:	3c 91       	ld	r19, X
    1650:	25 30       	cpi	r18, 0x05	; 5
    1652:	31 05       	cpc	r19, r1
    1654:	09 f0       	breq	.+2      	; 0x1658 <eMBFuncReadInputRegister+0x16>
    1656:	44 c0       	rjmp	.+136    	; 0x16e0 <eMBFuncReadInputRegister+0x9e>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1658:	dc 01       	movw	r26, r24
    165a:	11 96       	adiw	r26, 0x01	; 1
    165c:	ec 91       	ld	r30, X
    165e:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1660:	12 96       	adiw	r26, 0x02	; 2
    1662:	2c 91       	ld	r18, X
    1664:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
    1666:	13 96       	adiw	r26, 0x03	; 3
    1668:	0c 91       	ld	r16, X
    166a:	13 97       	sbiw	r26, 0x03	; 3
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	10 2f       	mov	r17, r16
    1670:	00 27       	eor	r16, r16
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
    1672:	14 96       	adiw	r26, 0x04	; 4
    1674:	3c 91       	ld	r19, X
    1676:	14 97       	sbiw	r26, 0x04	; 4
    1678:	03 2b       	or	r16, r19

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
    167a:	a8 01       	movw	r20, r16
    167c:	41 50       	subi	r20, 0x01	; 1
    167e:	51 09       	sbc	r21, r1
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
    1680:	4c 37       	cpi	r20, 0x7C	; 124
    1682:	51 05       	cpc	r21, r1
    1684:	78 f5       	brcc	.+94     	; 0x16e4 <eMBFuncReadInputRegister+0xa2>
    1686:	eb 01       	movw	r28, r22
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    1688:	19 82       	std	Y+1, r1	; 0x01
    168a:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
    168c:	34 e0       	ldi	r19, 0x04	; 4
    168e:	3c 93       	st	X, r19
            *usLen += 1;
    1690:	48 81       	ld	r20, Y
    1692:	59 81       	ldd	r21, Y+1	; 0x01
    1694:	4f 5f       	subi	r20, 0xFF	; 255
    1696:	5f 4f       	sbci	r21, 0xFF	; 255
    1698:	59 83       	std	Y+1, r21	; 0x01
    169a:	48 83       	st	Y, r20

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
    169c:	30 2f       	mov	r19, r16
    169e:	33 0f       	add	r19, r19
    16a0:	11 96       	adiw	r26, 0x01	; 1
    16a2:	3c 93       	st	X, r19
            *usLen += 1;
    16a4:	48 81       	ld	r20, Y
    16a6:	59 81       	ldd	r21, Y+1	; 0x01
    16a8:	4f 5f       	subi	r20, 0xFF	; 255
    16aa:	5f 4f       	sbci	r21, 0xFF	; 255
    16ac:	59 83       	std	Y+1, r21	; 0x01
    16ae:	48 83       	st	Y, r20
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    16b0:	62 2f       	mov	r22, r18
    16b2:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    16b4:	7e 2b       	or	r23, r30
        usRegAddress++;
    16b6:	6f 5f       	subi	r22, 0xFF	; 255
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;

            eRegStatus =
    16ba:	a8 01       	movw	r20, r16
    16bc:	02 96       	adiw	r24, 0x02	; 2
    16be:	0e 94 bd 05 	call	0xb7a	; 0xb7a <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    16c2:	88 23       	and	r24, r24
    16c4:	19 f0       	breq	.+6      	; 0x16cc <eMBFuncReadInputRegister+0x8a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    16c6:	0e 94 bc 0b 	call	0x1778	; 0x1778 <prveMBError2Exception>
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <eMBFuncReadInputRegister+0xa4>
            }
            else
            {
                *usLen += usRegCount * 2;
    16cc:	00 0f       	add	r16, r16
    16ce:	11 1f       	adc	r17, r17
    16d0:	88 81       	ld	r24, Y
    16d2:	99 81       	ldd	r25, Y+1	; 0x01
    16d4:	08 0f       	add	r16, r24
    16d6:	19 1f       	adc	r17, r25
    16d8:	19 83       	std	Y+1, r17	; 0x01
    16da:	08 83       	st	Y, r16
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <eMBFuncReadInputRegister+0xa4>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    16e0:	83 e0       	ldi	r24, 0x03	; 3
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <eMBFuncReadInputRegister+0xa4>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    16e4:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	08 95       	ret

000016f0 <eMBSetSlaveID>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    eMBErrorCode    eStatus = MB_ENOERR;

    /* the first byte and second byte in the buffer is reserved for
     * the parameter ucSlaveID and the running flag. The rest of
     * the buffer is available for additional data. */
    if( usAdditionalLen + 2 < MB_FUNC_OTHER_REP_SLAVEID_BUF )
    16f4:	e9 01       	movw	r28, r18
    16f6:	22 96       	adiw	r28, 0x02	; 2
    16f8:	c0 32       	cpi	r28, 0x20	; 32
    16fa:	d1 05       	cpc	r29, r1
    16fc:	f0 f4       	brcc	.+60     	; 0x173a <eMBSetSlaveID+0x4a>
    {
        usMBSlaveIDLen = 0;
        ucMBSlaveID[usMBSlaveIDLen++] = ucSlaveID;
    16fe:	80 93 56 02 	sts	0x0256, r24
        ucMBSlaveID[usMBSlaveIDLen++] = ( UCHAR )( xIsRunning ? 0xFF : 0x00 );
    1702:	82 e0       	ldi	r24, 0x02	; 2
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	90 93 55 02 	sts	0x0255, r25
    170a:	80 93 54 02 	sts	0x0254, r24
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	61 11       	cpse	r22, r1
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <eMBSetSlaveID+0x26>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	81 95       	neg	r24
    1718:	80 93 57 02 	sts	0x0257, r24
        if( usAdditionalLen > 0 )
    171c:	21 15       	cp	r18, r1
    171e:	31 05       	cpc	r19, r1
    1720:	71 f0       	breq	.+28     	; 0x173e <eMBSetSlaveID+0x4e>
    1722:	ba 01       	movw	r22, r20
        {
            memcpy( &ucMBSlaveID[usMBSlaveIDLen], pucAdditional,
    1724:	a9 01       	movw	r20, r18
    1726:	88 e5       	ldi	r24, 0x58	; 88
    1728:	92 e0       	ldi	r25, 0x02	; 2
    172a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <memcpy>
                    ( size_t )usAdditionalLen );
            usMBSlaveIDLen += usAdditionalLen;
    172e:	d0 93 55 02 	sts	0x0255, r29
    1732:	c0 93 54 02 	sts	0x0254, r28

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <eMBSetSlaveID+0x50>
            usMBSlaveIDLen += usAdditionalLen;
        }
    }
    else
    {
        eStatus = MB_ENORES;
    173a:	84 e0       	ldi	r24, 0x04	; 4
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <eMBSetSlaveID+0x50>

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    173e:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_ENORES;
    }
    return eStatus;
}
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	08 95       	ret

00001746 <eMBFuncReportSlaveID>:

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	8b 01       	movw	r16, r22
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
    1750:	c0 91 54 02 	lds	r28, 0x0254
    1754:	d0 91 55 02 	lds	r29, 0x0255
    1758:	ae 01       	movw	r20, r28
    175a:	66 e5       	ldi	r22, 0x56	; 86
    175c:	72 e0       	ldi	r23, 0x02	; 2
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
    1764:	21 96       	adiw	r28, 0x01	; 1
    1766:	f8 01       	movw	r30, r16
    1768:	d1 83       	std	Z+1, r29	; 0x01
    176a:	c0 83       	st	Z, r28
    return MB_EX_NONE;
}
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	08 95       	ret

00001778 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	21 f0       	breq	.+8      	; 0x1784 <prveMBError2Exception+0xc>
    177c:	48 f0       	brcs	.+18     	; 0x1790 <prveMBError2Exception+0x18>
    177e:	87 30       	cpi	r24, 0x07	; 7
    1780:	19 f0       	breq	.+6      	; 0x1788 <prveMBError2Exception+0x10>
    1782:	04 c0       	rjmp	.+8      	; 0x178c <prveMBError2Exception+0x14>
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
            break;

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	08 95       	ret
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
    1788:	86 e0       	ldi	r24, 0x06	; 6
            break;
    178a:	08 95       	ret

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
    178c:	84 e0       	ldi	r24, 0x04	; 4
            break;
    178e:	08 95       	ret
    eMBException    eStatus;

    switch ( eErrorCode )
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
    1790:	80 e0       	ldi	r24, 0x00	; 0
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
    1792:	08 95       	ret

00001794 <eMBInit>:
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
    1794:	cf 92       	push	r12
    1796:	df 92       	push	r13
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	9f ef       	ldi	r25, 0xFF	; 255
    17a4:	96 0f       	add	r25, r22
    17a6:	97 3f       	cpi	r25, 0xF7	; 247
    17a8:	08 f0       	brcs	.+2      	; 0x17ac <eMBInit+0x18>
    17aa:	4e c0       	rjmp	.+156    	; 0x1848 <eMBInit+0xb4>
    17ac:	5e 2d       	mov	r21, r14
    17ae:	68 01       	movw	r12, r16
    17b0:	79 01       	movw	r14, r18
    17b2:	74 2f       	mov	r23, r20
    17b4:	96 2f       	mov	r25, r22
    17b6:	18 2f       	mov	r17, r24
    17b8:	60 93 8e 02 	sts	0x028E, r22
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	b9 f5       	brne	.+110    	; 0x182e <eMBInit+0x9a>
    17c0:	22 ed       	ldi	r18, 0xD2	; 210
    17c2:	36 e0       	ldi	r19, 0x06	; 6
    17c4:	30 93 8a 02 	sts	0x028A, r19
    17c8:	20 93 89 02 	sts	0x0289, r18
    17cc:	2e ed       	ldi	r18, 0xDE	; 222
    17ce:	36 e0       	ldi	r19, 0x06	; 6
    17d0:	30 93 88 02 	sts	0x0288, r19
    17d4:	20 93 87 02 	sts	0x0287, r18
    17d8:	2d e1       	ldi	r18, 0x1D	; 29
    17da:	37 e0       	ldi	r19, 0x07	; 7
    17dc:	30 93 8c 02 	sts	0x028C, r19
    17e0:	20 93 8b 02 	sts	0x028B, r18
    17e4:	27 ee       	ldi	r18, 0xE7	; 231
    17e6:	36 e0       	ldi	r19, 0x06	; 6
    17e8:	30 93 86 02 	sts	0x0286, r19
    17ec:	20 93 85 02 	sts	0x0285, r18
    17f0:	10 92 84 02 	sts	0x0284, r1
    17f4:	10 92 83 02 	sts	0x0283, r1
    17f8:	27 e6       	ldi	r18, 0x67	; 103
    17fa:	37 e0       	ldi	r19, 0x07	; 7
    17fc:	30 93 82 02 	sts	0x0282, r19
    1800:	20 93 81 02 	sts	0x0281, r18
    1804:	2c e0       	ldi	r18, 0x0C	; 12
    1806:	38 e0       	ldi	r19, 0x08	; 8
    1808:	30 93 80 02 	sts	0x0280, r19
    180c:	20 93 7f 02 	sts	0x027F, r18
    1810:	23 ea       	ldi	r18, 0xA3	; 163
    1812:	38 e0       	ldi	r19, 0x08	; 8
    1814:	30 93 7e 02 	sts	0x027E, r19
    1818:	20 93 7d 02 	sts	0x027D, r18
    181c:	05 2f       	mov	r16, r21
    181e:	a7 01       	movw	r20, r14
    1820:	96 01       	movw	r18, r12
    1822:	67 2f       	mov	r22, r23
    1824:	89 2f       	mov	r24, r25
    1826:	0e 94 b7 06 	call	0xd6e	; 0xd6e <eMBASCIIInit>
    182a:	c8 2f       	mov	r28, r24
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <eMBInit+0x9c>
    182e:	c2 e0       	ldi	r28, 0x02	; 2
    1830:	c1 11       	cpse	r28, r1
    1832:	0d c0       	rjmp	.+26     	; 0x184e <eMBInit+0xba>
    1834:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xMBPortEventInit>
    1838:	88 23       	and	r24, r24
    183a:	41 f0       	breq	.+16     	; 0x184c <eMBInit+0xb8>
    183c:	10 93 8d 02 	sts	0x028D, r17
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	80 93 34 01 	sts	0x0134, r24
    1846:	03 c0       	rjmp	.+6      	; 0x184e <eMBInit+0xba>
    1848:	c2 e0       	ldi	r28, 0x02	; 2
    184a:	01 c0       	rjmp	.+2      	; 0x184e <eMBInit+0xba>
    184c:	c3 e0       	ldi	r28, 0x03	; 3
    184e:	8c 2f       	mov	r24, r28
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	ff 90       	pop	r15
    1858:	ef 90       	pop	r14
    185a:	df 90       	pop	r13
    185c:	cf 90       	pop	r12
    185e:	08 95       	ret

00001860 <eMBEnable>:
    1860:	80 91 34 01 	lds	r24, 0x0134
    1864:	81 30       	cpi	r24, 0x01	; 1
    1866:	49 f4       	brne	.+18     	; 0x187a <eMBEnable+0x1a>
    1868:	e0 91 89 02 	lds	r30, 0x0289
    186c:	f0 91 8a 02 	lds	r31, 0x028A
    1870:	09 95       	icall
    1872:	10 92 34 01 	sts	0x0134, r1
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	08 95       	ret
    187a:	86 e0       	ldi	r24, 0x06	; 6
    187c:	08 95       	ret

0000187e <eMBPoll>:

eMBErrorCode
eMBPoll( void )
{
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	1f 92       	push	r1
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    1888:	80 91 34 01 	lds	r24, 0x0134
    188c:	81 11       	cpse	r24, r1
    188e:	99 c0       	rjmp	.+306    	; 0x19c2 <eMBPoll+0x144>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
    1890:	ce 01       	movw	r24, r28
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <xMBPortEventGet>
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	09 f0       	breq	.+2      	; 0x189e <eMBPoll+0x20>
    189c:	94 c0       	rjmp	.+296    	; 0x19c6 <eMBPoll+0x148>
    {
        switch ( eEvent )
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	19 f0       	breq	.+6      	; 0x18aa <eMBPoll+0x2c>
    18a4:	82 30       	cpi	r24, 0x02	; 2
    18a6:	d9 f0       	breq	.+54     	; 0x18de <eMBPoll+0x60>
    18a8:	90 c0       	rjmp	.+288    	; 0x19ca <eMBPoll+0x14c>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
    18aa:	e0 91 85 02 	lds	r30, 0x0285
    18ae:	f0 91 86 02 	lds	r31, 0x0286
    18b2:	48 e7       	ldi	r20, 0x78	; 120
    18b4:	52 e0       	ldi	r21, 0x02	; 2
    18b6:	6a e7       	ldi	r22, 0x7A	; 122
    18b8:	72 e0       	ldi	r23, 0x02	; 2
    18ba:	8c e7       	ldi	r24, 0x7C	; 124
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	09 95       	icall
            if( eStatus == MB_ENOERR )
    18c0:	81 11       	cpse	r24, r1
    18c2:	85 c0       	rjmp	.+266    	; 0x19ce <eMBPoll+0x150>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
    18c4:	80 91 7c 02 	lds	r24, 0x027C
    18c8:	90 91 8e 02 	lds	r25, 0x028E
    18cc:	89 17       	cp	r24, r25
    18ce:	11 f0       	breq	.+4      	; 0x18d4 <eMBPoll+0x56>
    18d0:	81 11       	cpse	r24, r1
    18d2:	7f c0       	rjmp	.+254    	; 0x19d2 <eMBPoll+0x154>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <xMBPortEventPost>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	80 c0       	rjmp	.+256    	; 0x19de <eMBPoll+0x160>
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
    18de:	a0 91 7a 02 	lds	r26, 0x027A
    18e2:	b0 91 7b 02 	lds	r27, 0x027B
    18e6:	4c 91       	ld	r20, X
    18e8:	40 93 77 02 	sts	0x0277, r20
            eException = MB_EX_ILLEGAL_FUNCTION;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	80 93 76 02 	sts	0x0276, r24
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
    18f2:	90 91 04 01 	lds	r25, 0x0104
    18f6:	99 23       	and	r25, r25
    18f8:	09 f4       	brne	.+2      	; 0x18fc <eMBPoll+0x7e>
    18fa:	6d c0       	rjmp	.+218    	; 0x19d6 <eMBPoll+0x158>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
    18fc:	49 17       	cp	r20, r25
    18fe:	59 f0       	breq	.+22     	; 0x1916 <eMBPoll+0x98>
    1900:	e7 e0       	ldi	r30, 0x07	; 7
    1902:	f1 e0       	ldi	r31, 0x01	; 1
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    1904:	21 e0       	ldi	r18, 0x01	; 1
    1906:	30 e0       	ldi	r19, 0x00	; 0
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
    1908:	90 81       	ld	r25, Z
    190a:	99 23       	and	r25, r25
    190c:	09 f4       	brne	.+2      	; 0x1910 <eMBPoll+0x92>
    190e:	63 c0       	rjmp	.+198    	; 0x19d6 <eMBPoll+0x158>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
    1910:	49 13       	cpse	r20, r25
    1912:	1a c0       	rjmp	.+52     	; 0x1948 <eMBPoll+0xca>
    1914:	02 c0       	rjmp	.+4      	; 0x191a <eMBPoll+0x9c>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
    191a:	f9 01       	movw	r30, r18
    191c:	ee 0f       	add	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	2e 0f       	add	r18, r30
    1922:	3f 1f       	adc	r19, r31
    1924:	f9 01       	movw	r30, r18
    1926:	ec 5f       	subi	r30, 0xFC	; 252
    1928:	fe 4f       	sbci	r31, 0xFE	; 254
    192a:	01 80       	ldd	r0, Z+1	; 0x01
    192c:	f2 81       	ldd	r31, Z+2	; 0x02
    192e:	e0 2d       	mov	r30, r0
    1930:	68 e7       	ldi	r22, 0x78	; 120
    1932:	72 e0       	ldi	r23, 0x02	; 2
    1934:	cd 01       	movw	r24, r26
    1936:	09 95       	icall
    1938:	80 93 76 02 	sts	0x0276, r24
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
    193c:	90 91 7c 02 	lds	r25, 0x027C
    1940:	91 11       	cpse	r25, r1
    1942:	09 c0       	rjmp	.+18     	; 0x1956 <eMBPoll+0xd8>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	4b c0       	rjmp	.+150    	; 0x19de <eMBPoll+0x160>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    1948:	2f 5f       	subi	r18, 0xFF	; 255
    194a:	3f 4f       	sbci	r19, 0xFF	; 255
    194c:	33 96       	adiw	r30, 0x03	; 3
    194e:	20 31       	cpi	r18, 0x10	; 16
    1950:	31 05       	cpc	r19, r1
    1952:	d1 f6       	brne	.-76     	; 0x1908 <eMBPoll+0x8a>
    1954:	40 c0       	rjmp	.+128    	; 0x19d6 <eMBPoll+0x158>

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
            {
                if( eException != MB_EX_NONE )
    1956:	88 23       	and	r24, r24
    1958:	19 f1       	breq	.+70     	; 0x19a0 <eMBPoll+0x122>
    195a:	01 c0       	rjmp	.+2      	; 0x195e <eMBPoll+0xe0>
    195c:	81 e0       	ldi	r24, 0x01	; 1
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
    195e:	e0 91 7a 02 	lds	r30, 0x027A
    1962:	f0 91 7b 02 	lds	r31, 0x027B
    1966:	21 e0       	ldi	r18, 0x01	; 1
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	30 93 79 02 	sts	0x0279, r19
    196e:	20 93 78 02 	sts	0x0278, r18
    1972:	90 91 77 02 	lds	r25, 0x0277
    1976:	90 68       	ori	r25, 0x80	; 128
    1978:	90 83       	st	Z, r25
                    ucMBFrame[usLength++] = eException;
    197a:	40 91 7a 02 	lds	r20, 0x027A
    197e:	50 91 7b 02 	lds	r21, 0x027B
    1982:	20 91 78 02 	lds	r18, 0x0278
    1986:	30 91 79 02 	lds	r19, 0x0279
    198a:	b9 01       	movw	r22, r18
    198c:	6f 5f       	subi	r22, 0xFF	; 255
    198e:	7f 4f       	sbci	r23, 0xFF	; 255
    1990:	70 93 79 02 	sts	0x0279, r23
    1994:	60 93 78 02 	sts	0x0278, r22
    1998:	fa 01       	movw	r30, r20
    199a:	e2 0f       	add	r30, r18
    199c:	f3 1f       	adc	r31, r19
    199e:	80 83       	st	Z, r24
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
    19a0:	40 91 78 02 	lds	r20, 0x0278
    19a4:	50 91 79 02 	lds	r21, 0x0279
    19a8:	60 91 7a 02 	lds	r22, 0x027A
    19ac:	70 91 7b 02 	lds	r23, 0x027B
    19b0:	e0 91 8b 02 	lds	r30, 0x028B
    19b4:	f0 91 8c 02 	lds	r31, 0x028C
    19b8:	80 91 8e 02 	lds	r24, 0x028E
    19bc:	09 95       	icall

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	0e c0       	rjmp	.+28     	; 0x19de <eMBPoll+0x160>
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
    19c2:	86 e0       	ldi	r24, 0x06	; 6
    19c4:	0c c0       	rjmp	.+24     	; 0x19de <eMBPoll+0x160>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	0a c0       	rjmp	.+20     	; 0x19de <eMBPoll+0x160>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	08 c0       	rjmp	.+16     	; 0x19de <eMBPoll+0x160>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	06 c0       	rjmp	.+12     	; 0x19de <eMBPoll+0x160>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	04 c0       	rjmp	.+8      	; 0x19de <eMBPoll+0x160>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
    19d6:	80 91 7c 02 	lds	r24, 0x027C
    19da:	81 11       	cpse	r24, r1
    19dc:	bf cf       	rjmp	.-130    	; 0x195c <eMBPoll+0xde>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
    19de:	0f 90       	pop	r0
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	08 95       	ret

000019e6 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
    19e6:	10 92 8f 02 	sts	0x028F, r1
    return TRUE;
}
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	08 95       	ret

000019ee <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
    19ee:	91 e0       	ldi	r25, 0x01	; 1
    19f0:	90 93 8f 02 	sts	0x028F, r25
    eQueuedEvent = eEvent;
    19f4:	80 93 90 02 	sts	0x0290, r24
    return TRUE;
}
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	08 95       	ret

000019fc <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    19fc:	fc 01       	movw	r30, r24
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
    19fe:	90 91 8f 02 	lds	r25, 0x028F
    1a02:	99 23       	and	r25, r25
    1a04:	39 f0       	breq	.+14     	; 0x1a14 <xMBPortEventGet+0x18>
    {
        *eEvent = eQueuedEvent;
    1a06:	80 91 90 02 	lds	r24, 0x0290
    1a0a:	80 83       	st	Z, r24
        xEventInQueue = FALSE;
    1a0c:	10 92 8f 02 	sts	0x028F, r1
        xEventHappened = TRUE;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	08 95       	ret
}

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
    1a14:	80 e0       	ldi	r24, 0x00	; 0
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
    1a16:	08 95       	ret

00001a18 <vMBPortSerialEnable>:

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
#ifdef RTS_ENABLE
    UCSRB |= _BV( TXEN ) | _BV(TXCIE);
    1a18:	e1 ec       	ldi	r30, 0xC1	; 193
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	90 81       	ld	r25, Z
    1a1e:	98 64       	ori	r25, 0x48	; 72
    1a20:	90 83       	st	Z, r25
#else
    UCSRB |= _BV( TXEN );
#endif

    if( xRxEnable )
    1a22:	88 23       	and	r24, r24
    1a24:	21 f0       	breq	.+8      	; 0x1a2e <vMBPortSerialEnable+0x16>
    {
        UCSRB |= _BV( RXEN ) | _BV( RXCIE );
    1a26:	80 81       	ld	r24, Z
    1a28:	80 69       	ori	r24, 0x90	; 144
    1a2a:	80 83       	st	Z, r24
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <vMBPortSerialEnable+0x20>
    }
    else
    {
        UCSRB &= ~( _BV( RXEN ) | _BV( RXCIE ) );
    1a2e:	e1 ec       	ldi	r30, 0xC1	; 193
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	8f 76       	andi	r24, 0x6F	; 111
    1a36:	80 83       	st	Z, r24
    }

    if( xTxEnable )
    1a38:	66 23       	and	r22, r22
    1a3a:	39 f0       	breq	.+14     	; 0x1a4a <vMBPortSerialEnable+0x32>
    {
        UCSRB |= _BV( TXEN ) | _BV( UDRE );
    1a3c:	e1 ec       	ldi	r30, 0xC1	; 193
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	88 62       	ori	r24, 0x28	; 40
    1a44:	80 83       	st	Z, r24
#ifdef RTS_ENABLE
        RTS_HIGH;
    1a46:	5d 9a       	sbi	0x0b, 5	; 11
    1a48:	08 95       	ret
#endif
    }
    else
    {
        UCSRB &= ~( _BV( UDRE ) );
    1a4a:	e1 ec       	ldi	r30, 0xC1	; 193
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8f 7d       	andi	r24, 0xDF	; 223
    1a52:	80 83       	st	Z, r24
    1a54:	08 95       	ret

00001a56 <xMBPortSerialInit>:
    }
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
    1a56:	0f 93       	push	r16
    1a58:	cf 93       	push	r28
    1a5a:	c2 2f       	mov	r28, r18
    UCHAR ucUCSRC = 0;

    /* prevent compiler warning. */
    (void)ucPORT;
	
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );
    1a5c:	db 01       	movw	r26, r22
    1a5e:	ca 01       	movw	r24, r20
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	aa 1f       	adc	r26, r26
    1a66:	bb 1f       	adc	r27, r27
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	aa 1f       	adc	r26, r26
    1a6e:	bb 1f       	adc	r27, r27
    1a70:	9c 01       	movw	r18, r24
    1a72:	ad 01       	movw	r20, r26
    1a74:	22 0f       	add	r18, r18
    1a76:	33 1f       	adc	r19, r19
    1a78:	44 1f       	adc	r20, r20
    1a7a:	55 1f       	adc	r21, r21
    1a7c:	22 0f       	add	r18, r18
    1a7e:	33 1f       	adc	r19, r19
    1a80:	44 1f       	adc	r20, r20
    1a82:	55 1f       	adc	r21, r21
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	74 e2       	ldi	r23, 0x24	; 36
    1a88:	84 ef       	ldi	r24, 0xF4	; 244
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__udivmodsi4>
    1a90:	21 50       	subi	r18, 0x01	; 1
    1a92:	31 09       	sbc	r19, r1
    1a94:	30 93 c5 00 	sts	0x00C5, r19
    1a98:	20 93 c4 00 	sts	0x00C4, r18

    switch ( eParity )
    1a9c:	01 30       	cpi	r16, 0x01	; 1
    1a9e:	21 f0       	breq	.+8      	; 0x1aa8 <xMBPortSerialInit+0x52>
    1aa0:	02 30       	cpi	r16, 0x02	; 2
    1aa2:	21 f4       	brne	.+8      	; 0x1aac <xMBPortSerialInit+0x56>
    {
        case MB_PAR_EVEN:
            ucUCSRC |= _BV( UPM1 );
    1aa4:	90 e2       	ldi	r25, 0x20	; 32
    1aa6:	03 c0       	rjmp	.+6      	; 0x1aae <xMBPortSerialInit+0x58>
            break;
        case MB_PAR_ODD:
            ucUCSRC |= _BV( UPM1 ) | _BV( UPM0 );
    1aa8:	90 e3       	ldi	r25, 0x30	; 48
            break;
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <xMBPortSerialInit+0x58>
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
    UCHAR ucUCSRC = 0;
    1aac:	90 e0       	ldi	r25, 0x00	; 0
            break;
        case MB_PAR_NONE:
            break;
    }

    switch ( ucDataBits )
    1aae:	c7 30       	cpi	r28, 0x07	; 7
    1ab0:	21 f0       	breq	.+8      	; 0x1aba <xMBPortSerialInit+0x64>
    1ab2:	c8 30       	cpi	r28, 0x08	; 8
    1ab4:	19 f4       	brne	.+6      	; 0x1abc <xMBPortSerialInit+0x66>
    {
        case 8:
            ucUCSRC |= _BV( UCSZ0 ) | _BV( UCSZ1 );
    1ab6:	96 60       	ori	r25, 0x06	; 6
            break;
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <xMBPortSerialInit+0x66>
        case 7:
            ucUCSRC |= _BV( UCSZ1 );
    1aba:	94 60       	ori	r25, 0x04	; 4
            break;
    }

#if defined (__AVR_ATmega168__) | defined (__AVR_ATmega328__) | defined (__AVR_ATmega328P__)
    UCSRC |= ucUCSRC;
    1abc:	e2 ec       	ldi	r30, 0xC2	; 194
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	89 2b       	or	r24, r25
    1ac4:	80 83       	st	Z, r24
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega128__)
    UCSRC |= ucUCSRC;
#endif

    vMBPortSerialEnable( FALSE, FALSE );
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <vMBPortSerialEnable>


#ifdef RTS_ENABLE
    RTS_INIT;
    1ace:	55 9a       	sbi	0x0a, 5	; 10
    1ad0:	5d 98       	cbi	0x0b, 5	; 11
	
#endif
    return TRUE;
}
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	cf 91       	pop	r28
    1ad6:	0f 91       	pop	r16
    1ad8:	08 95       	ret

00001ada <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
    UDR = ucByte;
    1ada:	80 93 c6 00 	sts	0x00C6, r24
    return TRUE;
}
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	08 95       	ret

00001ae2 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
    *pucByte = UDR;
    1ae2:	20 91 c6 00 	lds	r18, 0x00C6
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	20 83       	st	Z, r18
    return TRUE;
}
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	08 95       	ret

00001aee <__vector_19>:
ISR( USART0_UDRE_vect )
#else
#error "Part Not Supported"
#endif
/*SIGNAL( SIG_USART_DATA )*/
{
    1aee:	1f 92       	push	r1
    1af0:	0f 92       	push	r0
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	2f 93       	push	r18
    1afa:	3f 93       	push	r19
    1afc:	4f 93       	push	r20
    1afe:	5f 93       	push	r21
    1b00:	6f 93       	push	r22
    1b02:	7f 93       	push	r23
    1b04:	8f 93       	push	r24
    1b06:	9f 93       	push	r25
    1b08:	af 93       	push	r26
    1b0a:	bf 93       	push	r27
    1b0c:	ef 93       	push	r30
    1b0e:	ff 93       	push	r31
    pxMBFrameCBTransmitterEmpty(  );
    1b10:	e0 91 7f 02 	lds	r30, 0x027F
    1b14:	f0 91 80 02 	lds	r31, 0x0280
    1b18:	09 95       	icall
}
    1b1a:	ff 91       	pop	r31
    1b1c:	ef 91       	pop	r30
    1b1e:	bf 91       	pop	r27
    1b20:	af 91       	pop	r26
    1b22:	9f 91       	pop	r25
    1b24:	8f 91       	pop	r24
    1b26:	7f 91       	pop	r23
    1b28:	6f 91       	pop	r22
    1b2a:	5f 91       	pop	r21
    1b2c:	4f 91       	pop	r20
    1b2e:	3f 91       	pop	r19
    1b30:	2f 91       	pop	r18
    1b32:	0f 90       	pop	r0
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	0f 90       	pop	r0
    1b38:	1f 90       	pop	r1
    1b3a:	18 95       	reti

00001b3c <__vector_18>:
ISR( USART0_RX_vect )
#else
#error "Part Not Supported"
#endif
/*SIGNAL( SIG_USART_RECV )*/
{
    1b3c:	1f 92       	push	r1
    1b3e:	0f 92       	push	r0
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	0f 92       	push	r0
    1b44:	11 24       	eor	r1, r1
    1b46:	2f 93       	push	r18
    1b48:	3f 93       	push	r19
    1b4a:	4f 93       	push	r20
    1b4c:	5f 93       	push	r21
    1b4e:	6f 93       	push	r22
    1b50:	7f 93       	push	r23
    1b52:	8f 93       	push	r24
    1b54:	9f 93       	push	r25
    1b56:	af 93       	push	r26
    1b58:	bf 93       	push	r27
    1b5a:	ef 93       	push	r30
    1b5c:	ff 93       	push	r31
    pxMBFrameCBByteReceived(  );
    1b5e:	e0 91 81 02 	lds	r30, 0x0281
    1b62:	f0 91 82 02 	lds	r31, 0x0282
    1b66:	09 95       	icall
}
    1b68:	ff 91       	pop	r31
    1b6a:	ef 91       	pop	r30
    1b6c:	bf 91       	pop	r27
    1b6e:	af 91       	pop	r26
    1b70:	9f 91       	pop	r25
    1b72:	8f 91       	pop	r24
    1b74:	7f 91       	pop	r23
    1b76:	6f 91       	pop	r22
    1b78:	5f 91       	pop	r21
    1b7a:	4f 91       	pop	r20
    1b7c:	3f 91       	pop	r19
    1b7e:	2f 91       	pop	r18
    1b80:	0f 90       	pop	r0
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	0f 90       	pop	r0
    1b86:	1f 90       	pop	r1
    1b88:	18 95       	reti

00001b8a <__vector_20>:
ISR( USART0_TX_vect )
#else
#error "Part Not Supported"
#endif
/*SIGNAL( SIG_UART_TRANS )*/
{
    1b8a:	1f 92       	push	r1
    1b8c:	0f 92       	push	r0
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	0f 92       	push	r0
    1b92:	11 24       	eor	r1, r1
    RTS_LOW;
    1b94:	5d 98       	cbi	0x0b, 5	; 11
}
    1b96:	0f 90       	pop	r0
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	0f 90       	pop	r0
    1b9c:	1f 90       	pop	r1
    1b9e:	18 95       	reti

00001ba0 <xMBPortTimersInit>:
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );
    1ba0:	9c 01       	movw	r18, r24
    1ba2:	a9 e0       	ldi	r26, 0x09	; 9
    1ba4:	bd e3       	ldi	r27, 0x3D	; 61
    1ba6:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__umulhisi3>
    1baa:	20 e2       	ldi	r18, 0x20	; 32
    1bac:	3e e4       	ldi	r19, 0x4E	; 78
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__udivmodsi4>
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
    1bb6:	20 93 95 02 	sts	0x0295, r18
    1bba:	30 93 96 02 	sts	0x0296, r19
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );

    usTimerOCRDeltaHi = usTimerOCRADelta >> 8;
    1bbe:	30 93 94 02 	sts	0x0294, r19
    usTimerOCRDeltaLo = usTimerOCRADelta & 0xFF;
    1bc2:	20 93 93 02 	sts	0x0293, r18
    //TCCR1B = 0x00;
    //TCCR1C = 0x00;
#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
    TCCR2A = 0;
    1bc6:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = 0;
    1bca:	e1 eb       	ldi	r30, 0xB1	; 177
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	10 82       	st	Z, r1
//    TIFR1 |= _BV( OCF1A ) ;

#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
	TCCR2B &= ~(_BV( CS22 ) | _BV( CS21 ) | _BV( CS20 ));
    1bd0:	80 81       	ld	r24, Z
    1bd2:	88 7f       	andi	r24, 0xF8	; 248
    1bd4:	80 83       	st	Z, r24
	TIMSK2 &= ~( _BV( OCIE2A ) | _BV( TOIE2 ));
    1bd6:	e0 e7       	ldi	r30, 0x70	; 112
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	8c 7f       	andi	r24, 0xFC	; 252
    1bde:	80 83       	st	Z, r24
	TIFR2 |= _BV( OCF2A ) | _BV( TOV2 );
    1be0:	87 b3       	in	r24, 0x17	; 23
    1be2:	83 60       	ori	r24, 0x03	; 3
    1be4:	87 bb       	out	0x17, r24	; 23
#endif

    vMBPortTimersDisable(  );

    return TRUE;
}
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	08 95       	ret

00001bea <vMBPortTimersEnable>:
inline void
vMBPortTimersEnable(  )
{

    //TCNT1 = 0x0000;
	TCNT2_Hi = 0;
    1bea:	10 92 92 02 	sts	0x0292, r1
	TCNT2 = 0;
    1bee:	10 92 b2 00 	sts	0x00B2, r1
//    {
//        TIMSK1 |= _BV( OCIE1A );
//        OCR1A = usTimerOCRADelta;
//    }

	if (usTimerOCRDeltaHi > 0)
    1bf2:	80 91 94 02 	lds	r24, 0x0294
    1bf6:	88 23       	and	r24, r24
    1bf8:	89 f0       	breq	.+34     	; 0x1c1c <vMBPortTimersEnable+0x32>
	{
		//overflow init
#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
		TIMSK2 |= _BV( TOV2 );
    1bfa:	e0 e7       	ldi	r30, 0x70	; 112
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	81 60       	ori	r24, 0x01	; 1
    1c02:	80 83       	st	Z, r24
		TIMSK2 &= ~_BV( OCIE2A );
    1c04:	80 81       	ld	r24, Z
    1c06:	8d 7f       	andi	r24, 0xFD	; 253
    1c08:	80 83       	st	Z, r24
		OCR2_Hi = usTimerOCRDeltaHi;
    1c0a:	80 91 94 02 	lds	r24, 0x0294
    1c0e:	80 93 91 02 	sts	0x0291, r24
		OCR2A = usTimerOCRDeltaLo;
    1c12:	80 91 93 02 	lds	r24, 0x0293
    1c16:	80 93 b3 00 	sts	0x00B3, r24
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <vMBPortTimersEnable+0x5a>
		OCR2_Hi = usTimerOCRDeltaHi;
		OCR2 = usTimerOCRDeltaLo;
#endif

	}
	else if (usTimerOCRDeltaLo > 0)
    1c1c:	80 91 93 02 	lds	r24, 0x0293
    1c20:	88 23       	and	r24, r24
    1c22:	81 f0       	breq	.+32     	; 0x1c44 <vMBPortTimersEnable+0x5a>
	{
		//only compare
#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
		TIMSK2 |= _BV( OCIE2A );
    1c24:	e0 e7       	ldi	r30, 0x70	; 112
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	82 60       	ori	r24, 0x02	; 2
    1c2c:	80 83       	st	Z, r24
		TIMSK2 &= ~_BV( TOV2 );
    1c2e:	80 81       	ld	r24, Z
    1c30:	8e 7f       	andi	r24, 0xFE	; 254
    1c32:	80 83       	st	Z, r24
		OCR2_Hi = usTimerOCRDeltaHi;
    1c34:	80 91 94 02 	lds	r24, 0x0294
    1c38:	80 93 91 02 	sts	0x0291, r24
		OCR2A = usTimerOCRDeltaLo;
    1c3c:	80 91 93 02 	lds	r24, 0x0293
    1c40:	80 93 b3 00 	sts	0x00B3, r24

//    TCCR1B |= _BV( CS12 ) | _BV( CS10 );
#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
	TCCR2B |= _BV( CS22 ) | _BV( CS21 ) | _BV( CS20 );
    1c44:	e1 eb       	ldi	r30, 0xB1	; 177
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	87 60       	ori	r24, 0x07	; 7
    1c4c:	80 83       	st	Z, r24
    1c4e:	08 95       	ret

00001c50 <vMBPortTimersDisable>:
//    TIFR1 |= _BV( OCF1A ) ;

#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
	TCCR2B &= ~(_BV( CS22 ) | _BV( CS21 ) | _BV( CS20 ));
    1c50:	e1 eb       	ldi	r30, 0xB1	; 177
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	88 7f       	andi	r24, 0xF8	; 248
    1c58:	80 83       	st	Z, r24
	TIMSK2 &= ~( _BV( OCIE2A ) | _BV( TOIE2 ));
    1c5a:	e0 e7       	ldi	r30, 0x70	; 112
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	8c 7f       	andi	r24, 0xFC	; 252
    1c62:	80 83       	st	Z, r24
	TIFR2 |= _BV( OCF2A ) | _BV( TOV2 );
    1c64:	87 b3       	in	r24, 0x17	; 23
    1c66:	83 60       	ori	r24, 0x03	; 3
    1c68:	87 bb       	out	0x17, r24	; 23
    1c6a:	08 95       	ret

00001c6c <__vector_7>:
#elif defined(__AVR_ATmega8__)
ISR( TIMER2_COMP_vect )
#else
#error "Part Not Supported"
#endif
{
    1c6c:	1f 92       	push	r1
    1c6e:	0f 92       	push	r0
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	0f 92       	push	r0
    1c74:	11 24       	eor	r1, r1
    1c76:	2f 93       	push	r18
    1c78:	3f 93       	push	r19
    1c7a:	4f 93       	push	r20
    1c7c:	5f 93       	push	r21
    1c7e:	6f 93       	push	r22
    1c80:	7f 93       	push	r23
    1c82:	8f 93       	push	r24
    1c84:	9f 93       	push	r25
    1c86:	af 93       	push	r26
    1c88:	bf 93       	push	r27
    1c8a:	ef 93       	push	r30
    1c8c:	ff 93       	push	r31
    ( void )pxMBPortCBTimerExpired(  );
    1c8e:	e0 91 7d 02 	lds	r30, 0x027D
    1c92:	f0 91 7e 02 	lds	r31, 0x027E
    1c96:	09 95       	icall
}
    1c98:	ff 91       	pop	r31
    1c9a:	ef 91       	pop	r30
    1c9c:	bf 91       	pop	r27
    1c9e:	af 91       	pop	r26
    1ca0:	9f 91       	pop	r25
    1ca2:	8f 91       	pop	r24
    1ca4:	7f 91       	pop	r23
    1ca6:	6f 91       	pop	r22
    1ca8:	5f 91       	pop	r21
    1caa:	4f 91       	pop	r20
    1cac:	3f 91       	pop	r19
    1cae:	2f 91       	pop	r18
    1cb0:	0f 90       	pop	r0
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	0f 90       	pop	r0
    1cb6:	1f 90       	pop	r1
    1cb8:	18 95       	reti

00001cba <__vector_9>:

ISR( TIMER2_OVF_vect )
{
    1cba:	1f 92       	push	r1
    1cbc:	0f 92       	push	r0
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	0f 92       	push	r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	2f 93       	push	r18
    1cc6:	3f 93       	push	r19
    1cc8:	4f 93       	push	r20
    1cca:	5f 93       	push	r21
    1ccc:	6f 93       	push	r22
    1cce:	7f 93       	push	r23
    1cd0:	8f 93       	push	r24
    1cd2:	9f 93       	push	r25
    1cd4:	af 93       	push	r26
    1cd6:	bf 93       	push	r27
    1cd8:	ef 93       	push	r30
    1cda:	ff 93       	push	r31
	TCNT2_Hi++;
    1cdc:	80 91 92 02 	lds	r24, 0x0292
    1ce0:	8f 5f       	subi	r24, 0xFF	; 255
    1ce2:	80 93 92 02 	sts	0x0292, r24
	if (TCNT2_Hi < OCR2_Hi)
    1ce6:	90 91 91 02 	lds	r25, 0x0291
    1cea:	89 17       	cp	r24, r25
    1cec:	e0 f0       	brcs	.+56     	; 0x1d26 <__vector_9+0x6c>
	{
		//TCNT2_Hi < OCR2_Hi
	}
	else if (TCNT2_Hi == OCR2_Hi)
    1cee:	89 13       	cpse	r24, r25
    1cf0:	15 c0       	rjmp	.+42     	; 0x1d1c <__vector_9+0x62>
		//enable ocr2 interrupt
		//disable ovf interrupt
#if defined(__AVR_ATmega168__) || \
	defined(__AVR_ATmega328P__) || \
	defined(__AVR_ATmega328__)
		TIMSK2 |= _BV( OCIE2A );
    1cf2:	e0 e7       	ldi	r30, 0x70	; 112
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	82 60       	ori	r24, 0x02	; 2
    1cfa:	80 83       	st	Z, r24
		OCR2A = usTimerOCRDeltaLo;
    1cfc:	80 91 93 02 	lds	r24, 0x0293
    1d00:	80 93 b3 00 	sts	0x00B3, r24
		TCCR2B &= ~(_BV( CS22 ) | _BV( CS21 ) | _BV( CS20 ));
    1d04:	a1 eb       	ldi	r26, 0xB1	; 177
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	8c 91       	ld	r24, X
    1d0a:	88 7f       	andi	r24, 0xF8	; 248
    1d0c:	8c 93       	st	X, r24
		TIMSK2 &= ~_BV( TOIE2 );
    1d0e:	80 81       	ld	r24, Z
    1d10:	8e 7f       	andi	r24, 0xFE	; 254
    1d12:	80 83       	st	Z, r24
		TIFR2 |= _BV( OCF2A ) | _BV( TOV2 );
    1d14:	87 b3       	in	r24, 0x17	; 23
    1d16:	83 60       	ori	r24, 0x03	; 3
    1d18:	87 bb       	out	0x17, r24	; 23
    1d1a:	05 c0       	rjmp	.+10     	; 0x1d26 <__vector_9+0x6c>

	}
	else
	{	//TCNT2_Hi > OCR2_Hi
		//for sanity's sake
	    ( void )pxMBPortCBTimerExpired(  );
    1d1c:	e0 91 7d 02 	lds	r30, 0x027D
    1d20:	f0 91 7e 02 	lds	r31, 0x027E
    1d24:	09 95       	icall
	}
}
    1d26:	ff 91       	pop	r31
    1d28:	ef 91       	pop	r30
    1d2a:	bf 91       	pop	r27
    1d2c:	af 91       	pop	r26
    1d2e:	9f 91       	pop	r25
    1d30:	8f 91       	pop	r24
    1d32:	7f 91       	pop	r23
    1d34:	6f 91       	pop	r22
    1d36:	5f 91       	pop	r21
    1d38:	4f 91       	pop	r20
    1d3a:	3f 91       	pop	r19
    1d3c:	2f 91       	pop	r18
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	0f 90       	pop	r0
    1d44:	1f 90       	pop	r1
    1d46:	18 95       	reti

00001d48 <_ZN7SCServoC1Ev>:
	Printf(startByte);
	Printf(ID);
	Printf(messageLength);
	Printf(INST_ACTION);
	Printf((~(ID + messageLength + INST_ACTION))&0xFF);
}
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	4b e0       	ldi	r20, 0x0B	; 11
    1d4c:	6a e0       	ldi	r22, 0x0A	; 10
    1d4e:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN14SoftwareSerialC1Ehhb>
    1d52:	08 95       	ret

00001d54 <_ZN7SCServo4initEl>:
    1d54:	41 15       	cp	r20, r1
    1d56:	51 05       	cpc	r21, r1
    1d58:	61 05       	cpc	r22, r1
    1d5a:	71 05       	cpc	r23, r1
    1d5c:	21 f4       	brne	.+8      	; 0x1d66 <_ZN7SCServo4initEl+0x12>
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	52 ec       	ldi	r21, 0xC2	; 194
    1d62:	61 e0       	ldi	r22, 0x01	; 1
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	2f ef       	ldi	r18, 0xFF	; 255
    1d68:	35 ea       	ldi	r19, 0xA5	; 165
    1d6a:	ee e0       	ldi	r30, 0x0E	; 14
    1d6c:	21 50       	subi	r18, 0x01	; 1
    1d6e:	30 40       	sbci	r19, 0x00	; 0
    1d70:	e0 40       	sbci	r30, 0x00	; 0
    1d72:	e1 f7       	brne	.-8      	; 0x1d6c <_ZN7SCServo4initEl+0x18>
    1d74:	00 c0       	rjmp	.+0      	; 0x1d76 <_ZN7SCServo4initEl+0x22>
    1d76:	00 00       	nop
    1d78:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN14SoftwareSerial5beginEl>
    1d7c:	08 95       	ret

00001d7e <_ZN7SCServo10ReadSerialEv>:
}

int SCServo::ReadSerial(void)
{
	int data;
	data = _SCSserial.read();
    1d7e:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN14SoftwareSerial4readEv>
	return data;
}
    1d82:	08 95       	ret

00001d84 <_ZN7SCServo12fflushRevBufEv>:

void SCServo::fflushRevBuf(void)
{
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	ec 01       	movw	r28, r24
	int size;
	while(1){
		size = ReadSerial();
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <_ZN7SCServo10ReadSerialEv>
		if(size==-1)
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	d9 f7       	brne	.-10     	; 0x1d8a <_ZN7SCServo12fflushRevBufEv+0x6>
			break;
	}
}
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	08 95       	ret

00001d9a <_ZN7SCServo7ReadBufEhPh>:
	Printf(INST_ACTION);
	Printf((~(ID + messageLength + INST_ACTION))&0xFF);
}

int SCServo::ReadBuf(byte len, byte *buf)
{
    1d9a:	6f 92       	push	r6
    1d9c:	7f 92       	push	r7
    1d9e:	8f 92       	push	r8
    1da0:	9f 92       	push	r9
    1da2:	af 92       	push	r10
    1da4:	bf 92       	push	r11
    1da6:	cf 92       	push	r12
    1da8:	df 92       	push	r13
    1daa:	ef 92       	push	r14
    1dac:	ff 92       	push	r15
    1dae:	0f 93       	push	r16
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	7c 01       	movw	r14, r24
    1db8:	c6 2f       	mov	r28, r22
    1dba:	6a 01       	movw	r12, r20
	int Size;
	int ComData;
	unsigned long t_begin = millis();
    1dbc:	0e 94 c4 03 	call	0x788	; 0x788 <millis>
    1dc0:	4b 01       	movw	r8, r22
    1dc2:	5c 01       	movw	r10, r24
	unsigned long t_user;
	while(1){
		
		Size = _SCSserial.available();
		if(Size>=len){
    1dc4:	d0 e0       	ldi	r29, 0x00	; 0
	int ComData;
	unsigned long t_begin = millis();
	unsigned long t_user;
	while(1){
		
		Size = _SCSserial.available();
    1dc6:	c7 01       	movw	r24, r14
    1dc8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_ZN14SoftwareSerial9availableEv>
    1dcc:	8c 01       	movw	r16, r24
		if(Size>=len){
    1dce:	3e 01       	movw	r6, r28
    1dd0:	8c 17       	cp	r24, r28
    1dd2:	9d 07       	cpc	r25, r29
    1dd4:	24 f0       	brlt	.+8      	; 0x1dde <_ZN7SCServo7ReadBufEhPh+0x44>
		if(t_user>TIMEOUT){
			break;
		}
	}
	int i;
	for(i=0; i<len; i++){
    1dd6:	16 14       	cp	r1, r6
    1dd8:	17 04       	cpc	r1, r7
    1dda:	7c f0       	brlt	.+30     	; 0x1dfa <_ZN7SCServo7ReadBufEhPh+0x60>
    1ddc:	20 c0       	rjmp	.+64     	; 0x1e1e <_ZN7SCServo7ReadBufEhPh+0x84>
		
		Size = _SCSserial.available();
		if(Size>=len){
			break;
		}
		t_user = millis() - t_begin;
    1dde:	0e 94 c4 03 	call	0x788	; 0x788 <millis>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	88 19       	sub	r24, r8
    1de8:	99 09       	sbc	r25, r9
    1dea:	aa 09       	sbc	r26, r10
    1dec:	bb 09       	sbc	r27, r11
		if(t_user>TIMEOUT){
    1dee:	85 3f       	cpi	r24, 0xF5	; 245
    1df0:	91 40       	sbci	r25, 0x01	; 1
    1df2:	a1 05       	cpc	r26, r1
    1df4:	b1 05       	cpc	r27, r1
    1df6:	38 f3       	brcs	.-50     	; 0x1dc6 <_ZN7SCServo7ReadBufEhPh+0x2c>
    1df8:	ee cf       	rjmp	.-36     	; 0x1dd6 <_ZN7SCServo7ReadBufEhPh+0x3c>
    1dfa:	e6 01       	movw	r28, r12
    1dfc:	6c 0c       	add	r6, r12
    1dfe:	7d 1c       	adc	r7, r13
			break;
		}
	}
	int i;
	for(i=0; i<len; i++){
		if(buf){
    1e00:	c1 14       	cp	r12, r1
    1e02:	d1 04       	cpc	r13, r1
    1e04:	29 f0       	breq	.+10     	; 0x1e10 <_ZN7SCServo7ReadBufEhPh+0x76>
			buf[i] = ReadSerial();
    1e06:	c7 01       	movw	r24, r14
    1e08:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <_ZN7SCServo10ReadSerialEv>
    1e0c:	88 83       	st	Y, r24
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <_ZN7SCServo7ReadBufEhPh+0x7c>
		}else{
			ComData = ReadSerial();
    1e10:	c7 01       	movw	r24, r14
    1e12:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <_ZN7SCServo10ReadSerialEv>
    1e16:	21 96       	adiw	r28, 0x01	; 1
		if(t_user>TIMEOUT){
			break;
		}
	}
	int i;
	for(i=0; i<len; i++){
    1e18:	c6 15       	cp	r28, r6
    1e1a:	d7 05       	cpc	r29, r7
    1e1c:	89 f7       	brne	.-30     	; 0x1e00 <_ZN7SCServo7ReadBufEhPh+0x66>
		}else{
			ComData = ReadSerial();
		}
	}
	return Size;
}
    1e1e:	c8 01       	movw	r24, r16
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	df 90       	pop	r13
    1e2e:	cf 90       	pop	r12
    1e30:	bf 90       	pop	r11
    1e32:	af 90       	pop	r10
    1e34:	9f 90       	pop	r9
    1e36:	8f 90       	pop	r8
    1e38:	7f 90       	pop	r7
    1e3a:	6f 90       	pop	r6
    1e3c:	08 95       	ret

00001e3e <_ZN7SCServo12EnableTorqueEhhh>:
			break;
	}
}

int SCServo::EnableTorque(byte ID, byte Enable, byte ReturnLevel)
{
    1e3e:	ff 92       	push	r15
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	ec 01       	movw	r28, r24
    1e4a:	06 2f       	mov	r16, r22
    1e4c:	14 2f       	mov	r17, r20
    1e4e:	f2 2e       	mov	r15, r18
	int messageLength = 4;

	fflushRevBuf();
    1e50:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <_ZN7SCServo12fflushRevBufEv>
		_SCSserial.end();
}

void SCServo::Printf(byte reg)
{
	_SCSserial.write(reg);
    1e54:	6f ef       	ldi	r22, 0xFF	; 255
    1e56:	ce 01       	movw	r24, r28
    1e58:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1e5c:	6f ef       	ldi	r22, 0xFF	; 255
    1e5e:	ce 01       	movw	r24, r28
    1e60:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1e64:	60 2f       	mov	r22, r16
    1e66:	ce 01       	movw	r24, r28
    1e68:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1e6c:	64 e0       	ldi	r22, 0x04	; 4
    1e6e:	ce 01       	movw	r24, r28
    1e70:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1e74:	63 e0       	ldi	r22, 0x03	; 3
    1e76:	ce 01       	movw	r24, r28
    1e78:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1e7c:	68 e2       	ldi	r22, 0x28	; 40
    1e7e:	ce 01       	movw	r24, r28
    1e80:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1e84:	61 2f       	mov	r22, r17
    1e86:	ce 01       	movw	r24, r28
    1e88:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1e8c:	11 5d       	subi	r17, 0xD1	; 209
	Printf(ID);
	Printf(messageLength);
	Printf(INST_WRITE);
	Printf(P_TORQUE_ENABLE);
	Printf(Enable);
	Printf((~(ID + messageLength + INST_WRITE + Enable + P_TORQUE_ENABLE))&0xFF);
    1e8e:	10 0f       	add	r17, r16
    1e90:	61 2f       	mov	r22, r17
    1e92:	60 95       	com	r22
		_SCSserial.end();
}

void SCServo::Printf(byte reg)
{
	_SCSserial.write(reg);
    1e94:	ce 01       	movw	r24, r28
    1e96:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
	Printf(messageLength);
	Printf(INST_WRITE);
	Printf(P_TORQUE_ENABLE);
	Printf(Enable);
	Printf((~(ID + messageLength + INST_WRITE + Enable + P_TORQUE_ENABLE))&0xFF);
	if(ID != 0xfe && ReturnLevel==2)
    1e9a:	0e 3f       	cpi	r16, 0xFE	; 254
    1e9c:	51 f0       	breq	.+20     	; 0x1eb2 <_ZN7SCServo12EnableTorqueEhhh+0x74>
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	f8 12       	cpse	r15, r24
    1ea2:	0a c0       	rjmp	.+20     	; 0x1eb8 <_ZN7SCServo12EnableTorqueEhhh+0x7a>
		return ReadBuf(6);
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	66 e0       	ldi	r22, 0x06	; 6
    1eaa:	ce 01       	movw	r24, r28
    1eac:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN7SCServo7ReadBufEhPh>
    1eb0:	05 c0       	rjmp	.+10     	; 0x1ebc <_ZN7SCServo12EnableTorqueEhhh+0x7e>
	return 0;
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <_ZN7SCServo12EnableTorqueEhhh+0x7e>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
}
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	ff 90       	pop	r15
    1ec6:	08 95       	ret

00001ec8 <_ZN7SCServo8WritePosEhiih>:

int SCServo::WritePos(byte ID, int position, int velocity, byte ReturnLevel)
{
    1ec8:	cf 92       	push	r12
    1eca:	df 92       	push	r13
    1ecc:	ef 92       	push	r14
    1ece:	ff 92       	push	r15
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	ec 01       	movw	r28, r24
    1eda:	c6 2e       	mov	r12, r22
    1edc:	e4 2e       	mov	r14, r20
    1ede:	15 2f       	mov	r17, r21
    1ee0:	d2 2e       	mov	r13, r18
    1ee2:	f3 2e       	mov	r15, r19
	byte posL = position>>8;
	byte posH = position&0xff;	
	byte velL = velocity>>8;
	byte velH = velocity&0xff;

	fflushRevBuf();
    1ee4:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <_ZN7SCServo12fflushRevBufEv>
		_SCSserial.end();
}

void SCServo::Printf(byte reg)
{
	_SCSserial.write(reg);
    1ee8:	6f ef       	ldi	r22, 0xFF	; 255
    1eea:	ce 01       	movw	r24, r28
    1eec:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1ef0:	6f ef       	ldi	r22, 0xFF	; 255
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1ef8:	6c 2d       	mov	r22, r12
    1efa:	ce 01       	movw	r24, r28
    1efc:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1f00:	67 e0       	ldi	r22, 0x07	; 7
    1f02:	ce 01       	movw	r24, r28
    1f04:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1f08:	63 e0       	ldi	r22, 0x03	; 3
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1f10:	6a e2       	ldi	r22, 0x2A	; 42
    1f12:	ce 01       	movw	r24, r28
    1f14:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1f18:	61 2f       	mov	r22, r17
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1f20:	6e 2d       	mov	r22, r14
    1f22:	ce 01       	movw	r24, r28
    1f24:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1f28:	6f 2d       	mov	r22, r15
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1f30:	6d 2d       	mov	r22, r13
    1f32:	ce 01       	movw	r24, r28
    1f34:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
    1f38:	64 e3       	ldi	r22, 0x34	; 52
    1f3a:	6c 0d       	add	r22, r12
    1f3c:	d6 0e       	add	r13, r22
    1f3e:	ed 0c       	add	r14, r13
    1f40:	fe 0c       	add	r15, r14
	Printf(P_GOAL_POSITION_L);
	Printf(posL);
	Printf(posH);
	Printf(velL);
	Printf(velH);
	Printf((~(ID + messageLength + INST_WRITE + P_GOAL_POSITION_L + posL + posH + velL + velH))&0xFF);
    1f42:	1f 0d       	add	r17, r15
    1f44:	61 2f       	mov	r22, r17
    1f46:	60 95       	com	r22
		_SCSserial.end();
}

void SCServo::Printf(byte reg)
{
	_SCSserial.write(reg);
    1f48:	ce 01       	movw	r24, r28
    1f4a:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN14SoftwareSerial5writeEh>
	Printf(posL);
	Printf(posH);
	Printf(velL);
	Printf(velH);
	Printf((~(ID + messageLength + INST_WRITE + P_GOAL_POSITION_L + posL + posH + velL + velH))&0xFF);
	if(ID != 0xfe && ReturnLevel==2)
    1f4e:	8e ef       	ldi	r24, 0xFE	; 254
    1f50:	c8 16       	cp	r12, r24
    1f52:	49 f0       	breq	.+18     	; 0x1f66 <_ZN7SCServo8WritePosEhiih+0x9e>
    1f54:	02 30       	cpi	r16, 0x02	; 2
    1f56:	51 f4       	brne	.+20     	; 0x1f6c <_ZN7SCServo8WritePosEhiih+0xa4>
		return ReadBuf(6);
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	66 e0       	ldi	r22, 0x06	; 6
    1f5e:	ce 01       	movw	r24, r28
    1f60:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN7SCServo7ReadBufEhPh>
    1f64:	05 c0       	rjmp	.+10     	; 0x1f70 <_ZN7SCServo8WritePosEhiih+0xa8>
	return 0;
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <_ZN7SCServo8WritePosEhiih+0xa8>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
}
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	cf 90       	pop	r12
    1f80:	08 95       	ret

00001f82 <__udivmodsi4>:
    1f82:	a1 e2       	ldi	r26, 0x21	; 33
    1f84:	1a 2e       	mov	r1, r26
    1f86:	aa 1b       	sub	r26, r26
    1f88:	bb 1b       	sub	r27, r27
    1f8a:	fd 01       	movw	r30, r26
    1f8c:	0d c0       	rjmp	.+26     	; 0x1fa8 <__udivmodsi4_ep>

00001f8e <__udivmodsi4_loop>:
    1f8e:	aa 1f       	adc	r26, r26
    1f90:	bb 1f       	adc	r27, r27
    1f92:	ee 1f       	adc	r30, r30
    1f94:	ff 1f       	adc	r31, r31
    1f96:	a2 17       	cp	r26, r18
    1f98:	b3 07       	cpc	r27, r19
    1f9a:	e4 07       	cpc	r30, r20
    1f9c:	f5 07       	cpc	r31, r21
    1f9e:	20 f0       	brcs	.+8      	; 0x1fa8 <__udivmodsi4_ep>
    1fa0:	a2 1b       	sub	r26, r18
    1fa2:	b3 0b       	sbc	r27, r19
    1fa4:	e4 0b       	sbc	r30, r20
    1fa6:	f5 0b       	sbc	r31, r21

00001fa8 <__udivmodsi4_ep>:
    1fa8:	66 1f       	adc	r22, r22
    1faa:	77 1f       	adc	r23, r23
    1fac:	88 1f       	adc	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	1a 94       	dec	r1
    1fb2:	69 f7       	brne	.-38     	; 0x1f8e <__udivmodsi4_loop>
    1fb4:	60 95       	com	r22
    1fb6:	70 95       	com	r23
    1fb8:	80 95       	com	r24
    1fba:	90 95       	com	r25
    1fbc:	9b 01       	movw	r18, r22
    1fbe:	ac 01       	movw	r20, r24
    1fc0:	bd 01       	movw	r22, r26
    1fc2:	cf 01       	movw	r24, r30
    1fc4:	08 95       	ret

00001fc6 <__umulhisi3>:
    1fc6:	a2 9f       	mul	r26, r18
    1fc8:	b0 01       	movw	r22, r0
    1fca:	b3 9f       	mul	r27, r19
    1fcc:	c0 01       	movw	r24, r0
    1fce:	a3 9f       	mul	r26, r19
    1fd0:	70 0d       	add	r23, r0
    1fd2:	81 1d       	adc	r24, r1
    1fd4:	11 24       	eor	r1, r1
    1fd6:	91 1d       	adc	r25, r1
    1fd8:	b2 9f       	mul	r27, r18
    1fda:	70 0d       	add	r23, r0
    1fdc:	81 1d       	adc	r24, r1
    1fde:	11 24       	eor	r1, r1
    1fe0:	91 1d       	adc	r25, r1
    1fe2:	08 95       	ret

00001fe4 <__tablejump2__>:
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	05 90       	lpm	r0, Z+
    1fea:	f4 91       	lpm	r31, Z
    1fec:	e0 2d       	mov	r30, r0
    1fee:	09 94       	ijmp

00001ff0 <memcpy>:
    1ff0:	fb 01       	movw	r30, r22
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <memcpy+0xa>
    1ff6:	01 90       	ld	r0, Z+
    1ff8:	0d 92       	st	X+, r0
    1ffa:	41 50       	subi	r20, 0x01	; 1
    1ffc:	50 40       	sbci	r21, 0x00	; 0
    1ffe:	d8 f7       	brcc	.-10     	; 0x1ff6 <memcpy+0x6>
    2000:	08 95       	ret

00002002 <__do_global_dtors>:
    2002:	10 e0       	ldi	r17, 0x00	; 0
    2004:	c2 e6       	ldi	r28, 0x62	; 98
    2006:	d0 e0       	ldi	r29, 0x00	; 0
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <__do_global_dtors+0x10>
    200a:	fe 01       	movw	r30, r28
    200c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__tablejump2__>
    2010:	21 96       	adiw	r28, 0x01	; 1
    2012:	c3 36       	cpi	r28, 0x63	; 99
    2014:	d1 07       	cpc	r29, r17
    2016:	c9 f7       	brne	.-14     	; 0x200a <__do_global_dtors+0x8>
    2018:	f8 94       	cli

0000201a <__stop_program>:
    201a:	ff cf       	rjmp	.-2      	; 0x201a <__stop_program>
