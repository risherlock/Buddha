
dmxSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00001e78  00001f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fc  0080015e  0080015e  00001f6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a8  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d48  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020eb  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d06  00000000  00000000  0000a2b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c88  00000000  00000000  0000cfc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b62  00000000  00000000  0000dc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004e0e  00000000  00000000  0000f7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  000145b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
       6:	00 00       	nop
       8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
       a:	00 00       	nop
       c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
       e:	00 00       	nop
      10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
      12:	00 00       	nop
      14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
      16:	00 00       	nop
      18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
      1e:	00 00       	nop
      20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__vector_9>
      28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__vector_11>
      30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
      32:	00 00       	nop
      34:	6b c4       	rjmp	.+2262   	; 0x90c <__vector_13>
      36:	00 00       	nop
      38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
      3e:	00 00       	nop
      40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
      42:	00 00       	nop
      44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
      46:	00 00       	nop
      48:	84 c0       	rjmp	.+264    	; 0x152 <__vector_18>
      4a:	00 00       	nop
      4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__vector_20>
      54:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__vector_21>
      58:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__vector_22>
      5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
      5e:	00 00       	nop
      60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
      62:	00 00       	nop
      64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
      66:	00 00       	nop
      68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d4 c2       	rjmp	.+1448   	; 0x61a <__vector_28>
      72:	00 00       	nop
      74:	af c3       	rjmp	.+1886   	; 0x7d4 <__vector_29>
      76:	00 00       	nop
      78:	5e c3       	rjmp	.+1724   	; 0x736 <__vector_30>
      7a:	00 00       	nop
      7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
      7e:	00 00       	nop
      80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
      82:	00 00       	nop
      84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
      86:	00 00       	nop
      88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	28 01       	movw	r4, r16
      8e:	2c 01       	movw	r4, r24
      90:	1c 01       	movw	r2, r24
      92:	22 01       	movw	r4, r4
      94:	47 01       	movw	r8, r14
      96:	47 01       	movw	r8, r14
      98:	30 01       	movw	r6, r0
      9a:	36 01       	movw	r6, r12
      9c:	3c 01       	movw	r6, r24
      9e:	42 01       	movw	r8, r4

000000a0 <__trampolines_end>:
      a0:	00 00       	nop
      a2:	00 01       	movw	r0, r0
      a4:	02 00       	.word	0x0002	; ????
      a6:	09 0a       	sbc	r0, r25
      a8:	00 00       	nop
      aa:	00 00       	nop
      ac:	04 03       	mulsu	r16, r20
      ae:	08 07       	cpc	r16, r24
	...

000000c0 <digital_pin_to_bit_mask_PGM>:
      c0:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      d0:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000e0 <digital_pin_to_port_PGM>:
      e0:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
      f0:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

00000100 <port_to_output_PGM>:
     100:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

0000010a <port_to_mode_PGM>:
     10a:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d0 e4       	ldi	r29, 0x40	; 64
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	e8 e7       	ldi	r30, 0x78	; 120
     128:	fe e1       	ldi	r31, 0x1E	; 30
     12a:	00 e0       	ldi	r16, 0x00	; 0
     12c:	0b bf       	out	0x3b, r16	; 59
     12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x14>
     130:	07 90       	elpm	r0, Z+
     132:	0d 92       	st	X+, r0
     134:	ae 35       	cpi	r26, 0x5E	; 94
     136:	b1 07       	cpc	r27, r17
     138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0x10>

0000013a <__do_clear_bss>:
     13a:	25 e0       	ldi	r18, 0x05	; 5
     13c:	ae e5       	ldi	r26, 0x5E	; 94
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
     142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
     144:	aa 35       	cpi	r26, 0x5A	; 90
     146:	b2 07       	cpc	r27, r18
     148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
     14a:	73 d4       	rcall	.+2278   	; 0xa32 <main>
     14c:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <_exit>

00000150 <__bad_interrupt>:
     150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <__vector_18>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     152:	1f 92       	push	r1
     154:	0f 92       	push	r0
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	0f 92       	push	r0
     15a:	11 24       	eor	r1, r1
     15c:	2f 93       	push	r18
     15e:	3f 93       	push	r19
     160:	8f 93       	push	r24
     162:	9f 93       	push	r25
     164:	af 93       	push	r26
     166:	bf 93       	push	r27
     168:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <timer0_millis>
     16c:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <timer0_millis+0x1>
     170:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <timer0_millis+0x2>
     174:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <timer0_millis+0x3>
     178:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <__data_end>
     17c:	23 e0       	ldi	r18, 0x03	; 3
     17e:	23 0f       	add	r18, r19
     180:	2d 37       	cpi	r18, 0x7D	; 125
     182:	20 f4       	brcc	.+8      	; 0x18c <__vector_18+0x3a>
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	a1 1d       	adc	r26, r1
     188:	b1 1d       	adc	r27, r1
     18a:	05 c0       	rjmp	.+10     	; 0x196 <__vector_18+0x44>
     18c:	26 e8       	ldi	r18, 0x86	; 134
     18e:	23 0f       	add	r18, r19
     190:	02 96       	adiw	r24, 0x02	; 2
     192:	a1 1d       	adc	r26, r1
     194:	b1 1d       	adc	r27, r1
     196:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <__data_end>
     19a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <timer0_millis>
     19e:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <timer0_millis+0x1>
     1a2:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <timer0_millis+0x2>
     1a6:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <timer0_millis+0x3>
     1aa:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <timer0_overflow_count>
     1ae:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <timer0_overflow_count+0x1>
     1b2:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <timer0_overflow_count+0x2>
     1b6:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <timer0_overflow_count+0x3>
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	a1 1d       	adc	r26, r1
     1be:	b1 1d       	adc	r27, r1
     1c0:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <timer0_overflow_count>
     1c4:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <timer0_overflow_count+0x1>
     1c8:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <timer0_overflow_count+0x2>
     1cc:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <timer0_overflow_count+0x3>
     1d0:	bf 91       	pop	r27
     1d2:	af 91       	pop	r26
     1d4:	9f 91       	pop	r25
     1d6:	8f 91       	pop	r24
     1d8:	3f 91       	pop	r19
     1da:	2f 91       	pop	r18
     1dc:	0f 90       	pop	r0
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	0f 90       	pop	r0
     1e2:	1f 90       	pop	r1
     1e4:	18 95       	reti

000001e6 <millis>:
     1e6:	2f b7       	in	r18, 0x3f	; 63
     1e8:	f8 94       	cli
     1ea:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <timer0_millis>
     1ee:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <timer0_millis+0x1>
     1f2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <timer0_millis+0x2>
     1f6:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <timer0_millis+0x3>
     1fa:	2f bf       	out	0x3f, r18	; 63
     1fc:	08 95       	ret

000001fe <init>:
	// return = 4 cycles
}

void init()
{
	sei();
     1fe:	78 94       	sei
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     200:	84 b5       	in	r24, 0x24	; 36
     202:	82 60       	ori	r24, 0x02	; 2
     204:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     206:	84 b5       	in	r24, 0x24	; 36
     208:	81 60       	ori	r24, 0x01	; 1
     20a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     20c:	85 b5       	in	r24, 0x25	; 37
     20e:	82 60       	ori	r24, 0x02	; 2
     210:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     212:	85 b5       	in	r24, 0x25	; 37
     214:	81 60       	ori	r24, 0x01	; 1
     216:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     218:	ee e6       	ldi	r30, 0x6E	; 110
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	81 60       	ori	r24, 0x01	; 1
     220:	80 83       	st	Z, r24
     222:	08 95       	ret

00000224 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	fc 01       	movw	r30, r24
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	ea 30       	cpi	r30, 0x0A	; 10
     22c:	f1 05       	cpc	r31, r1
     22e:	78 f5       	brcc	.+94     	; 0x28e <turnOffPWM+0x6a>
     230:	ea 5b       	subi	r30, 0xBA	; 186
     232:	ff 4f       	sbci	r31, 0xFF	; 255
     234:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     238:	e0 e8       	ldi	r30, 0x80	; 128
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	8f 77       	andi	r24, 0x7F	; 127
     240:	80 83       	st	Z, r24
     242:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     244:	e0 e8       	ldi	r30, 0x80	; 128
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	8f 7d       	andi	r24, 0xDF	; 223
     24c:	80 83       	st	Z, r24
     24e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     250:	84 b5       	in	r24, 0x24	; 36
     252:	8f 77       	andi	r24, 0x7F	; 127
     254:	84 bd       	out	0x24, r24	; 36
     256:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     258:	84 b5       	in	r24, 0x24	; 36
     25a:	8f 7d       	andi	r24, 0xDF	; 223
     25c:	84 bd       	out	0x24, r24	; 36
     25e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     260:	e0 eb       	ldi	r30, 0xB0	; 176
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	8f 77       	andi	r24, 0x7F	; 127
     268:	80 83       	st	Z, r24
     26a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     26c:	e0 eb       	ldi	r30, 0xB0	; 176
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	8f 7d       	andi	r24, 0xDF	; 223
     274:	80 83       	st	Z, r24
     276:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     278:	e0 e9       	ldi	r30, 0x90	; 144
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	8f 77       	andi	r24, 0x7F	; 127
     280:	80 83       	st	Z, r24
     282:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     284:	e0 e9       	ldi	r30, 0x90	; 144
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	8f 7d       	andi	r24, 0xDF	; 223
     28c:	80 83       	st	Z, r24
     28e:	08 95       	ret

00000290 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	fc 01       	movw	r30, r24
     298:	e0 54       	subi	r30, 0x40	; 64
     29a:	ff 4f       	sbci	r31, 0xFF	; 255
     29c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     29e:	fc 01       	movw	r30, r24
     2a0:	e0 52       	subi	r30, 0x20	; 32
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     2a6:	88 23       	and	r24, r24
     2a8:	79 f1       	breq	.+94     	; 0x308 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	fc 01       	movw	r30, r24
     2b2:	e6 5f       	subi	r30, 0xF6	; 246
     2b4:	fe 4f       	sbci	r31, 0xFE	; 254
     2b6:	a5 91       	lpm	r26, Z+
     2b8:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     2ba:	fc 01       	movw	r30, r24
     2bc:	e0 50       	subi	r30, 0x00	; 0
     2be:	ff 4f       	sbci	r31, 0xFF	; 255
     2c0:	c5 91       	lpm	r28, Z+
     2c2:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     2c4:	61 11       	cpse	r22, r1
     2c6:	0c c0       	rjmp	.+24     	; 0x2e0 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     2c8:	9f b7       	in	r25, 0x3f	; 63
                cli();
     2ca:	f8 94       	cli
		*reg &= ~bit;
     2cc:	8c 91       	ld	r24, X
     2ce:	e2 2f       	mov	r30, r18
     2d0:	e0 95       	com	r30
     2d2:	8e 23       	and	r24, r30
     2d4:	8c 93       	st	X, r24
		*out &= ~bit;
     2d6:	28 81       	ld	r18, Y
     2d8:	e2 23       	and	r30, r18
     2da:	e8 83       	st	Y, r30
		SREG = oldSREG;
     2dc:	9f bf       	out	0x3f, r25	; 63
     2de:	14 c0       	rjmp	.+40     	; 0x308 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     2e0:	62 30       	cpi	r22, 0x02	; 2
     2e2:	61 f4       	brne	.+24     	; 0x2fc <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     2e4:	9f b7       	in	r25, 0x3f	; 63
                cli();
     2e6:	f8 94       	cli
		*reg &= ~bit;
     2e8:	8c 91       	ld	r24, X
     2ea:	32 2f       	mov	r19, r18
     2ec:	30 95       	com	r19
     2ee:	83 23       	and	r24, r19
     2f0:	8c 93       	st	X, r24
		*out |= bit;
     2f2:	e8 81       	ld	r30, Y
     2f4:	e2 2b       	or	r30, r18
     2f6:	e8 83       	st	Y, r30
		SREG = oldSREG;
     2f8:	9f bf       	out	0x3f, r25	; 63
     2fa:	06 c0       	rjmp	.+12     	; 0x308 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     2fc:	8f b7       	in	r24, 0x3f	; 63
                cli();
     2fe:	f8 94       	cli
		*reg |= bit;
     300:	ec 91       	ld	r30, X
     302:	e2 2b       	or	r30, r18
     304:	ec 93       	st	X, r30
		SREG = oldSREG;
     306:	8f bf       	out	0x3f, r24	; 63
	}
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     314:	28 2f       	mov	r18, r24
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	f9 01       	movw	r30, r18
     31a:	e0 56       	subi	r30, 0x60	; 96
     31c:	ff 4f       	sbci	r31, 0xFF	; 255
     31e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     320:	f9 01       	movw	r30, r18
     322:	e0 54       	subi	r30, 0x40	; 64
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     328:	f9 01       	movw	r30, r18
     32a:	e0 52       	subi	r30, 0x20	; 32
     32c:	ff 4f       	sbci	r31, 0xFF	; 255
     32e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     330:	cc 23       	and	r28, r28
     332:	c9 f0       	breq	.+50     	; 0x366 <digitalWrite+0x58>
     334:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     336:	81 11       	cpse	r24, r1
     338:	75 df       	rcall	.-278    	; 0x224 <turnOffPWM>

	out = portOutputRegister(port);
     33a:	ec 2f       	mov	r30, r28
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	ee 0f       	add	r30, r30
     340:	ff 1f       	adc	r31, r31
     342:	e0 50       	subi	r30, 0x00	; 0
     344:	ff 4f       	sbci	r31, 0xFF	; 255
     346:	a5 91       	lpm	r26, Z+
     348:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     34a:	8f b7       	in	r24, 0x3f	; 63
	cli();
     34c:	f8 94       	cli

	if (val == LOW) {
     34e:	d1 11       	cpse	r29, r1
     350:	06 c0       	rjmp	.+12     	; 0x35e <digitalWrite+0x50>
		*out &= ~bit;
     352:	9c 91       	ld	r25, X
     354:	e1 2f       	mov	r30, r17
     356:	e0 95       	com	r30
     358:	e9 23       	and	r30, r25
     35a:	ec 93       	st	X, r30
     35c:	03 c0       	rjmp	.+6      	; 0x364 <digitalWrite+0x56>
	} else {
		*out |= bit;
     35e:	ec 91       	ld	r30, X
     360:	e1 2b       	or	r30, r17
     362:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     364:	8f bf       	out	0x3f, r24	; 63
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	08 95       	ret

0000036e <_ZN3DMX8panSweepEhh>:
	DMXSerial.write(DMX_SPEED, _speed);
	DMXSerial.write(DMX_TILT, tilt_value);	
}

void DMX::lightsOff(){
	DMXSerial.write(DMX_EFFECTS, _DMX_EFFECTS_noEFFECT);
     36e:	cf 93       	push	r28
     370:	c8 2f       	mov	r28, r24
     372:	46 2f       	mov	r20, r22
     374:	40 95       	com	r20
     376:	65 e0       	ldi	r22, 0x05	; 5
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	87 e6       	ldi	r24, 0x67	; 103
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	a0 d0       	rcall	.+320    	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
     380:	4c 2f       	mov	r20, r28
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	87 e6       	ldi	r24, 0x67	; 103
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	9a d0       	rcall	.+308    	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <_ZN3DMX9tiltSweepEhh>:
     390:	cf 93       	push	r28
     392:	c8 2f       	mov	r28, r24
     394:	46 2f       	mov	r20, r22
     396:	40 95       	com	r20
     398:	65 e0       	ldi	r22, 0x05	; 5
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	87 e6       	ldi	r24, 0x67	; 103
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	8f d0       	rcall	.+286    	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
     3a2:	4c 2f       	mov	r20, r28
     3a4:	63 e0       	ldi	r22, 0x03	; 3
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	87 e6       	ldi	r24, 0x67	; 103
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	89 d0       	rcall	.+274    	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <_ZN3DMX10sweepAngleE8motorSeljh>:
     3b2:	cf 93       	push	r28
     3b4:	c4 2f       	mov	r28, r20
     3b6:	88 23       	and	r24, r24
     3b8:	19 f0       	breq	.+6      	; 0x3c0 <_ZN3DMX10sweepAngleE8motorSeljh+0xe>
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	d1 f0       	breq	.+52     	; 0x3f2 <_ZN3DMX10sweepAngleE8motorSeljh+0x40>
     3be:	30 c0       	rjmp	.+96     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3c0:	86 2f       	mov	r24, r22
     3c2:	97 2f       	mov	r25, r23
     3c4:	8d 31       	cpi	r24, 0x1D	; 29
     3c6:	22 e0       	ldi	r18, 0x02	; 2
     3c8:	92 07       	cpc	r25, r18
     3ca:	10 f0       	brcs	.+4      	; 0x3d0 <_ZN3DMX10sweepAngleE8motorSeljh+0x1e>
     3cc:	8c e1       	ldi	r24, 0x1C	; 28
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	bc 01       	movw	r22, r24
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__floatunsisf>
     3da:	2c e1       	ldi	r18, 0x1C	; 28
     3dc:	37 ec       	ldi	r19, 0xC7	; 199
     3de:	41 ef       	ldi	r20, 0xF1	; 241
     3e0:	5e e3       	ldi	r21, 0x3E	; 62
     3e2:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__mulsf3>
     3e6:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__fixunssfsi>
     3ea:	86 2f       	mov	r24, r22
     3ec:	6c 2f       	mov	r22, r28
     3ee:	bf df       	rcall	.-130    	; 0x36e <_ZN3DMX8panSweepEhh>
     3f0:	17 c0       	rjmp	.+46     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3f2:	86 2f       	mov	r24, r22
     3f4:	97 2f       	mov	r25, r23
     3f6:	8b 35       	cpi	r24, 0x5B	; 91
     3f8:	91 05       	cpc	r25, r1
     3fa:	10 f0       	brcs	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	8a e5       	ldi	r24, 0x5A	; 90
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	bc 01       	movw	r22, r24
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__floatunsisf>
     40a:	25 e5       	ldi	r18, 0x55	; 85
     40c:	35 e5       	ldi	r19, 0x55	; 85
     40e:	45 e3       	ldi	r20, 0x35	; 53
     410:	50 e4       	ldi	r21, 0x40	; 64
     412:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__mulsf3>
     416:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__fixunssfsi>
     41a:	86 2f       	mov	r24, r22
     41c:	6c 2f       	mov	r22, r28
     41e:	b8 df       	rcall	.-144    	; 0x390 <_ZN3DMX9tiltSweepEhh>
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <_ZN3DMX9setColourEm6effect>:
 * Each hex takes 4 bits
 * Right shift by 16 bits turns 0xRRGGBB to 0xRR
 * Masking with 0xff takes only first 3 bits
 * eg: hex_rgb = 0xff234d;
 */	
void DMX::setColour(uint32_t hex_rgb, effect _effect){
     424:	4f 92       	push	r4
     426:	5f 92       	push	r5
     428:	6f 92       	push	r6
     42a:	7f 92       	push	r7
     42c:	8f 92       	push	r8
     42e:	9f 92       	push	r9
     430:	af 92       	push	r10
     432:	bf 92       	push	r11
     434:	cf 92       	push	r12
     436:	df 92       	push	r13
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	6b 01       	movw	r12, r22
     43e:	7c 01       	movw	r14, r24
	
	int red, green, blue;
    red		= ((hex_rgb>>16) & 0xff);
     440:	2c 01       	movw	r4, r24
     442:	66 24       	eor	r6, r6
     444:	77 24       	eor	r7, r7
	green	= ((hex_rgb>>8) & 0xff);
     446:	87 2e       	mov	r8, r23
     448:	98 2e       	mov	r9, r24
     44a:	a9 2e       	mov	r10, r25
     44c:	bb 24       	eor	r11, r11
	blue	= ((hex_rgb>>0) & 0xff);
	
	switch (_effect)
     44e:	41 30       	cpi	r20, 0x01	; 1
     450:	59 f0       	breq	.+22     	; 0x468 <_ZN3DMX9setColourEm6effect+0x44>
     452:	18 f0       	brcs	.+6      	; 0x45a <_ZN3DMX9setColourEm6effect+0x36>
     454:	42 30       	cpi	r20, 0x02	; 2
     456:	79 f0       	breq	.+30     	; 0x476 <_ZN3DMX9setColourEm6effect+0x52>
     458:	14 c0       	rjmp	.+40     	; 0x482 <_ZN3DMX9setColourEm6effect+0x5e>
	{
		case effSTROBE:
			DMXSerial.write(DMX_EFFECTS, _DMX_EFFECTS_STROBE_MAX);
     45a:	4f ee       	ldi	r20, 0xEF	; 239
     45c:	66 e0       	ldi	r22, 0x06	; 6
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	87 e6       	ldi	r24, 0x67	; 103
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	2d d0       	rcall	.+90     	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
			break;
     466:	0d c0       	rjmp	.+26     	; 0x482 <_ZN3DMX9setColourEm6effect+0x5e>
						
		case effCONSTANT:
			DMXSerial.write(DMX_EFFECTS, _DMX_EFFECTS_CONSTANT);
     468:	4f ef       	ldi	r20, 0xFF	; 255
     46a:	66 e0       	ldi	r22, 0x06	; 6
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	87 e6       	ldi	r24, 0x67	; 103
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	26 d0       	rcall	.+76     	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
			break;
     474:	06 c0       	rjmp	.+12     	; 0x482 <_ZN3DMX9setColourEm6effect+0x5e>
			
		case effNoEFFECT:
			DMXSerial.write(DMX_EFFECTS, _DMX_EFFECTS_noEFFECT);
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	66 e0       	ldi	r22, 0x06	; 6
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	87 e6       	ldi	r24, 0x67	; 103
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	1f d0       	rcall	.+62     	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
			break;	
	}
	DMXSerial.write(DMX_RED, red);
     482:	44 2d       	mov	r20, r4
     484:	67 e0       	ldi	r22, 0x07	; 7
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	87 e6       	ldi	r24, 0x67	; 103
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	19 d0       	rcall	.+50     	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
	DMXSerial.write(DMX_GREEN, green);
     48e:	48 2d       	mov	r20, r8
     490:	68 e0       	ldi	r22, 0x08	; 8
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	13 d0       	rcall	.+38     	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
	DMXSerial.write(DMX_BLUE, blue);
     49a:	4c 2d       	mov	r20, r12
     49c:	69 e0       	ldi	r22, 0x09	; 9
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	87 e6       	ldi	r24, 0x67	; 103
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0d d0       	rcall	.+26     	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	bf 90       	pop	r11
     4b0:	af 90       	pop	r10
     4b2:	9f 90       	pop	r9
     4b4:	8f 90       	pop	r8
     4b6:	7f 90       	pop	r7
     4b8:	6f 90       	pop	r6
     4ba:	5f 90       	pop	r5
     4bc:	4f 90       	pop	r4
     4be:	08 95       	ret

000004c0 <_ZN14DMXSerialClass5writeEih>:
// ----- Class implementation -----

// Initialize the specified mode.
void DMXSerialClass::init(int mode)
{
  init(mode, DMXMODEPIN);
     4c0:	16 16       	cp	r1, r22
     4c2:	17 06       	cpc	r1, r23
     4c4:	14 f0       	brlt	.+4      	; 0x4ca <_ZN14DMXSerialClass5writeEih+0xa>
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	61 30       	cpi	r22, 0x01	; 1
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	78 07       	cpc	r23, r24
     4d0:	14 f0       	brlt	.+4      	; 0x4d6 <_ZN14DMXSerialClass5writeEih+0x16>
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	72 e0       	ldi	r23, 0x02	; 2
     4d6:	fb 01       	movw	r30, r22
     4d8:	e4 59       	subi	r30, 0x94	; 148
     4da:	fe 4f       	sbci	r31, 0xFE	; 254
     4dc:	40 83       	st	Z, r20
     4de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_dmxMaxChannel>
     4e2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_dmxMaxChannel+0x1>
     4e6:	86 17       	cp	r24, r22
     4e8:	97 07       	cpc	r25, r23
     4ea:	70 f4       	brcc	.+28     	; 0x508 <_ZN14DMXSerialClass5writeEih+0x48>
     4ec:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_dmxMaxChannel+0x1>
     4f0:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_dmxMaxChannel>
     4f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_dmxMaxChannel>
     4f8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_dmxMaxChannel+0x1>
     4fc:	84 59       	subi	r24, 0x94	; 148
     4fe:	9e 4f       	sbci	r25, 0xFE	; 254
     500:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <_dmxDataLastPtr+0x1>
     504:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <_dmxDataLastPtr>
     508:	08 95       	ret

0000050a <_Z14_DMXSerialInitjhh>:
     50a:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     50e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     512:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     516:	60 93 c9 00 	sts	0x00C9, r22	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     51a:	40 93 ca 00 	sts	0x00CA, r20	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     51e:	08 95       	ret

00000520 <_Z16_DMXStartSendingv>:
     520:	46 e2       	ldi	r20, 0x26	; 38
     522:	68 e4       	ldi	r22, 0x48	; 72
     524:	89 e0       	ldi	r24, 0x09	; 9
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	f0 df       	rcall	.-32     	; 0x50a <_Z14_DMXSerialInitjhh>
     52a:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     52e:	08 95       	ret

00000530 <_Z18_DMXStartReceivingv>:
     530:	8c e6       	ldi	r24, 0x6C	; 108
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <_dmxDataPtr+0x1>
     538:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <_dmxDataPtr>
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <_dmxRecvState>
     542:	4e e0       	ldi	r20, 0x0E	; 14
     544:	60 e9       	ldi	r22, 0x90	; 144
     546:	83 e0       	ldi	r24, 0x03	; 3
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	df df       	rcall	.-66     	; 0x50a <_Z14_DMXSerialInitjhh>
     54c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     550:	88 23       	and	r24, r24
     552:	44 f4       	brge	.+16     	; 0x564 <_Z18_DMXStartReceivingv+0x34>
     554:	ae ec       	ldi	r26, 0xCE	; 206
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	e8 ec       	ldi	r30, 0xC8	; 200
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	8c 91       	ld	r24, X
     55e:	80 81       	ld	r24, Z
     560:	88 23       	and	r24, r24
     562:	e4 f3       	brlt	.-8      	; 0x55c <_Z18_DMXStartReceivingv+0x2c>
     564:	08 95       	ret

00000566 <_ZN14DMXSerialClass4initEii>:
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	c6 2f       	mov	r28, r22
     56c:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <_dmxMode>
     570:	50 93 75 03 	sts	0x0375, r21	; 0x800375 <_dmxModePin+0x1>
     574:	40 93 74 03 	sts	0x0374, r20	; 0x800374 <_dmxModePin>
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <_dmxRecvState>
     57e:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <_dmxChannel+0x1>
     582:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <_dmxChannel>
     586:	8c e6       	ldi	r24, 0x6C	; 108
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <_dmxDataPtr+0x1>
     58e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <_dmxDataPtr>
     592:	29 de       	rcall	.-942    	; 0x1e6 <millis>
     594:	60 93 6d 03 	sts	0x036D, r22	; 0x80036d <_dmxLastPacket>
     598:	70 93 6e 03 	sts	0x036E, r23	; 0x80036e <_dmxLastPacket+0x1>
     59c:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <_dmxLastPacket+0x2>
     5a0:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <_dmxLastPacket+0x3>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <_dmxMaxChannel+0x1>
     5ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_dmxMaxChannel>
     5b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_dmxMaxChannel>
     5b4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_dmxMaxChannel+0x1>
     5b8:	84 59       	subi	r24, 0x94	; 148
     5ba:	9e 4f       	sbci	r25, 0xFE	; 254
     5bc:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <_dmxDataLastPtr+0x1>
     5c0:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <_dmxDataLastPtr>
     5c4:	ec e6       	ldi	r30, 0x6C	; 108
     5c6:	f1 e0       	ldi	r31, 0x01	; 1
     5c8:	8d e6       	ldi	r24, 0x6D	; 109
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	11 92       	st	Z+, r1
     5ce:	e8 17       	cp	r30, r24
     5d0:	f9 07       	cpc	r31, r25
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <_ZN14DMXSerialClass4initEii+0x66>
     5d4:	c0 93 76 03 	sts	0x0376, r28	; 0x800376 <_dmxMode>
     5d8:	c1 50       	subi	r28, 0x01	; 1
     5da:	c3 30       	cpi	r28, 0x03	; 3
     5dc:	d8 f4       	brcc	.+54     	; 0x614 <_ZN14DMXSerialClass4initEii+0xae>
     5de:	c4 e7       	ldi	r28, 0x74	; 116
     5e0:	d3 e0       	ldi	r29, 0x03	; 3
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	88 81       	ld	r24, Y
     5e6:	54 de       	rcall	.-856    	; 0x290 <pinMode>
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	88 81       	ld	r24, Y
     5ec:	90 de       	rcall	.-736    	; 0x30e <digitalWrite>
     5ee:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <_dmxMode>
     5f2:	81 30       	cpi	r24, 0x01	; 1
     5f4:	61 f4       	brne	.+24     	; 0x60e <_ZN14DMXSerialClass4initEii+0xa8>
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <_dmxModePin>
     5fc:	88 de       	rcall	.-752    	; 0x30e <digitalWrite>
     5fe:	80 e2       	ldi	r24, 0x20	; 32
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <_dmxMaxChannel+0x1>
     606:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_dmxMaxChannel>
     60a:	8a df       	rcall	.-236    	; 0x520 <_Z16_DMXStartSendingv>
     60c:	03 c0       	rjmp	.+6      	; 0x614 <_ZN14DMXSerialClass4initEii+0xae>
     60e:	82 30       	cpi	r24, 0x02	; 2
     610:	09 f4       	brne	.+2      	; 0x614 <_ZN14DMXSerialClass4initEii+0xae>
     612:	8e df       	rcall	.-228    	; 0x530 <_Z18_DMXStartReceivingv>
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <__vector_28>:

// This Interrupt Service Routine is called when a byte or frame error was received.
// In DMXController mode this interrupt is disabled and will not occur.
// In DMXReceiver mode when a byte was received it is stored to the dmxData buffer.
ISR(USARTn_RX_vect)
{
     61a:	1f 92       	push	r1
     61c:	0f 92       	push	r0
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	0f 92       	push	r0
     622:	11 24       	eor	r1, r1
     624:	0b b6       	in	r0, 0x3b	; 59
     626:	0f 92       	push	r0
     628:	2f 93       	push	r18
     62a:	3f 93       	push	r19
     62c:	4f 93       	push	r20
     62e:	5f 93       	push	r21
     630:	6f 93       	push	r22
     632:	7f 93       	push	r23
     634:	8f 93       	push	r24
     636:	9f 93       	push	r25
     638:	af 93       	push	r26
     63a:	bf 93       	push	r27
     63c:	ef 93       	push	r30
     63e:	ff 93       	push	r31
  uint8_t  USARTstate = UCSRnA;    // get state before data!
     640:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  uint8_t  DmxByte    = UDRn;	   // get data
     644:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
  uint8_t  DmxState   = _dmxRecvState;	//just load once from SRAM to increase speed
     648:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <_dmxRecvState>

  if (DmxState == STARTUP) {
     64c:	81 30       	cpi	r24, 0x01	; 1
     64e:	21 f4       	brne	.+8      	; 0x658 <__vector_28+0x3e>
    // just ignore any first frame comming in
    _dmxRecvState = IDLE;
     650:	82 e0       	ldi	r24, 0x02	; 2
     652:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <_dmxRecvState>
    return;
     656:	5c c0       	rjmp	.+184    	; 0x710 <__vector_28+0xf6>
  }

  if (USARTstate & (1<<FEn)) {  	//check for break
     658:	94 ff       	sbrs	r25, 4
     65a:	0a c0       	rjmp	.+20     	; 0x670 <__vector_28+0x56>
    // break condition detected.
    _dmxRecvState = BREAK;
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <_dmxRecvState>
    _dmxDataPtr = _dmxData;
     662:	8c e6       	ldi	r24, 0x6C	; 108
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <_dmxDataPtr+0x1>
     66a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <_dmxDataPtr>
     66e:	50 c0       	rjmp	.+160    	; 0x710 <__vector_28+0xf6>
    
  } else if (DmxState == BREAK) {
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	e1 f4       	brne	.+56     	; 0x6ac <__vector_28+0x92>
    // first byte after a break was read.
    if (DmxByte == 0) {
     674:	21 11       	cpse	r18, r1
     676:	16 c0       	rjmp	.+44     	; 0x6a4 <__vector_28+0x8a>
      // normal DMX start code (0) detected
      _dmxRecvState = DATA;
     678:	84 e0       	ldi	r24, 0x04	; 4
     67a:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <_dmxRecvState>
      _dmxLastPacket = millis(); // remember current (relative) time in msecs.
     67e:	b3 dd       	rcall	.-1178   	; 0x1e6 <millis>
     680:	60 93 6d 03 	sts	0x036D, r22	; 0x80036d <_dmxLastPacket>
     684:	70 93 6e 03 	sts	0x036E, r23	; 0x80036e <_dmxLastPacket+0x1>
     688:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <_dmxLastPacket+0x2>
     68c:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <_dmxLastPacket+0x3>
      _dmxDataPtr++; // start saving data with channel # 1
     690:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <_dmxDataPtr>
     694:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <_dmxDataPtr+0x1>
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <_dmxDataPtr+0x1>
     69e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <_dmxDataPtr>
     6a2:	25 c0       	rjmp	.+74     	; 0x6ee <__vector_28+0xd4>

    } else {
      // This might be a RDM or customer DMX command -> not implemented so wait for next BREAK !
      _dmxRecvState = DONE;
     6a4:	85 e0       	ldi	r24, 0x05	; 5
     6a6:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <_dmxRecvState>
     6aa:	25 c0       	rjmp	.+74     	; 0x6f6 <__vector_28+0xdc>
    } // if

  } else if (DmxState == DATA) {
     6ac:	84 30       	cpi	r24, 0x04	; 4
     6ae:	f9 f4       	brne	.+62     	; 0x6ee <__vector_28+0xd4>
    // check for new data
    if (*_dmxDataPtr != DmxByte) {
     6b0:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <_dmxDataPtr>
     6b4:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <_dmxDataPtr+0x1>
     6b8:	80 81       	ld	r24, Z
     6ba:	28 17       	cp	r18, r24
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <__vector_28+0xac>
      _dmxUpdated = true;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
      // store received data into dmx data buffer.
      *_dmxDataPtr = DmxByte;
     6c4:	20 83       	st	Z, r18
    } // if
    _dmxDataPtr++;
     6c6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <_dmxDataPtr>
     6ca:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <_dmxDataPtr+0x1>
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <_dmxDataPtr+0x1>
     6d4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <_dmxDataPtr>
    
    if (_dmxDataPtr > _dmxDataLastPtr) {
     6d8:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <_dmxDataLastPtr>
     6dc:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <_dmxDataLastPtr+0x1>
     6e0:	28 17       	cp	r18, r24
     6e2:	39 07       	cpc	r19, r25
     6e4:	20 f4       	brcc	.+8      	; 0x6ee <__vector_28+0xd4>
      // all channels received.
      _dmxRecvState = DONE;
     6e6:	85 e0       	ldi	r24, 0x05	; 5
     6e8:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <_dmxRecvState>
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <__vector_28+0xdc>
    } // if
  } // if

  if (_dmxRecvState == DONE) {
     6ee:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <_dmxRecvState>
     6f2:	85 30       	cpi	r24, 0x05	; 5
     6f4:	69 f4       	brne	.+26     	; 0x710 <__vector_28+0xf6>
    if  (_dmxMode == DMXProbe) {
     6f6:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <_dmxMode>
     6fa:	83 30       	cpi	r24, 0x03	; 3
     6fc:	31 f4       	brne	.+12     	; 0x70a <__vector_28+0xf0>
      // stop listening on the serial port for now.
      // UCSRnB = 0;
      // continue listening without interrupts
       _DMXSerialInit(Calcprescale(DMXSPEED), (1 << RXENn), DMXFORMAT);
     6fe:	4e e0       	ldi	r20, 0x0E	; 14
     700:	60 e1       	ldi	r22, 0x10	; 16
     702:	83 e0       	ldi	r24, 0x03	; 3
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	01 df       	rcall	.-510    	; 0x50a <_Z14_DMXSerialInitjhh>
     708:	03 c0       	rjmp	.+6      	; 0x710 <__vector_28+0xf6>
      //UCSRnB = (1 << RXENn);
      
      
    } else {
      // continue on DMXReceiver mode.
      _dmxRecvState = IDLE;	// wait for next break
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <_dmxRecvState>
    }
  } // if
  
} // ISR(USARTn_RX_vect)
     710:	ff 91       	pop	r31
     712:	ef 91       	pop	r30
     714:	bf 91       	pop	r27
     716:	af 91       	pop	r26
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	7f 91       	pop	r23
     71e:	6f 91       	pop	r22
     720:	5f 91       	pop	r21
     722:	4f 91       	pop	r20
     724:	3f 91       	pop	r19
     726:	2f 91       	pop	r18
     728:	0f 90       	pop	r0
     72a:	0b be       	out	0x3b, r0	; 59
     72c:	0f 90       	pop	r0
     72e:	0f be       	out	0x3f, r0	; 63
     730:	0f 90       	pop	r0
     732:	1f 90       	pop	r1
     734:	18 95       	reti

00000736 <__vector_30>:
// which occurs shortly after the start bit of the *previous* byte
// When sending a DMX sequence it just takes the next channel byte and sends it out.
// In DMXController mode when the buffer was sent completely the DMX sequence will resent, starting with a BREAK pattern.
// In DMXReceiver mode this interrupt is disabled and will not occur.
ISR(USARTn_TX_vect)
{
     736:	1f 92       	push	r1
     738:	0f 92       	push	r0
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	0f 92       	push	r0
     73e:	11 24       	eor	r1, r1
     740:	0b b6       	in	r0, 0x3b	; 59
     742:	0f 92       	push	r0
     744:	2f 93       	push	r18
     746:	3f 93       	push	r19
     748:	4f 93       	push	r20
     74a:	5f 93       	push	r21
     74c:	6f 93       	push	r22
     74e:	7f 93       	push	r23
     750:	8f 93       	push	r24
     752:	9f 93       	push	r25
     754:	af 93       	push	r26
     756:	bf 93       	push	r27
     758:	ef 93       	push	r30
     75a:	ff 93       	push	r31
  if ((_dmxMode == DMXController) && (_dmxChannel == -1)) {
     75c:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <_dmxMode>
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	91 f4       	brne	.+36     	; 0x788 <__vector_30+0x52>
     764:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <_dmxChannel>
     768:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <_dmxChannel+0x1>
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	61 f4       	brne	.+24     	; 0x788 <__vector_30+0x52>
    // this interrupt occurs after the stop bits of the last data byte
    // start sending a BREAK and loop forever in ISR
    _DMXSerialInit(Calcprescale(BREAKSPEED), ((1 << TXENn) | (1 << TXCIEn)), BREAKFORMAT);
     770:	46 e2       	ldi	r20, 0x26	; 38
     772:	68 e4       	ldi	r22, 0x48	; 72
     774:	89 e0       	ldi	r24, 0x09	; 9
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	c8 de       	rcall	.-624    	; 0x50a <_Z14_DMXSerialInitjhh>

// send the next byte after current byte was sent completely.
inline void _DMXSerialWriteByte(uint8_t data)
{
  // putting data into buffer sends the data
  UDRn = data;
     77a:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
  if ((_dmxMode == DMXController) && (_dmxChannel == -1)) {
    // this interrupt occurs after the stop bits of the last data byte
    // start sending a BREAK and loop forever in ISR
    _DMXSerialInit(Calcprescale(BREAKSPEED), ((1 << TXENn) | (1 << TXCIEn)), BREAKFORMAT);
    _DMXSerialWriteByte((uint8_t)0);
    _dmxChannel = 0;
     77e:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <_dmxChannel+0x1>
     782:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <_dmxChannel>
     786:	13 c0       	rjmp	.+38     	; 0x7ae <__vector_30+0x78>

  } else if (_dmxChannel == 0) {
     788:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <_dmxChannel>
     78c:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <_dmxChannel+0x1>
     790:	89 2b       	or	r24, r25
     792:	69 f4       	brne	.+26     	; 0x7ae <__vector_30+0x78>
    // this interrupt occurs after the stop bits of the break byte

    // now back to DMX speed: 250000baud
    // take next interrupt when data register empty (early)
    _DMXSerialInit(Calcprescale(DMXSPEED), ((1 << TXENn) | (1 << UDRIEn)), DMXFORMAT);
     794:	4e e0       	ldi	r20, 0x0E	; 14
     796:	68 e2       	ldi	r22, 0x28	; 40
     798:	83 e0       	ldi	r24, 0x03	; 3
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	b6 de       	rcall	.-660    	; 0x50a <_Z14_DMXSerialInitjhh>

// send the next byte after current byte was sent completely.
inline void _DMXSerialWriteByte(uint8_t data)
{
  // putting data into buffer sends the data
  UDRn = data;
     79e:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    // take next interrupt when data register empty (early)
    _DMXSerialInit(Calcprescale(DMXSPEED), ((1 << TXENn) | (1 << UDRIEn)), DMXFORMAT);

    // write start code
    _DMXSerialWriteByte((uint8_t)0);
    _dmxChannel = 1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <_dmxChannel+0x1>
     7aa:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <_dmxChannel>
  } // if
} // ISR(USARTn_TX_vect)
     7ae:	ff 91       	pop	r31
     7b0:	ef 91       	pop	r30
     7b2:	bf 91       	pop	r27
     7b4:	af 91       	pop	r26
     7b6:	9f 91       	pop	r25
     7b8:	8f 91       	pop	r24
     7ba:	7f 91       	pop	r23
     7bc:	6f 91       	pop	r22
     7be:	5f 91       	pop	r21
     7c0:	4f 91       	pop	r20
     7c2:	3f 91       	pop	r19
     7c4:	2f 91       	pop	r18
     7c6:	0f 90       	pop	r0
     7c8:	0b be       	out	0x3b, r0	; 59
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	0f 90       	pop	r0
     7d0:	1f 90       	pop	r1
     7d2:	18 95       	reti

000007d4 <__vector_29>:


  // this interrupt occurs after the start bit of the previous data byte
ISR(USARTn_UDRE_vect)
{
     7d4:	1f 92       	push	r1
     7d6:	0f 92       	push	r0
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	0f 92       	push	r0
     7dc:	11 24       	eor	r1, r1
     7de:	0b b6       	in	r0, 0x3b	; 59
     7e0:	0f 92       	push	r0
     7e2:	2f 93       	push	r18
     7e4:	3f 93       	push	r19
     7e6:	4f 93       	push	r20
     7e8:	5f 93       	push	r21
     7ea:	6f 93       	push	r22
     7ec:	7f 93       	push	r23
     7ee:	8f 93       	push	r24
     7f0:	9f 93       	push	r25
     7f2:	af 93       	push	r26
     7f4:	bf 93       	push	r27
     7f6:	ef 93       	push	r30
     7f8:	ff 93       	push	r31
  _DMXSerialWriteByte(_dmxData[_dmxChannel++]);
     7fa:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <_dmxChannel>
     7fe:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <_dmxChannel+0x1>
     802:	9c 01       	movw	r18, r24
     804:	2f 5f       	subi	r18, 0xFF	; 255
     806:	3f 4f       	sbci	r19, 0xFF	; 255
     808:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <_dmxChannel+0x1>
     80c:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <_dmxChannel>
     810:	fc 01       	movw	r30, r24
     812:	e4 59       	subi	r30, 0x94	; 148
     814:	fe 4f       	sbci	r31, 0xFE	; 254
     816:	80 81       	ld	r24, Z

// send the next byte after current byte was sent completely.
inline void _DMXSerialWriteByte(uint8_t data)
{
  // putting data into buffer sends the data
  UDRn = data;
     818:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
  // this interrupt occurs after the start bit of the previous data byte
ISR(USARTn_UDRE_vect)
{
  _DMXSerialWriteByte(_dmxData[_dmxChannel++]);

  if (_dmxChannel > _dmxMaxChannel) {
     81c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_dmxMaxChannel>
     820:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_dmxMaxChannel+0x1>
     824:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <_dmxChannel>
     828:	30 91 72 03 	lds	r19, 0x0372	; 0x800372 <_dmxChannel+0x1>
     82c:	82 17       	cp	r24, r18
     82e:	93 07       	cpc	r25, r19
     830:	58 f4       	brcc	.+22     	; 0x848 <__vector_29+0x74>
    _dmxChannel = -1; // this series is done. Next time: restart with break.
     832:	8f ef       	ldi	r24, 0xFF	; 255
     834:	9f ef       	ldi	r25, 0xFF	; 255
     836:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <_dmxChannel+0x1>
     83a:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <_dmxChannel>
    // get interrupt after this byte is actually transmitted
    // UCSRnB = (1 << TXENn) | (1 << TXCIEn);
    _DMXSerialInit(Calcprescale(DMXSPEED), ((1 << TXENn) | (1 << TXCIEn)), DMXFORMAT);
     83e:	4e e0       	ldi	r20, 0x0E	; 14
     840:	68 e4       	ldi	r22, 0x48	; 72
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	61 de       	rcall	.-830    	; 0x50a <_Z14_DMXSerialInitjhh>
  } // if

} // ISR(USARTn_UDRE_vect)
     848:	ff 91       	pop	r31
     84a:	ef 91       	pop	r30
     84c:	bf 91       	pop	r27
     84e:	af 91       	pop	r26
     850:	9f 91       	pop	r25
     852:	8f 91       	pop	r24
     854:	7f 91       	pop	r23
     856:	6f 91       	pop	r22
     858:	5f 91       	pop	r21
     85a:	4f 91       	pop	r20
     85c:	3f 91       	pop	r19
     85e:	2f 91       	pop	r18
     860:	0f 90       	pop	r0
     862:	0b be       	out	0x3b, r0	; 59
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <_ZN5surya14initTimekeeperEv>:
#include <stdlib.h>

void surya::initTimekeeper(){
	
	// CTC Mode2, PS:64, Int en  
	TCCR1B |= _BV(WGM12);
     86e:	e1 e8       	ldi	r30, 0x81	; 129
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	80 81       	ld	r24, Z
     874:	88 60       	ori	r24, 0x08	; 8
     876:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);
     878:	af e6       	ldi	r26, 0x6F	; 111
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	8c 91       	ld	r24, X
     87e:	82 60       	ori	r24, 0x02	; 2
     880:	8c 93       	st	X, r24
	TCCR1B |= _BV(CS11) | _BV(CS10);
     882:	80 81       	ld	r24, Z
     884:	83 60       	ori	r24, 0x03	; 3
     886:	80 83       	st	Z, r24
	
	// Clock for 1ms
	OCR1AL = ((F_CPU /1000) / 64) - 1;
     888:	89 ef       	ldi	r24, 0xF9	; 249
     88a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1AH = 0;
     88e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	sei();
     892:	78 94       	sei
     894:	08 95       	ret

00000896 <_ZN5surya13initTimeLapseEv>:

	//delta tilt
	uint8_t dtil = abs(SUN_EAST_TILT_ANG - SUN_WEST_TILT_ANG); 
	
	//angle profile (variable set points)
	_tv[0] = uint8_t(SUN_EAST_TILT_ANG);
     896:	e7 e7       	ldi	r30, 0x77	; 119
     898:	f3 e0       	ldi	r31, 0x03	; 3
     89a:	10 82       	st	Z, r1
	_tv[1] = uint8_t(dtil * 0.1 + _tv[0]);
     89c:	89 e0       	ldi	r24, 0x09	; 9
     89e:	81 83       	std	Z+1, r24	; 0x01
	_tv[2] = uint8_t(dtil * 0.1 + _tv[1]);
     8a0:	82 e1       	ldi	r24, 0x12	; 18
     8a2:	82 83       	std	Z+2, r24	; 0x02
	_tv[3] = uint8_t(dtil * 0.1 + _tv[2]);
     8a4:	8b e1       	ldi	r24, 0x1B	; 27
     8a6:	83 83       	std	Z+3, r24	; 0x03
	_tv[4] = uint8_t(dtil * 0.1 + _tv[3]);
     8a8:	84 e2       	ldi	r24, 0x24	; 36
     8aa:	84 83       	std	Z+4, r24	; 0x04
	_tv[5] = uint8_t(dtil * 0.1 + _tv[4]);
     8ac:	8d e2       	ldi	r24, 0x2D	; 45
     8ae:	85 83       	std	Z+5, r24	; 0x05
	_tv[6] = uint8_t(dtil * 0.1 + _tv[5]);
     8b0:	86 e3       	ldi	r24, 0x36	; 54
     8b2:	86 83       	std	Z+6, r24	; 0x06
	_tv[7] = uint8_t(dtil * 0.1 + _tv[6]);
     8b4:	8f e3       	ldi	r24, 0x3F	; 63
     8b6:	87 83       	std	Z+7, r24	; 0x07
	_tv[8] = uint8_t(dtil * 0.1 + _tv[7]);
     8b8:	88 e4       	ldi	r24, 0x48	; 72
     8ba:	80 87       	std	Z+8, r24	; 0x08
	_tv[9] = uint8_t(SUN_WEST_TILT_ANG);
     8bc:	8a e5       	ldi	r24, 0x5A	; 90
     8be:	81 87       	std	Z+9, r24	; 0x09
     8c0:	08 95       	ret

000008c2 <_ZN5surya14startTimeLapseEv>:
}

void surya::startTimeLapse(){
	DMX::setColour(_colours[0], effCONSTANT);
     8c2:	41 e0       	ldi	r20, 0x01	; 1
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	75 ea       	ldi	r23, 0xA5	; 165
     8c8:	8f ef       	ldi	r24, 0xFF	; 255
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	ab dd       	rcall	.-1194   	; 0x424 <_ZN3DMX9setColourEm6effect>
	DMX::sweepAngle(TILT_MOTOR, _tv[0],SUN_MOTOR_SPEED);
     8ce:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <_tv>
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	6c dd       	rcall	.-1320   	; 0x3b2 <_ZN3DMX10sweepAngleE8motorSeljh>
	_start_flag = 1;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <_ZL11_start_flag>
     8e0:	08 95       	ret

000008e2 <_ZN5surya13stopTimeLapseEv>:
}

void surya::stopTimeLapse(){
	_start_flag = 0;
     8e2:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <_ZL11_start_flag>
	_counter = 0;
     8e6:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <_counter>
     8ea:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <_counter+0x1>
     8ee:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <_counter+0x2>
     8f2:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <_counter+0x3>
	DMX::setColour(0x000000, effNoEFFECT); //no light
     8f6:	42 e0       	ldi	r20, 0x02	; 2
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	cb 01       	movw	r24, r22
     8fe:	92 dd       	rcall	.-1244   	; 0x424 <_ZN3DMX9setColourEm6effect>
	DMX::sweepAngle(TILT_MOTOR, SUN_EAST_TILT_ANG, 255);
     900:	4f ef       	ldi	r20, 0xFF	; 255
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	54 cd       	rjmp	.-1368   	; 0x3b2 <_ZN3DMX10sweepAngleE8motorSeljh>
     90a:	08 95       	ret

0000090c <__vector_13>:
}


ISR(TIMER1_COMPA_vect){
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	0b b6       	in	r0, 0x3b	; 59
     918:	0f 92       	push	r0
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
	if (_start_flag){
     932:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL11_start_flag>
     936:	88 23       	and	r24, r24
     938:	09 f4       	brne	.+2      	; 0x93c <__vector_13+0x30>
     93a:	68 c0       	rjmp	.+208    	; 0xa0c <__vector_13+0x100>
		_counter++;
     93c:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <_counter>
     940:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <_counter+0x1>
     944:	a0 91 83 03 	lds	r26, 0x0383	; 0x800383 <_counter+0x2>
     948:	b0 91 84 03 	lds	r27, 0x0384	; 0x800384 <_counter+0x3>
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	a1 1d       	adc	r26, r1
     950:	b1 1d       	adc	r27, r1
     952:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <_counter>
     956:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <_counter+0x1>
     95a:	a0 93 83 03 	sts	0x0383, r26	; 0x800383 <_counter+0x2>
     95e:	b0 93 84 03 	sts	0x0384, r27	; 0x800384 <_counter+0x3>
		if (_counter == n*DELTA_TIME){
     962:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <n>
     966:	40 91 81 03 	lds	r20, 0x0381	; 0x800381 <_counter>
     96a:	50 91 82 03 	lds	r21, 0x0382	; 0x800382 <_counter+0x1>
     96e:	60 91 83 03 	lds	r22, 0x0383	; 0x800383 <_counter+0x2>
     972:	70 91 84 03 	lds	r23, 0x0384	; 0x800384 <_counter+0x3>
     976:	20 ed       	ldi	r18, 0xD0	; 208
     978:	37 e0       	ldi	r19, 0x07	; 7
     97a:	e2 9f       	mul	r30, r18
     97c:	c0 01       	movw	r24, r0
     97e:	e3 9f       	mul	r30, r19
     980:	90 0d       	add	r25, r0
     982:	11 24       	eor	r1, r1
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	84 17       	cp	r24, r20
     98a:	95 07       	cpc	r25, r21
     98c:	a6 07       	cpc	r26, r22
     98e:	b7 07       	cpc	r27, r23
     990:	09 f0       	breq	.+2      	; 0x994 <__vector_13+0x88>
     992:	3c c0       	rjmp	.+120    	; 0xa0c <__vector_13+0x100>
			//set color and set point (angle)
			DMX::setColour(_colours[n], effCONSTANT);
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	eb 5c       	subi	r30, 0xCB	; 203
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	60 81       	ld	r22, Z
     9a4:	71 81       	ldd	r23, Z+1	; 0x01
     9a6:	82 81       	ldd	r24, Z+2	; 0x02
     9a8:	93 81       	ldd	r25, Z+3	; 0x03
     9aa:	41 e0       	ldi	r20, 0x01	; 1
     9ac:	3b dd       	rcall	.-1418   	; 0x424 <_ZN3DMX9setColourEm6effect>
			DMX::sweepAngle(TILT_MOTOR, _tv[n]+tuneOFFSET, SUN_MOTOR_SPEED);
     9ae:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <n>
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	e9 58       	subi	r30, 0x89	; 137
     9b6:	fc 4f       	sbci	r31, 0xFC	; 252
     9b8:	60 81       	ld	r22, Z
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	6f 5f       	subi	r22, 0xFF	; 255
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	f6 dc       	rcall	.-1556   	; 0x3b2 <_ZN3DMX10sweepAngleE8motorSeljh>
			n++;
     9c6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <n>
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	98 0f       	add	r25, r24
     9ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <n>
			//return back to East position
			if (n==11 || n==12){
     9d2:	8a 50       	subi	r24, 0x0A	; 10
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	50 f4       	brcc	.+20     	; 0x9ec <__vector_13+0xe0>
			 DMX::setColour(0x000000, effNoEFFECT); //no light
     9d8:	42 e0       	ldi	r20, 0x02	; 2
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	cb 01       	movw	r24, r22
     9e0:	21 dd       	rcall	.-1470   	; 0x424 <_ZN3DMX9setColourEm6effect>
			 DMX::sweepAngle(TILT_MOTOR, SUN_EAST_TILT_ANG, 255);	
     9e2:	4f ef       	ldi	r20, 0xFF	; 255
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	e3 dc       	rcall	.-1594   	; 0x3b2 <_ZN3DMX10sweepAngleE8motorSeljh>
			}
			if (n==13){
     9ec:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <n>
     9f0:	8d 30       	cpi	r24, 0x0D	; 13
				//restart solar day
				surya::startTimeLapse();
     9f2:	61 f4       	brne	.+24     	; 0xa0c <__vector_13+0x100>
     9f4:	66 df       	rcall	.-308    	; 0x8c2 <_ZN5surya14startTimeLapseEv>
				_counter = 0; n = 1;
     9f6:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <_counter>
     9fa:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <_counter+0x1>
     9fe:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <_counter+0x2>
     a02:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <_counter+0x3>
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <n>
			}	
		}
	}
}
     a0c:	ff 91       	pop	r31
     a0e:	ef 91       	pop	r30
     a10:	bf 91       	pop	r27
     a12:	af 91       	pop	r26
     a14:	9f 91       	pop	r25
     a16:	8f 91       	pop	r24
     a18:	7f 91       	pop	r23
     a1a:	6f 91       	pop	r22
     a1c:	5f 91       	pop	r21
     a1e:	4f 91       	pop	r20
     a20:	3f 91       	pop	r19
     a22:	2f 91       	pop	r18
     a24:	0f 90       	pop	r0
     a26:	0b be       	out	0x3b, r0	; 59
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	0f 90       	pop	r0
     a2e:	1f 90       	pop	r1
     a30:	18 95       	reti

00000a32 <main>:
static USHORT   usRegInputStart = REG_INPUT_START;
static USHORT   usRegOutputBuf[REG_OUTPUT_NREGS];
static USHORT   usRegInputBuf[REG_INPUT_NREGS];

int main(void)
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	00 d0       	rcall	.+0      	; 0xa38 <main+0x6>
     a38:	1f 92       	push	r1
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
	//Timer init for millis();
	init();
     a3e:	df db       	rcall	.-2114   	; 0x1fe <init>
	
	//Init indicators
	DDRB |= (1<<PINB1)|(1<<PINB2)|(1<<PINB3)|(1<<PINB4);
     a40:	84 b1       	in	r24, 0x04	; 4
     a42:	8e 61       	ori	r24, 0x1E	; 30
	
	//Sun init
	surya::initTimekeeper();
     a44:	84 b9       	out	0x04, r24	; 4
	surya::initTimeLapse();
     a46:	13 df       	rcall	.-474    	; 0x86e <_ZN5surya14initTimekeeperEv>
     a48:	26 df       	rcall	.-436    	; 0x896 <_ZN5surya13initTimeLapseEv>
	
	//Modbus initialization
	const UCHAR ucSlaveID[] = {0xAA, 0xBB, 0xCC};
     a4a:	8a ea       	ldi	r24, 0xAA	; 170
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	8b eb       	ldi	r24, 0xBB	; 187
     a50:	8a 83       	std	Y+2, r24	; 0x02
     a52:	8c ec       	ldi	r24, 0xCC	; 204
     a54:	8b 83       	std	Y+3, r24	; 0x03
	eMBInit(MB_ASCII, SLAVE_ADDRESS, 0, 9600, MB_PAR_ODD);
     a56:	ee 24       	eor	r14, r14
     a58:	e3 94       	inc	r14
     a5a:	00 e8       	ldi	r16, 0x80	; 128
     a5c:	15 e2       	ldi	r17, 0x25	; 37
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	40 e0       	ldi	r20, 0x00	; 0
     a64:	67 e4       	ldi	r22, 0x47	; 71
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	30 d6       	rcall	.+3168   	; 0x16ca <eMBInit>
	eMBSetSlaveID(0x34, TRUE, ucSlaveID, 3);
     a6a:	23 e0       	ldi	r18, 0x03	; 3
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	ae 01       	movw	r20, r28
     a70:	4f 5f       	subi	r20, 0xFF	; 255
     a72:	5f 4f       	sbci	r21, 0xFF	; 255
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	84 e3       	ldi	r24, 0x34	; 52
	eMBEnable();
     a78:	d8 d5       	rcall	.+2992   	; 0x162a <eMBSetSlaveID>
     a7a:	88 d6       	rcall	.+3344   	; 0x178c <eMBEnable>
	
	//DMX initialization (14->PIND6)
	DMXSerial.init(DMXController, 14);
     a7c:	4e e0       	ldi	r20, 0x0E	; 14
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	87 e6       	ldi	r24, 0x67	; 103
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	6e dd       	rcall	.-1316   	; 0x566 <_ZN14DMXSerialClass4initEii>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a8a:	2f ef       	ldi	r18, 0xFF	; 255
     a8c:	33 e2       	ldi	r19, 0x23	; 35
     a8e:	84 ef       	ldi	r24, 0xF4	; 244
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	21 50       	subi	r18, 0x01	; 1
     a94:	30 40       	sbci	r19, 0x00	; 0
     a96:	80 40       	sbci	r24, 0x00	; 0
     a98:	90 40       	sbci	r25, 0x00	; 0
     a9a:	d9 f7       	brne	.-10     	; 0xa92 <main+0x60>
     a9c:	00 c0       	rjmp	.+0      	; 0xa9e <main+0x6c>
	
	_delay_ms(6000);
	DMX::sweepAngle(PAN_MOTOR, 90, 127);
     a9e:	00 00       	nop
     aa0:	4f e7       	ldi	r20, 0x7F	; 127
     aa2:	6a e5       	ldi	r22, 0x5A	; 90
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	84 dc       	rcall	.-1784   	; 0x3b2 <_ZN3DMX10sweepAngleE8motorSeljh>
     aaa:	2f ef       	ldi	r18, 0xFF	; 255
     aac:	33 ed       	ldi	r19, 0xD3	; 211
     aae:	80 e3       	ldi	r24, 0x30	; 48
     ab0:	21 50       	subi	r18, 0x01	; 1
     ab2:	30 40       	sbci	r19, 0x00	; 0
     ab4:	80 40       	sbci	r24, 0x00	; 0
     ab6:	e1 f7       	brne	.-8      	; 0xab0 <main+0x7e>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <main+0x88>
	_delay_ms(1000);
	DMX::sweepAngle(PAN_MOTOR, 0, 127);
     aba:	00 00       	nop
     abc:	4f e7       	ldi	r20, 0x7F	; 127
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	76 dc       	rcall	.-1812   	; 0x3b2 <_ZN3DMX10sweepAngleE8motorSeljh>
     ac6:	9f ef       	ldi	r25, 0xFF	; 255
     ac8:	23 ed       	ldi	r18, 0xD3	; 211
     aca:	30 e3       	ldi	r19, 0x30	; 48
     acc:	91 50       	subi	r25, 0x01	; 1
     ace:	20 40       	sbci	r18, 0x00	; 0
     ad0:	30 40       	sbci	r19, 0x00	; 0
     ad2:	e1 f7       	brne	.-8      	; 0xacc <main+0x9a>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <main+0xa4>
	_delay_ms(1000);
	DMX::sweepAngle(TILT_MOTOR, 90, 127);
     ad6:	00 00       	nop
     ad8:	4f e7       	ldi	r20, 0x7F	; 127
     ada:	6a e5       	ldi	r22, 0x5A	; 90
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	68 dc       	rcall	.-1840   	; 0x3b2 <_ZN3DMX10sweepAngleE8motorSeljh>
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	93 ed       	ldi	r25, 0xD3	; 211
     ae6:	20 e3       	ldi	r18, 0x30	; 48
     ae8:	81 50       	subi	r24, 0x01	; 1
     aea:	90 40       	sbci	r25, 0x00	; 0
     aec:	20 40       	sbci	r18, 0x00	; 0
     aee:	e1 f7       	brne	.-8      	; 0xae8 <main+0xb6>
	_delay_ms(1000);
	DMX::sweepAngle(TILT_MOTOR, 0, 127);
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <main+0xc0>
     af2:	00 00       	nop
     af4:	4f e7       	ldi	r20, 0x7F	; 127
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	81 e0       	ldi	r24, 0x01	; 1
	while (1)
	{
		(void )eMBPoll( );
     afc:	5a dc       	rcall	.-1868   	; 0x3b2 <_ZN3DMX10sweepAngleE8motorSeljh>
     afe:	55 d6       	rcall	.+3242   	; 0x17aa <eMBPoll>
     b00:	fe cf       	rjmp	.-4      	; 0xafe <main+0xcc>

00000b02 <eMBRegInputCB>:
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
	int             iRegIndex;

	if( ( usAddress >= REG_INPUT_START )
     b02:	68 3e       	cpi	r22, 0xE8	; 232
     b04:	23 e0       	ldi	r18, 0x03	; 3
     b06:	72 07       	cpc	r23, r18
     b08:	a8 f0       	brcs	.+42     	; 0xb34 <eMBRegInputCB+0x32>
	&& ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
     b0a:	64 0f       	add	r22, r20
     b0c:	75 1f       	adc	r23, r21
     b0e:	6d 3e       	cpi	r22, 0xED	; 237
     b10:	73 40       	sbci	r23, 0x03	; 3
     b12:	90 f4       	brcc	.+36     	; 0xb38 <eMBRegInputCB+0x36>
	{
		iRegIndex = ( int )( usAddress - usRegInputStart );
		while( usNRegs > 0 )
     b14:	41 15       	cp	r20, r1
     b16:	51 05       	cpc	r21, r1
     b18:	89 f0       	breq	.+34     	; 0xb3c <eMBRegInputCB+0x3a>
     b1a:	fc 01       	movw	r30, r24
     b1c:	44 0f       	add	r20, r20
     b1e:	55 1f       	adc	r21, r21
     b20:	84 0f       	add	r24, r20
     b22:	95 1f       	adc	r25, r21
		{
			*pucRegBuffer++ =
			( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
     b24:	10 82       	st	Z, r1
			*pucRegBuffer++ =
			( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
     b26:	11 82       	std	Z+1, r1	; 0x01
     b28:	32 96       	adiw	r30, 0x02	; 2

	if( ( usAddress >= REG_INPUT_START )
	&& ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
	{
		iRegIndex = ( int )( usAddress - usRegInputStart );
		while( usNRegs > 0 )
     b2a:	e8 17       	cp	r30, r24
     b2c:	f9 07       	cpc	r31, r25
     b2e:	d1 f7       	brne	.-12     	; 0xb24 <eMBRegInputCB+0x22>
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	08 95       	ret
			usNRegs--;
		}
	}
	else
	{
		eStatus = MB_ENOREG;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	08 95       	ret
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	08 95       	ret
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
	{
		eStatus = MB_ENOREG;
	}

	return eStatus;
}
     b3e:	08 95       	ret

00000b40 <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
     b40:	6f 92       	push	r6
     b42:	7f 92       	push	r7
     b44:	8f 92       	push	r8
     b46:	9f 92       	push	r9
     b48:	af 92       	push	r10
     b4a:	bf 92       	push	r11
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	8a 01       	movw	r16, r20
	eMBErrorCode    eStatus = MB_ENOERR;
	int             iRegIndex;

	if( ( usAddress >= REG_OUTPUT_START )
     b5e:	68 3e       	cpi	r22, 0xE8	; 232
     b60:	33 e0       	ldi	r19, 0x03	; 3
     b62:	73 07       	cpc	r23, r19
     b64:	08 f4       	brcc	.+2      	; 0xb68 <eMBRegHoldingCB+0x28>
     b66:	ae c0       	rjmp	.+348    	; 0xcc4 <eMBRegHoldingCB+0x184>
	&& ( usAddress + usNRegs <= REG_OUTPUT_START + REG_OUTPUT_NREGS ) )
     b68:	ab 01       	movw	r20, r22
     b6a:	40 0f       	add	r20, r16
     b6c:	51 1f       	adc	r21, r17
     b6e:	4f 32       	cpi	r20, 0x2F	; 47
     b70:	54 40       	sbci	r21, 0x04	; 4
     b72:	08 f0       	brcs	.+2      	; 0xb76 <eMBRegHoldingCB+0x36>
     b74:	a9 c0       	rjmp	.+338    	; 0xcc8 <eMBRegHoldingCB+0x188>
	{
		iRegIndex = ( int )( usAddress - usRegOutputStart );
     b76:	7b 01       	movw	r14, r22
     b78:	f8 ee       	ldi	r31, 0xE8	; 232
     b7a:	ef 1a       	sub	r14, r31
     b7c:	f3 e0       	ldi	r31, 0x03	; 3
     b7e:	ff 0a       	sbc	r15, r31
		if(eMode==MB_REG_READ){
     b80:	21 11       	cpse	r18, r1
     b82:	1a c0       	rjmp	.+52     	; 0xbb8 <eMBRegHoldingCB+0x78>
			while( usNRegs > 0 )
     b84:	01 15       	cp	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <eMBRegHoldingCB+0x4c>
     b8a:	a0 c0       	rjmp	.+320    	; 0xccc <eMBRegHoldingCB+0x18c>
     b8c:	fc 01       	movw	r30, r24
     b8e:	66 0f       	add	r22, r22
     b90:	77 1f       	adc	r23, r23
     b92:	db 01       	movw	r26, r22
     b94:	aa 54       	subi	r26, 0x4A	; 74
     b96:	b4 40       	sbci	r27, 0x04	; 4
     b98:	00 0f       	add	r16, r16
     b9a:	11 1f       	adc	r17, r17
     b9c:	08 0f       	add	r16, r24
     b9e:	19 1f       	adc	r17, r25
			{
				*pucRegBuffer++ =
				( unsigned char )( usRegOutputBuf[iRegIndex] >> 8 );
     ba0:	9c 91       	ld	r25, X
     ba2:	11 96       	adiw	r26, 0x01	; 1
     ba4:	2c 91       	ld	r18, X
     ba6:	11 97       	sbiw	r26, 0x01	; 1
     ba8:	12 96       	adiw	r26, 0x02	; 2
     baa:	20 83       	st	Z, r18
				*pucRegBuffer++ =
				( unsigned char )( usRegOutputBuf[iRegIndex] & 0xFF );
     bac:	91 83       	std	Z+1, r25	; 0x01
     bae:	32 96       	adiw	r30, 0x02	; 2
	if( ( usAddress >= REG_OUTPUT_START )
	&& ( usAddress + usNRegs <= REG_OUTPUT_START + REG_OUTPUT_NREGS ) )
	{
		iRegIndex = ( int )( usAddress - usRegOutputStart );
		if(eMode==MB_REG_READ){
			while( usNRegs > 0 )
     bb0:	0e 17       	cp	r16, r30
     bb2:	1f 07       	cpc	r17, r31
     bb4:	a9 f7       	brne	.-22     	; 0xba0 <eMBRegHoldingCB+0x60>
     bb6:	8c c0       	rjmp	.+280    	; 0xcd0 <eMBRegHoldingCB+0x190>
				( unsigned char )( usRegOutputBuf[iRegIndex] & 0xFF );
				iRegIndex++;
				usNRegs--;
			}
		}
		else if(eMode==MB_REG_WRITE){
     bb8:	21 30       	cpi	r18, 0x01	; 1
     bba:	09 f0       	breq	.+2      	; 0xbbe <eMBRegHoldingCB+0x7e>
     bbc:	8b c0       	rjmp	.+278    	; 0xcd4 <eMBRegHoldingCB+0x194>
			while( usNRegs > 0 )
     bbe:	01 15       	cp	r16, r1
     bc0:	11 05       	cpc	r17, r1
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <eMBRegHoldingCB+0x86>
     bc4:	89 c0       	rjmp	.+274    	; 0xcd8 <eMBRegHoldingCB+0x198>
     bc6:	6c 01       	movw	r12, r24
     bc8:	66 0f       	add	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	eb 01       	movw	r28, r22
     bce:	ca 54       	subi	r28, 0x4A	; 74
     bd0:	d4 40       	sbci	r29, 0x04	; 4
				}
				
				//set color
				else if (iRegIndex == 17){	
					uint8_t r = usRegOutputBuf[iRegIndex];
					uint8_t g = usRegOutputBuf[iRegIndex+1];
     bd2:	0f 2e       	mov	r0, r31
     bd4:	f6 e8       	ldi	r31, 0x86	; 134
     bd6:	af 2e       	mov	r10, r31
     bd8:	f3 e0       	ldi	r31, 0x03	; 3
     bda:	bf 2e       	mov	r11, r31
     bdc:	f0 2d       	mov	r31, r0
			while( usNRegs > 0 )
			{
				UCHAR upper = *pucRegBuffer++;
				UCHAR lower = *pucRegBuffer++;
				
				usRegOutputBuf[iRegIndex] = (((uint16_t)upper)<<8) | ((uint16_t)lower);
     bde:	f6 01       	movw	r30, r12
     be0:	80 80       	ld	r8, Z
     be2:	91 2c       	mov	r9, r1
     be4:	98 2c       	mov	r9, r8
     be6:	88 24       	eor	r8, r8
     be8:	81 81       	ldd	r24, Z+1	; 0x01
     bea:	88 2a       	or	r8, r24
     bec:	89 92       	st	Y+, r8
     bee:	99 92       	st	Y+, r9
				
				//sweep angle
				if (iRegIndex == 11){
     bf0:	fb e0       	ldi	r31, 0x0B	; 11
     bf2:	ef 16       	cp	r14, r31
     bf4:	f1 04       	cpc	r15, r1
     bf6:	a1 f4       	brne	.+40     	; 0xc20 <eMBRegHoldingCB+0xe0>
					uint8_t motor_select = usRegOutputBuf[iRegIndex]; 
					uint16_t angle = usRegOutputBuf[iRegIndex+1];
     bf8:	f5 01       	movw	r30, r10
     bfa:	60 8d       	ldd	r22, Z+24	; 0x18
     bfc:	71 8d       	ldd	r23, Z+25	; 0x19
					uint8_t speed = usRegOutputBuf[iRegIndex+2];
     bfe:	42 8d       	ldd	r20, Z+26	; 0x1a
					
					switch (motor_select){
     c00:	99 24       	eor	r9, r9
     c02:	f6 e1       	ldi	r31, 0x16	; 22
     c04:	8f 16       	cp	r8, r31
     c06:	91 04       	cpc	r9, r1
     c08:	41 f0       	breq	.+16     	; 0xc1a <eMBRegHoldingCB+0xda>
     c0a:	31 e2       	ldi	r19, 0x21	; 33
     c0c:	83 16       	cp	r8, r19
     c0e:	91 04       	cpc	r9, r1
     c10:	09 f0       	breq	.+2      	; 0xc14 <eMBRegHoldingCB+0xd4>
     c12:	4a c0       	rjmp	.+148    	; 0xca8 <eMBRegHoldingCB+0x168>
					case 33://tilt
						DMX::sweepAngle(TILT_MOTOR, angle, speed);
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	cd db       	rcall	.-2150   	; 0x3b2 <_ZN3DMX10sweepAngleE8motorSeljh>
						break;
     c18:	47 c0       	rjmp	.+142    	; 0xca8 <eMBRegHoldingCB+0x168>
					case 22://pan
						DMX::sweepAngle(PAN_MOTOR, angle, speed);
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	ca db       	rcall	.-2156   	; 0x3b2 <_ZN3DMX10sweepAngleE8motorSeljh>
						break;
     c1e:	44 c0       	rjmp	.+136    	; 0xca8 <eMBRegHoldingCB+0x168>
					}
				}
				
				//start sun
				else if (iRegIndex == 15){
     c20:	8f e0       	ldi	r24, 0x0F	; 15
     c22:	e8 16       	cp	r14, r24
     c24:	f1 04       	cpc	r15, r1
					surya::startTimeLapse();
     c26:	11 f4       	brne	.+4      	; 0xc2c <eMBRegHoldingCB+0xec>
     c28:	4c de       	rcall	.-872    	; 0x8c2 <_ZN5surya14startTimeLapseEv>
     c2a:	3e c0       	rjmp	.+124    	; 0xca8 <eMBRegHoldingCB+0x168>
				}
				
				//stop sun
				else if (iRegIndex == 16){
     c2c:	e0 e1       	ldi	r30, 0x10	; 16
     c2e:	ee 16       	cp	r14, r30
     c30:	f1 04       	cpc	r15, r1
					surya::stopTimeLapse();
     c32:	11 f4       	brne	.+4      	; 0xc38 <eMBRegHoldingCB+0xf8>
     c34:	56 de       	rcall	.-852    	; 0x8e2 <_ZN5surya13stopTimeLapseEv>
     c36:	38 c0       	rjmp	.+112    	; 0xca8 <eMBRegHoldingCB+0x168>
				}
				
				//set color
				else if (iRegIndex == 17){	
     c38:	f1 e1       	ldi	r31, 0x11	; 17
     c3a:	ef 16       	cp	r14, r31
     c3c:	f1 04       	cpc	r15, r1
     c3e:	a1 f5       	brne	.+104    	; 0xca8 <eMBRegHoldingCB+0x168>
					uint8_t r = usRegOutputBuf[iRegIndex];
					uint8_t g = usRegOutputBuf[iRegIndex+1];
     c40:	f5 01       	movw	r30, r10
     c42:	64 a0       	ldd	r6, Z+36	; 0x24
					uint8_t b = usRegOutputBuf[iRegIndex+2];
     c44:	76 a0       	ldd	r7, Z+38	; 0x26
					uint8_t effect = usRegOutputBuf[iRegIndex+3];
					
					switch (effect){
     c46:	80 a5       	ldd	r24, Z+40	; 0x28
     c48:	91 a5       	ldd	r25, Z+41	; 0x29
     c4a:	99 27       	eor	r25, r25
     c4c:	82 30       	cpi	r24, 0x02	; 2
     c4e:	91 05       	cpc	r25, r1
     c50:	61 f0       	breq	.+24     	; 0xc6a <eMBRegHoldingCB+0x12a>
     c52:	83 30       	cpi	r24, 0x03	; 3
     c54:	91 05       	cpc	r25, r1
     c56:	81 f0       	breq	.+32     	; 0xc78 <eMBRegHoldingCB+0x138>
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	a1 f4       	brne	.+40     	; 0xc84 <eMBRegHoldingCB+0x144>
					case 1://strobe
						DMXSerial.write(DMX_EFFECTS, _DMX_EFFECTS_STROBE_MAX);
     c5c:	4f ee       	ldi	r20, 0xEF	; 239
     c5e:	66 e0       	ldi	r22, 0x06	; 6
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	87 e6       	ldi	r24, 0x67	; 103
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	2c dc       	rcall	.-1960   	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
						break;
     c68:	0d c0       	rjmp	.+26     	; 0xc84 <eMBRegHoldingCB+0x144>
					case 2://constant
						DMXSerial.write(DMX_EFFECTS, _DMX_EFFECTS_CONSTANT);
     c6a:	4f ef       	ldi	r20, 0xFF	; 255
     c6c:	66 e0       	ldi	r22, 0x06	; 6
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	87 e6       	ldi	r24, 0x67	; 103
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	25 dc       	rcall	.-1974   	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
						break;
					case 3://no effect
						DMXSerial.write(DMX_EFFECTS, _DMX_EFFECTS_noEFFECT);
     c76:	06 c0       	rjmp	.+12     	; 0xc84 <eMBRegHoldingCB+0x144>
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	66 e0       	ldi	r22, 0x06	; 6
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	87 e6       	ldi	r24, 0x67	; 103
     c80:	91 e0       	ldi	r25, 0x01	; 1
						break;
					}
					DMXSerial.write(DMX_RED,r);
     c82:	1e dc       	rcall	.-1988   	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
     c84:	48 2d       	mov	r20, r8
     c86:	67 e0       	ldi	r22, 0x07	; 7
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	87 e6       	ldi	r24, 0x67	; 103
     c8c:	91 e0       	ldi	r25, 0x01	; 1
					DMXSerial.write(DMX_GREEN,g);
     c8e:	18 dc       	rcall	.-2000   	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
     c90:	46 2d       	mov	r20, r6
     c92:	68 e0       	ldi	r22, 0x08	; 8
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	87 e6       	ldi	r24, 0x67	; 103
     c98:	91 e0       	ldi	r25, 0x01	; 1
					DMXSerial.write(DMX_BLUE,b);		
     c9a:	12 dc       	rcall	.-2012   	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
     c9c:	47 2d       	mov	r20, r7
     c9e:	69 e0       	ldi	r22, 0x09	; 9
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	87 e6       	ldi	r24, 0x67	; 103
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0c dc       	rcall	.-2024   	; 0x4c0 <_ZN14DMXSerialClass5writeEih>
				}
				iRegIndex++;
     ca8:	ff ef       	ldi	r31, 0xFF	; 255
     caa:	ef 1a       	sub	r14, r31
     cac:	ff 0a       	sbc	r15, r31
				usNRegs--;
     cae:	01 50       	subi	r16, 0x01	; 1
     cb0:	11 09       	sbc	r17, r1
     cb2:	32 e0       	ldi	r19, 0x02	; 2
     cb4:	c3 0e       	add	r12, r19
     cb6:	d1 1c       	adc	r13, r1
				iRegIndex++;
				usNRegs--;
			}
		}
		else if(eMode==MB_REG_WRITE){
			while( usNRegs > 0 )
     cb8:	01 15       	cp	r16, r1
     cba:	11 05       	cpc	r17, r1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <eMBRegHoldingCB+0x180>
     cbe:	8f cf       	rjmp	.-226    	; 0xbde <eMBRegHoldingCB+0x9e>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	0b c0       	rjmp	.+22     	; 0xcda <eMBRegHoldingCB+0x19a>
			}
		}
	}
	else
	{
		eStatus = MB_ENOREG;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	09 c0       	rjmp	.+18     	; 0xcda <eMBRegHoldingCB+0x19a>
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	07 c0       	rjmp	.+14     	; 0xcda <eMBRegHoldingCB+0x19a>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
	eMBErrorCode    eStatus = MB_ENOERR;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	05 c0       	rjmp	.+10     	; 0xcda <eMBRegHoldingCB+0x19a>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <eMBRegHoldingCB+0x19a>
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <eMBRegHoldingCB+0x19a>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
	{
		eStatus = MB_ENOREG;
	}

	return eStatus;
}
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	bf 90       	pop	r11
     cec:	af 90       	pop	r10
     cee:	9f 90       	pop	r9
     cf0:	8f 90       	pop	r8
     cf2:	7f 90       	pop	r7
     cf4:	6f 90       	pop	r6
     cf6:	08 95       	ret

00000cf8 <eMBRegCoilsCB>:
eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
eMBRegisterMode eMode )
{
	return MB_ENOREG;
}
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	08 95       	ret

00000cfc <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
	return MB_ENOREG;
}
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	08 95       	ret

00000d00 <eMBASCIIInit>:
static volatile UCHAR ucMBLFCharacter;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
     d00:	0f 93       	push	r16
     d02:	86 2f       	mov	r24, r22
     d04:	ba 01       	movw	r22, r20
     d06:	a9 01       	movw	r20, r18
    eMBErrorCode    eStatus = MB_ENOERR;
    ( void )ucSlaveAddress;
    
    ENTER_CRITICAL_SECTION(  );
     d08:	f8 94       	cli
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;
     d0a:	9a e0       	ldi	r25, 0x0A	; 10
     d0c:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <ucMBLFCharacter>

    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
     d10:	28 e0       	ldi	r18, 0x08	; 8
     d12:	35 d6       	rcall	.+3178   	; 0x197e <xMBPortSerialInit>
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	39 f4       	brne	.+14     	; 0xd26 <eMBASCIIInit+0x26>
    {
        eStatus = MB_EPORTERR;
    }
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
     d18:	80 e2       	ldi	r24, 0x20	; 32
     d1a:	9e e4       	ldi	r25, 0x4E	; 78
     d1c:	db d6       	rcall	.+3510   	; 0x1ad4 <xMBPortTimersInit>
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	21 f0       	breq	.+8      	; 0xd2a <eMBASCIIInit+0x2a>
    {
        eStatus = MB_EPORTERR;
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <eMBASCIIInit+0x2c>
    ENTER_CRITICAL_SECTION(  );
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;

    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
     d26:	83 e0       	ldi	r24, 0x03	; 3
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <eMBASCIIInit+0x2c>

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     d2a:	80 e0       	ldi	r24, 0x00	; 0
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
    {
        eStatus = MB_EPORTERR;
    }

    EXIT_CRITICAL_SECTION(  );
     d2c:	78 94       	sei

    return eStatus;
}
     d2e:	0f 91       	pop	r16
     d30:	08 95       	ret

00000d32 <eMBASCIIStart>:

void
eMBASCIIStart( void )
{
    ENTER_CRITICAL_SECTION(  );
     d32:	f8 94       	cli
    vMBPortSerialEnable( TRUE, FALSE );
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	03 d6       	rcall	.+3078   	; 0x1940 <vMBPortSerialEnable>
    eRcvState = STATE_RX_IDLE;
     d3a:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <eRcvState>
    EXIT_CRITICAL_SECTION(  );
     d3e:	78 94       	sei

    /* No special startup required for ASCII. */
    ( void )xMBPortEventPost( EV_READY );
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	e9 c5       	rjmp	.+3026   	; 0x1916 <xMBPortEventPost>
     d44:	08 95       	ret

00000d46 <eMBASCIIStop>:
}

void
eMBASCIIStop( void )
{
    ENTER_CRITICAL_SECTION(  );
     d46:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	f9 d5       	rcall	.+3058   	; 0x1940 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
     d4e:	d4 d6       	rcall	.+3496   	; 0x1af8 <vMBPortTimersDisable>
     d50:	78 94       	sei
    EXIT_CRITICAL_SECTION(  );
     d52:	08 95       	ret

00000d54 <eMBASCIIReceive>:
     d54:	cf 93       	push	r28
}

eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
     d56:	df 93       	push	r29
     d58:	ec 01       	movw	r28, r24
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
     d5a:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
     d5c:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <usRcvBufferPos>
     d60:	30 91 19 04 	lds	r19, 0x0419	; 0x800419 <usRcvBufferPos+0x1>
     d64:	23 30       	cpi	r18, 0x03	; 3
     d66:	31 05       	cpc	r19, r1
     d68:	20 f1       	brcs	.+72     	; 0xdb2 <eMBASCIIReceive+0x5e>
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
     d6a:	a0 91 18 04 	lds	r26, 0x0418	; 0x800418 <usRcvBufferPos>
     d6e:	b0 91 19 04 	lds	r27, 0x0419	; 0x800419 <usRcvBufferPos+0x1>
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     d72:	10 97       	sbiw	r26, 0x00	; 0
     d74:	61 f0       	breq	.+24     	; 0xd8e <eMBASCIIReceive+0x3a>
     d76:	ea e5       	ldi	r30, 0x5A	; 90
     d78:	f4 e0       	ldi	r31, 0x04	; 4
     d7a:	a6 5a       	subi	r26, 0xA6	; 166
     d7c:	bb 4f       	sbci	r27, 0xFB	; 251
     d7e:	90 e0       	ldi	r25, 0x00	; 0
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
     d80:	21 91       	ld	r18, Z+
     d82:	92 0f       	add	r25, r18
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     d84:	ea 17       	cp	r30, r26
     d86:	fb 07       	cpc	r31, r27
     d88:	d9 f7       	brne	.-10     	; 0xd80 <eMBASCIIReceive+0x2c>
    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
     d8a:	91 11       	cpse	r25, r1
     d8c:	14 c0       	rjmp	.+40     	; 0xdb6 <eMBASCIIReceive+0x62>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucASCIIBuf[MB_SER_PDU_ADDR_OFF];
     d8e:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <ucRTUBuf>
     d92:	88 83       	st	Y, r24

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );
     d94:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <usRcvBufferPos>
     d98:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <usRcvBufferPos+0x1>
     d9c:	02 97       	sbiw	r24, 0x02	; 2
     d9e:	fa 01       	movw	r30, r20
     da0:	91 83       	std	Z+1, r25	; 0x01
     da2:	80 83       	st	Z, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
     da4:	8b e5       	ldi	r24, 0x5B	; 91
     da6:	94 e0       	ldi	r25, 0x04	; 4
     da8:	fb 01       	movw	r30, r22
     daa:	91 83       	std	Z+1, r25	; 0x01
     dac:	80 83       	st	Z, r24
}

eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     dae:	80 e0       	ldi	r24, 0x00	; 0
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
     db0:	03 c0       	rjmp	.+6      	; 0xdb8 <eMBASCIIReceive+0x64>
    }
    else
    {
        eStatus = MB_EIO;
     db2:	85 e0       	ldi	r24, 0x05	; 5
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <eMBASCIIReceive+0x64>
     db6:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
     db8:	78 94       	sei
    return eStatus;
}
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <eMBASCIISend>:
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR           usLRC;

    ENTER_CRITICAL_SECTION(  );
     dc0:	f8 94       	cli
    /* Check if the receiver is still in idle state. If not we where too
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
     dc2:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <eRcvState>
     dc6:	91 11       	cpse	r25, r1
     dc8:	41 c0       	rjmp	.+130    	; 0xe4c <eMBASCIISend+0x8c>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
     dca:	fb 01       	movw	r30, r22
     dcc:	31 97       	sbiw	r30, 0x01	; 1
     dce:	f0 93 16 04 	sts	0x0416, r31	; 0x800416 <pucSndBufferCur+0x1>
     dd2:	e0 93 15 04 	sts	0x0415, r30	; 0x800415 <pucSndBufferCur>
        usSndBufferCount = 1;
     dd6:	21 e0       	ldi	r18, 0x01	; 1
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	30 93 14 04 	sts	0x0414, r19	; 0x800414 <usSndBufferCount+0x1>
     dde:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <usSndBufferCount>

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
     de2:	80 83       	st	Z, r24
        usSndBufferCount += usLength;
     de4:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <usSndBufferCount>
     de8:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <usSndBufferCount+0x1>
     dec:	48 0f       	add	r20, r24
     dee:	59 1f       	adc	r21, r25
     df0:	50 93 14 04 	sts	0x0414, r21	; 0x800414 <usSndBufferCount+0x1>
     df4:	40 93 13 04 	sts	0x0413, r20	; 0x800413 <usSndBufferCount>

        /* Calculate LRC checksum for Modbus-Serial-Line-PDU. */
        usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
     df8:	20 91 13 04 	lds	r18, 0x0413	; 0x800413 <usSndBufferCount>
     dfc:	30 91 14 04 	lds	r19, 0x0414	; 0x800414 <usSndBufferCount+0x1>
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     e00:	c9 01       	movw	r24, r18
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	23 2b       	or	r18, r19
     e06:	49 f0       	breq	.+18     	; 0xe1a <eMBASCIISend+0x5a>
     e08:	68 0f       	add	r22, r24
     e0a:	79 1f       	adc	r23, r25
     e0c:	80 e0       	ldi	r24, 0x00	; 0
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
     e0e:	91 91       	ld	r25, Z+
     e10:	89 0f       	add	r24, r25
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     e12:	e6 17       	cp	r30, r22
     e14:	f7 07       	cpc	r31, r23
     e16:	d9 f7       	brne	.-10     	; 0xe0e <eMBASCIISend+0x4e>
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <eMBASCIISend+0x5c>


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */
     e1a:	80 e0       	ldi	r24, 0x00	; 0
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
    }

    /* Return twos complement */
    ucLRC = ( UCHAR ) ( -( ( CHAR ) ucLRC ) );
     e1c:	81 95       	neg	r24
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
        usSndBufferCount += usLength;

        /* Calculate LRC checksum for Modbus-Serial-Line-PDU. */
        usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
        ucASCIIBuf[usSndBufferCount++] = usLRC;
     e1e:	20 91 13 04 	lds	r18, 0x0413	; 0x800413 <usSndBufferCount>
     e22:	30 91 14 04 	lds	r19, 0x0414	; 0x800414 <usSndBufferCount+0x1>
     e26:	a9 01       	movw	r20, r18
     e28:	4f 5f       	subi	r20, 0xFF	; 255
     e2a:	5f 4f       	sbci	r21, 0xFF	; 255
     e2c:	50 93 14 04 	sts	0x0414, r21	; 0x800414 <usSndBufferCount+0x1>
     e30:	40 93 13 04 	sts	0x0413, r20	; 0x800413 <usSndBufferCount>
     e34:	f9 01       	movw	r30, r18
     e36:	e6 5a       	subi	r30, 0xA6	; 166
     e38:	fb 4f       	sbci	r31, 0xFB	; 251
     e3a:	80 83       	st	Z, r24

        /* Activate the transmitter. */
        eSndState = STATE_TX_START;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <eSndState>
        vMBPortSerialEnable( FALSE, TRUE );
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	7c d5       	rcall	.+2808   	; 0x1940 <vMBPortSerialEnable>
}

eMBErrorCode
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <eMBASCIISend+0x8e>
        eSndState = STATE_TX_START;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
     e4c:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
     e4e:	78 94       	sei
    return eStatus;
}
     e50:	08 95       	ret

00000e52 <xMBASCIIReceiveFSM>:

BOOL
xMBASCIIReceiveFSM( void )
{
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	1f 92       	push	r1
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;
    UCHAR           ucResult;

    assert( eSndState == STATE_TX_IDLE );

    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	d2 d5       	rcall	.+2980   	; 0x1a06 <xMBPortSerialGetByte>
    switch ( eRcvState )
     e62:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <eRcvState>
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	31 f0       	breq	.+12     	; 0xe76 <xMBASCIIReceiveFSM+0x24>
     e6a:	08 f4       	brcc	.+2      	; 0xe6e <xMBASCIIReceiveFSM+0x1c>
     e6c:	78 c0       	rjmp	.+240    	; 0xf5e <xMBASCIIReceiveFSM+0x10c>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	09 f4       	brne	.+2      	; 0xe74 <xMBASCIIReceiveFSM+0x22>
     e72:	58 c0       	rjmp	.+176    	; 0xf24 <xMBASCIIReceiveFSM+0xd2>
         * block. Other characters are part of the data block and their
         * ASCII value is converted back to a binary representation.
         */
    case STATE_RX_RCV:
        /* Enable timer for character timeout. */
        vMBPortTimersEnable(  );
     e74:	83 c0       	rjmp	.+262    	; 0xf7c <xMBASCIIReceiveFSM+0x12a>
     e76:	3b d6       	rcall	.+3190   	; 0x1aee <vMBPortTimersEnable>
        if( ucByte == ':' )
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	8a 33       	cpi	r24, 0x3A	; 58
     e7c:	41 f4       	brne	.+16     	; 0xe8e <xMBASCIIReceiveFSM+0x3c>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
     e7e:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <eBytePos>
            usRcvBufferPos = 0;
     e82:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <usRcvBufferPos+0x1>
     e86:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <usRcvBufferPos>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	7c c0       	rjmp	.+248    	; 0xf86 <xMBASCIIReceiveFSM+0x134>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
            usRcvBufferPos = 0;
        }
        else if( ucByte == MB_ASCII_DEFAULT_CR )
     e8e:	8d 30       	cpi	r24, 0x0D	; 13
     e90:	29 f4       	brne	.+10     	; 0xe9c <xMBASCIIReceiveFSM+0x4a>
        {
            eRcvState = STATE_RX_WAIT_EOF;
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <eRcvState>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	75 c0       	rjmp	.+234    	; 0xf86 <xMBASCIIReceiveFSM+0x134>


static          UCHAR
prvucMBCHAR2BIN( UCHAR ucCharacter )
{
    if( ( ucCharacter >= '0' ) && ( ucCharacter <= '9' ) )
     e9c:	90 ed       	ldi	r25, 0xD0	; 208
     e9e:	98 0f       	add	r25, r24
     ea0:	9a 30       	cpi	r25, 0x0A	; 10
     ea2:	40 f0       	brcs	.+16     	; 0xeb4 <xMBASCIIReceiveFSM+0x62>
    {
        return ( UCHAR )( ucCharacter - '0' );
    }
    else if( ( ucCharacter >= 'A' ) && ( ucCharacter <= 'F' ) )
     ea4:	9f eb       	ldi	r25, 0xBF	; 191
     ea6:	98 0f       	add	r25, r24
     ea8:	96 30       	cpi	r25, 0x06	; 6
     eaa:	18 f4       	brcc	.+6      	; 0xeb2 <xMBASCIIReceiveFSM+0x60>
    {
        return ( UCHAR )( ucCharacter - 'A' + 0x0A );
     eac:	99 ec       	ldi	r25, 0xC9	; 201
     eae:	98 0f       	add	r25, r24
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <xMBASCIIReceiveFSM+0x62>
    }
    else
    {
        return 0xFF;
     eb2:	9f ef       	ldi	r25, 0xFF	; 255
            eRcvState = STATE_RX_WAIT_EOF;
        }
        else
        {
            ucResult = prvucMBCHAR2BIN( ucByte );
            switch ( eBytePos )
     eb4:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <eBytePos>
     eb8:	88 23       	and	r24, r24
     eba:	19 f0       	breq	.+6      	; 0xec2 <xMBASCIIReceiveFSM+0x70>
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	e1 f0       	breq	.+56     	; 0xef8 <xMBASCIIReceiveFSM+0xa6>
     ec0:	5f c0       	rjmp	.+190    	; 0xf80 <xMBASCIIReceiveFSM+0x12e>
            {
                /* High nibble of the byte comes first. We check for
                 * a buffer overflow here. */
            case BYTE_HIGH_NIBBLE:
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
     ec2:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <usRcvBufferPos>
     ec6:	30 91 19 04 	lds	r19, 0x0419	; 0x800419 <usRcvBufferPos+0x1>
     eca:	2f 3f       	cpi	r18, 0xFF	; 255
     ecc:	31 05       	cpc	r19, r1
     ece:	09 f0       	breq	.+2      	; 0xed2 <xMBASCIIReceiveFSM+0x80>
     ed0:	70 f4       	brcc	.+28     	; 0xeee <xMBASCIIReceiveFSM+0x9c>
                {
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
     ed2:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <usRcvBufferPos>
     ed6:	f0 91 19 04 	lds	r31, 0x0419	; 0x800419 <usRcvBufferPos+0x1>
     eda:	e6 5a       	subi	r30, 0xA6	; 166
     edc:	fb 4f       	sbci	r31, 0xFB	; 251
     ede:	92 95       	swap	r25
     ee0:	90 7f       	andi	r25, 0xF0	; 240
     ee2:	90 83       	st	Z, r25
                    eBytePos = BYTE_LOW_NIBBLE;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <eBytePos>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     eea:	80 e0       	ldi	r24, 0x00	; 0
            case BYTE_HIGH_NIBBLE:
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
                {
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
                    eBytePos = BYTE_LOW_NIBBLE;
                    break;
     eec:	4c c0       	rjmp	.+152    	; 0xf86 <xMBASCIIReceiveFSM+0x134>
                }
                else
                {
                    /* not handled in Modbus specification but seems
                     * a resonable implementation. */
                    eRcvState = STATE_RX_IDLE;
     eee:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <eRcvState>
                    /* Disable previously activated timer because of error state. */
                    vMBPortTimersDisable(  );
     ef2:	02 d6       	rcall	.+3076   	; 0x1af8 <vMBPortTimersDisable>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     ef4:	80 e0       	ldi	r24, 0x00	; 0
                     * a resonable implementation. */
                    eRcvState = STATE_RX_IDLE;
                    /* Disable previously activated timer because of error state. */
                    vMBPortTimersDisable(  );
                }
                break;
     ef6:	47 c0       	rjmp	.+142    	; 0xf86 <xMBASCIIReceiveFSM+0x134>

            case BYTE_LOW_NIBBLE:
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
     ef8:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <usRcvBufferPos>
     efc:	f0 91 19 04 	lds	r31, 0x0419	; 0x800419 <usRcvBufferPos+0x1>
     f00:	e6 5a       	subi	r30, 0xA6	; 166
     f02:	fb 4f       	sbci	r31, 0xFB	; 251
     f04:	80 81       	ld	r24, Z
     f06:	98 2b       	or	r25, r24
     f08:	90 83       	st	Z, r25
                usRcvBufferPos++;
     f0a:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <usRcvBufferPos>
     f0e:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <usRcvBufferPos+0x1>
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <usRcvBufferPos+0x1>
     f18:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <usRcvBufferPos>
                eBytePos = BYTE_HIGH_NIBBLE;
     f1c:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <eBytePos>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     f20:	80 e0       	ldi	r24, 0x00	; 0

            case BYTE_LOW_NIBBLE:
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
                usRcvBufferPos++;
                eBytePos = BYTE_HIGH_NIBBLE;
                break;
     f22:	31 c0       	rjmp	.+98     	; 0xf86 <xMBASCIIReceiveFSM+0x134>
            }
        }
        break;

    case STATE_RX_WAIT_EOF:
        if( ucByte == ucMBLFCharacter )
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <ucMBLFCharacter>
     f2a:	89 13       	cpse	r24, r25
        {
            /* Disable character timeout timer because all characters are
             * received. */
            vMBPortTimersDisable(  );
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <xMBASCIIReceiveFSM+0xe8>
            /* Receiver is again in idle state. */
            eRcvState = STATE_RX_IDLE;
     f2e:	e4 d5       	rcall	.+3016   	; 0x1af8 <vMBPortTimersDisable>
     f30:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <eRcvState>

            /* Notify the caller of eMBASCIIReceive that a new frame
             * was received. */
            xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	ef d4       	rcall	.+2526   	; 0x1916 <xMBPortEventPost>
     f38:	26 c0       	rjmp	.+76     	; 0xf86 <xMBASCIIReceiveFSM+0x134>
        }
        else if( ucByte == ':' )
     f3a:	8a 33       	cpi	r24, 0x3A	; 58
     f3c:	61 f4       	brne	.+24     	; 0xf56 <xMBASCIIReceiveFSM+0x104>
        {
            /* Empty receive buffer and back to receive state. */
            eBytePos = BYTE_HIGH_NIBBLE;
     f3e:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <eBytePos>
            usRcvBufferPos = 0;
     f42:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <usRcvBufferPos+0x1>
     f46:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <usRcvBufferPos>
            eRcvState = STATE_RX_RCV;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <eRcvState>

            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
     f50:	ce d5       	rcall	.+2972   	; 0x1aee <vMBPortTimersEnable>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	18 c0       	rjmp	.+48     	; 0xf86 <xMBASCIIReceiveFSM+0x134>
            vMBPortTimersEnable(  );
        }
        else
        {
            /* Frame is not okay. Delete entire frame. */
            eRcvState = STATE_RX_IDLE;
     f56:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <eRcvState>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
            eRcvState = STATE_RX_IDLE;
        }
        break;

    case STATE_RX_IDLE:
        if( ucByte == ':' )
     f5c:	14 c0       	rjmp	.+40     	; 0xf86 <xMBASCIIReceiveFSM+0x134>
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	8a 33       	cpi	r24, 0x3A	; 58
        {
            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
     f62:	81 f4       	brne	.+32     	; 0xf84 <xMBASCIIReceiveFSM+0x132>
     f64:	c4 d5       	rcall	.+2952   	; 0x1aee <vMBPortTimersEnable>
            /* Reset the input buffers to store the frame. */
            usRcvBufferPos = 0;;
     f66:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <usRcvBufferPos+0x1>
     f6a:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <usRcvBufferPos>
            eBytePos = BYTE_HIGH_NIBBLE;
     f6e:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <eBytePos>
            eRcvState = STATE_RX_RCV;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <eRcvState>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	05 c0       	rjmp	.+10     	; 0xf86 <xMBASCIIReceiveFSM+0x134>
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <xMBASCIIReceiveFSM+0x134>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	01 c0       	rjmp	.+2      	; 0xf86 <xMBASCIIReceiveFSM+0x134>
     f84:	80 e0       	ldi	r24, 0x00	; 0
        }
        break;
    }

    return xNeedPoll;
}
     f86:	0f 90       	pop	r0
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <xMBASCIITransmitFSM>:

BOOL
xMBASCIITransmitFSM( void )
{
     f8e:	cf 93       	push	r28
    BOOL            xNeedPoll = FALSE;
    UCHAR           ucByte;

    assert( eRcvState == STATE_RX_IDLE );
    switch ( eSndState )
     f90:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <eSndState>
     f94:	82 30       	cpi	r24, 0x02	; 2
     f96:	b9 f0       	breq	.+46     	; 0xfc6 <xMBASCIITransmitFSM+0x38>
     f98:	30 f4       	brcc	.+12     	; 0xfa6 <xMBASCIITransmitFSM+0x18>
     f9a:	88 23       	and	r24, r24
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <xMBASCIITransmitFSM+0x12>
     f9e:	7b c0       	rjmp	.+246    	; 0x1096 <xMBASCIITransmitFSM+0x108>
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	41 f0       	breq	.+16     	; 0xfb4 <xMBASCIITransmitFSM+0x26>
     fa4:	7d c0       	rjmp	.+250    	; 0x10a0 <xMBASCIITransmitFSM+0x112>
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	09 f4       	brne	.+2      	; 0xfac <xMBASCIITransmitFSM+0x1e>
     faa:	62 c0       	rjmp	.+196    	; 0x1070 <xMBASCIITransmitFSM+0xe2>
     fac:	84 30       	cpi	r24, 0x04	; 4
     fae:	09 f4       	brne	.+2      	; 0xfb2 <xMBASCIITransmitFSM+0x24>
     fb0:	67 c0       	rjmp	.+206    	; 0x1080 <xMBASCIITransmitFSM+0xf2>
     fb2:	76 c0       	rjmp	.+236    	; 0x10a0 <xMBASCIITransmitFSM+0x112>
    {
        /* Start of transmission. The start of a frame is defined by sending
         * the character ':'. */
    case STATE_TX_START:
        ucByte = ':';
        xMBPortSerialPutByte( ( CHAR )ucByte );
     fb4:	8a e3       	ldi	r24, 0x3A	; 58
     fb6:	23 d5       	rcall	.+2630   	; 0x19fe <xMBPortSerialPutByte>
        eSndState = STATE_TX_DATA;
     fb8:	82 e0       	ldi	r24, 0x02	; 2
     fba:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <eSndState>
        eBytePos = BYTE_HIGH_NIBBLE;
     fbe:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <eBytePos>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     fc2:	c0 e0       	ldi	r28, 0x00	; 0
    case STATE_TX_START:
        ucByte = ':';
        xMBPortSerialPutByte( ( CHAR )ucByte );
        eSndState = STATE_TX_DATA;
        eBytePos = BYTE_HIGH_NIBBLE;
        break;
     fc4:	70 c0       	rjmp	.+224    	; 0x10a6 <xMBASCIITransmitFSM+0x118>
        /* Send the data block. Each data byte is encoded as a character hex
         * stream with the high nibble sent first and the low nibble sent
         * last. If all data bytes are exhausted we send a '\r' character
         * to end the transmission. */
    case STATE_TX_DATA:
        if( usSndBufferCount > 0 )
     fc6:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <usSndBufferCount>
     fca:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <usSndBufferCount+0x1>
     fce:	89 2b       	or	r24, r25
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <xMBASCIITransmitFSM+0x46>
     fd2:	47 c0       	rjmp	.+142    	; 0x1062 <xMBASCIITransmitFSM+0xd4>
        {
            switch ( eBytePos )
     fd4:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <eBytePos>
     fd8:	88 23       	and	r24, r24
     fda:	19 f0       	breq	.+6      	; 0xfe2 <xMBASCIITransmitFSM+0x54>
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	c9 f0       	breq	.+50     	; 0x1012 <xMBASCIITransmitFSM+0x84>
     fe0:	61 c0       	rjmp	.+194    	; 0x10a4 <xMBASCIITransmitFSM+0x116>
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
     fe2:	e0 91 15 04 	lds	r30, 0x0415	; 0x800415 <pucSndBufferCur>
     fe6:	f0 91 16 04 	lds	r31, 0x0416	; 0x800416 <pucSndBufferCur+0x1>
     fea:	80 81       	ld	r24, Z
     fec:	82 95       	swap	r24
     fee:	8f 70       	andi	r24, 0x0F	; 15
}

static          UCHAR
prvucMBBIN2CHAR( UCHAR ucByte )
{
    if( ucByte <= 0x09 )
     ff0:	8a 30       	cpi	r24, 0x0A	; 10
     ff2:	10 f4       	brcc	.+4      	; 0xff8 <xMBASCIITransmitFSM+0x6a>
    {
        return ( UCHAR )( '0' + ucByte );
     ff4:	80 5d       	subi	r24, 0xD0	; 208
     ff6:	07 c0       	rjmp	.+14     	; 0x1006 <xMBASCIITransmitFSM+0x78>
    }
    else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
     ff8:	96 ef       	ldi	r25, 0xF6	; 246
     ffa:	98 0f       	add	r25, r24
     ffc:	96 30       	cpi	r25, 0x06	; 6
     ffe:	10 f4       	brcc	.+4      	; 0x1004 <xMBASCIITransmitFSM+0x76>
    {
        return ( UCHAR )( ucByte - 0x0A + 'A' );
    1000:	89 5c       	subi	r24, 0xC9	; 201
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <xMBASCIITransmitFSM+0x78>
        {
            switch ( eBytePos )
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
                xMBPortSerialPutByte( ( CHAR ) ucByte );
    1004:	80 e3       	ldi	r24, 0x30	; 48
    1006:	fb d4       	rcall	.+2550   	; 0x19fe <xMBPortSerialPutByte>
                eBytePos = BYTE_LOW_NIBBLE;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <eBytePos>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    100e:	c0 e0       	ldi	r28, 0x00	; 0
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
                xMBPortSerialPutByte( ( CHAR ) ucByte );
                eBytePos = BYTE_LOW_NIBBLE;
                break;
    1010:	4a c0       	rjmp	.+148    	; 0x10a6 <xMBASCIITransmitFSM+0x118>

            case BYTE_LOW_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
    1012:	e0 91 15 04 	lds	r30, 0x0415	; 0x800415 <pucSndBufferCur>
    1016:	f0 91 16 04 	lds	r31, 0x0416	; 0x800416 <pucSndBufferCur+0x1>
    101a:	80 81       	ld	r24, Z
    101c:	8f 70       	andi	r24, 0x0F	; 15
}

static          UCHAR
prvucMBBIN2CHAR( UCHAR ucByte )
{
    if( ucByte <= 0x09 )
    101e:	8a 30       	cpi	r24, 0x0A	; 10
    1020:	10 f4       	brcc	.+4      	; 0x1026 <xMBASCIITransmitFSM+0x98>
    {
        return ( UCHAR )( '0' + ucByte );
    1022:	80 5d       	subi	r24, 0xD0	; 208
    1024:	07 c0       	rjmp	.+14     	; 0x1034 <xMBASCIITransmitFSM+0xa6>
    }
    else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
    1026:	96 ef       	ldi	r25, 0xF6	; 246
    1028:	98 0f       	add	r25, r24
    102a:	96 30       	cpi	r25, 0x06	; 6
    102c:	10 f4       	brcc	.+4      	; 0x1032 <xMBASCIITransmitFSM+0xa4>
    {
        return ( UCHAR )( ucByte - 0x0A + 'A' );
    102e:	89 5c       	subi	r24, 0xC9	; 201
    else
    {
        /* Programming error. */
        assert( 0 );
    }
    return '0';
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <xMBASCIITransmitFSM+0xa6>
                eBytePos = BYTE_LOW_NIBBLE;
                break;

            case BYTE_LOW_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
                xMBPortSerialPutByte( ( CHAR )ucByte );
    1032:	80 e3       	ldi	r24, 0x30	; 48
    1034:	e4 d4       	rcall	.+2504   	; 0x19fe <xMBPortSerialPutByte>
                pucSndBufferCur++;
    1036:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <pucSndBufferCur>
    103a:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <pucSndBufferCur+0x1>
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <pucSndBufferCur+0x1>
    1044:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <pucSndBufferCur>
                eBytePos = BYTE_HIGH_NIBBLE;
    1048:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <eBytePos>
                usSndBufferCount--;
    104c:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <usSndBufferCount>
    1050:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <usSndBufferCount+0x1>
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <usSndBufferCount+0x1>
    105a:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <usSndBufferCount>
                break;
    105e:	c0 e0       	ldi	r28, 0x00	; 0
            }
        }
        else
        {
            xMBPortSerialPutByte( MB_ASCII_DEFAULT_CR );
    1060:	22 c0       	rjmp	.+68     	; 0x10a6 <xMBASCIITransmitFSM+0x118>
    1062:	8d e0       	ldi	r24, 0x0D	; 13
    1064:	cc d4       	rcall	.+2456   	; 0x19fe <xMBPortSerialPutByte>
            eSndState = STATE_TX_END;
    1066:	83 e0       	ldi	r24, 0x03	; 3
    1068:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <eSndState>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    106c:	c0 e0       	ldi	r28, 0x00	; 0
        }
        break;

        /* Finish the frame by sending a LF character. */
    case STATE_TX_END:
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
    106e:	1b c0       	rjmp	.+54     	; 0x10a6 <xMBASCIITransmitFSM+0x118>
    1070:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <ucMBLFCharacter>
    1074:	c4 d4       	rcall	.+2440   	; 0x19fe <xMBPortSerialPutByte>
        /* We need another state to make sure that the CR character has
         * been sent. */
        eSndState = STATE_TX_NOTIFY;
    1076:	84 e0       	ldi	r24, 0x04	; 4
    1078:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <eSndState>
        break;
    107c:	c0 e0       	ldi	r28, 0x00	; 0

        /* Notify the task which called eMBASCIISend that the frame has
         * been sent. */
    case STATE_TX_NOTIFY:
        eSndState = STATE_TX_IDLE;
    107e:	13 c0       	rjmp	.+38     	; 0x10a6 <xMBASCIITransmitFSM+0x118>
    1080:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <eSndState>
        xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
    1084:	83 e0       	ldi	r24, 0x03	; 3
    1086:	47 d4       	rcall	.+2190   	; 0x1916 <xMBPortEventPost>

        /* Disable transmitter. This prevents another transmit buffer
         * empty interrupt. */
        vMBPortSerialEnable( TRUE, FALSE );
    1088:	c8 2f       	mov	r28, r24
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
        eSndState = STATE_TX_IDLE;
    108e:	58 d4       	rcall	.+2224   	; 0x1940 <vMBPortSerialEnable>
    1090:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <eSndState>

        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <xMBASCIITransmitFSM+0x118>
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	52 d4       	rcall	.+2212   	; 0x1940 <vMBPortSerialEnable>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    109c:	c0 e0       	ldi	r28, 0x00	; 0
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <xMBASCIITransmitFSM+0x118>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    10a0:	c0 e0       	ldi	r28, 0x00	; 0
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <xMBASCIITransmitFSM+0x118>
    10a4:	c0 e0       	ldi	r28, 0x00	; 0
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    }

    return xNeedPoll;
}
    10a6:	8c 2f       	mov	r24, r28
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <xMBASCIITimerT1SExpired>:

BOOL
xMBASCIITimerT1SExpired( void )
{
    switch ( eRcvState )
    10ac:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <eRcvState>
    10b0:	81 50       	subi	r24, 0x01	; 1
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	10 f4       	brcc	.+4      	; 0x10ba <xMBASCIITimerT1SExpired+0xe>
        /* If we have a timeout we go back to the idle state and wait for
         * the next frame.
         */
    case STATE_RX_RCV:
    case STATE_RX_WAIT_EOF:
        eRcvState = STATE_RX_IDLE;
    10b6:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <eRcvState>

    default:
        assert( ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_WAIT_EOF ) );
        break;
    }
    vMBPortTimersDisable(  );
    10ba:	1e d5       	rcall	.+2620   	; 0x1af8 <vMBPortTimersDisable>

    /* no context switch required. */
    return FALSE;
}
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	08 95       	ret

000010c0 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    10c6:	db 01       	movw	r26, r22
    10c8:	2d 91       	ld	r18, X+
    10ca:	3c 91       	ld	r19, X
    10cc:	25 30       	cpi	r18, 0x05	; 5
    10ce:	31 05       	cpc	r19, r1
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <eMBFuncReadCoils+0x14>
    10d2:	55 c0       	rjmp	.+170    	; 0x117e <eMBFuncReadCoils+0xbe>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
    10d4:	fc 01       	movw	r30, r24
    10d6:	43 81       	ldd	r20, Z+3	; 0x03
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	54 2f       	mov	r21, r20
    10dc:	44 27       	eor	r20, r20
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
    10de:	24 81       	ldd	r18, Z+4	; 0x04
    10e0:	42 2b       	or	r20, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
    10e2:	9a 01       	movw	r18, r20
    10e4:	21 50       	subi	r18, 0x01	; 1
    10e6:	31 09       	sbc	r19, r1
    10e8:	2f 3c       	cpi	r18, 0xCF	; 207
    10ea:	37 40       	sbci	r19, 0x07	; 7
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <eMBFuncReadCoils+0x30>
    10ee:	49 c0       	rjmp	.+146    	; 0x1182 <eMBFuncReadCoils+0xc2>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    10f0:	dc 01       	movw	r26, r24
    10f2:	11 96       	adiw	r26, 0x01	; 1
    10f4:	3c 91       	ld	r19, X
    10f6:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    10f8:	12 96       	adiw	r26, 0x02	; 2
    10fa:	2c 91       	ld	r18, X
    10fc:	12 97       	sbiw	r26, 0x02	; 2
        if( ( usCoilCount >= 1 ) &&
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    10fe:	fb 01       	movw	r30, r22
    1100:	11 82       	std	Z+1, r1	; 0x01
    1102:	10 82       	st	Z, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
    1104:	e1 e0       	ldi	r30, 0x01	; 1
    1106:	ec 93       	st	X, r30
            *usLen += 1;
    1108:	db 01       	movw	r26, r22
    110a:	ed 91       	ld	r30, X+
    110c:	fc 91       	ld	r31, X
    110e:	11 97       	sbiw	r26, 0x01	; 1
    1110:	31 96       	adiw	r30, 0x01	; 1
    1112:	ed 93       	st	X+, r30
    1114:	fc 93       	st	X, r31

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
    1116:	fa 01       	movw	r30, r20
    1118:	e7 70       	andi	r30, 0x07	; 7
    111a:	ff 27       	eor	r31, r31
    111c:	ef 2b       	or	r30, r31
    111e:	51 f0       	breq	.+20     	; 0x1134 <eMBFuncReadCoils+0x74>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
    1120:	fa 01       	movw	r30, r20
    1122:	f6 95       	lsr	r31
    1124:	e7 95       	ror	r30
    1126:	f6 95       	lsr	r31
    1128:	e7 95       	ror	r30
    112a:	f6 95       	lsr	r31
    112c:	e7 95       	ror	r30
    112e:	11 e0       	ldi	r17, 0x01	; 1
    1130:	1e 0f       	add	r17, r30
    1132:	08 c0       	rjmp	.+16     	; 0x1144 <eMBFuncReadCoils+0x84>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
    1134:	fa 01       	movw	r30, r20
    1136:	f6 95       	lsr	r31
    1138:	e7 95       	ror	r30
    113a:	f6 95       	lsr	r31
    113c:	e7 95       	ror	r30
    113e:	f6 95       	lsr	r31
    1140:	e7 95       	ror	r30
    1142:	1e 2f       	mov	r17, r30
    1144:	eb 01       	movw	r28, r22
            }
            *pucFrameCur++ = ucNBytes;
    1146:	fc 01       	movw	r30, r24
    1148:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
    114a:	68 81       	ld	r22, Y
    114c:	79 81       	ldd	r23, Y+1	; 0x01
    114e:	6f 5f       	subi	r22, 0xFF	; 255
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	79 83       	std	Y+1, r23	; 0x01
    1154:	68 83       	st	Y, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1156:	62 2f       	mov	r22, r18
    1158:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    115a:	73 2b       	or	r23, r19
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    115c:	6f 5f       	subi	r22, 0xFF	; 255
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	02 96       	adiw	r24, 0x02	; 2
    1164:	c9 dd       	rcall	.-1134   	; 0xcf8 <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1166:	88 23       	and	r24, r24
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1168:	11 f0       	breq	.+4      	; 0x116e <eMBFuncReadCoils+0xae>
    116a:	a1 d2       	rcall	.+1346   	; 0x16ae <prveMBError2Exception>
    116c:	0b c0       	rjmp	.+22     	; 0x1184 <eMBFuncReadCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    116e:	88 81       	ld	r24, Y
    1170:	99 81       	ldd	r25, Y+1	; 0x01
    1172:	81 0f       	add	r24, r17
    1174:	91 1d       	adc	r25, r1
    1176:	99 83       	std	Y+1, r25	; 0x01
    1178:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <eMBFuncReadCoils+0xc4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <eMBFuncReadCoils+0xc4>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1182:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	08 95       	ret

0000118c <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	00 d0       	rcall	.+0      	; 0x1192 <eMBFuncWriteCoil+0x6>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    1196:	fb 01       	movw	r30, r22
    1198:	20 81       	ld	r18, Z
    119a:	31 81       	ldd	r19, Z+1	; 0x01
    119c:	25 30       	cpi	r18, 0x05	; 5
    119e:	31 05       	cpc	r19, r1
    11a0:	01 f5       	brne	.+64     	; 0x11e2 <eMBFuncWriteCoil+0x56>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    11a2:	fc 01       	movw	r30, r24
    11a4:	24 81       	ldd	r18, Z+4	; 0x04
    11a6:	21 11       	cpse	r18, r1
    11a8:	1e c0       	rjmp	.+60     	; 0x11e6 <eMBFuncWriteCoil+0x5a>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
    11aa:	23 81       	ldd	r18, Z+3	; 0x03
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    11ac:	3f ef       	ldi	r19, 0xFF	; 255
    11ae:	32 0f       	add	r19, r18
    11b0:	3e 3f       	cpi	r19, 0xFE	; 254
    11b2:	d8 f0       	brcs	.+54     	; 0x11ea <eMBFuncWriteCoil+0x5e>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    11b4:	31 81       	ldd	r19, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    11b6:	62 81       	ldd	r22, Z+2	; 0x02

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
    11b8:	1a 82       	std	Y+2, r1	; 0x02
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
    11ba:	2f 3f       	cpi	r18, 0xFF	; 255
    11bc:	19 f4       	brne	.+6      	; 0x11c4 <eMBFuncWriteCoil+0x38>
            {
                ucBuf[0] = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <eMBFuncWriteCoil+0x3a>
            }
            else
            {
                ucBuf[0] = 0;
    11c4:	19 82       	std	Y+1, r1	; 0x01
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    11c6:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    11c8:	73 2b       	or	r23, r19
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
    11ca:	6f 5f       	subi	r22, 0xFF	; 255
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	21 e0       	ldi	r18, 0x01	; 1
    11d0:	41 e0       	ldi	r20, 0x01	; 1
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	8f dd       	rcall	.-1250   	; 0xcf8 <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    11da:	88 23       	and	r24, r24
            {
                eStatus = prveMBError2Exception( eRegStatus );
    11dc:	41 f0       	breq	.+16     	; 0x11ee <eMBFuncWriteCoil+0x62>
    11de:	67 d2       	rcall	.+1230   	; 0x16ae <prveMBError2Exception>
    11e0:	07 c0       	rjmp	.+14     	; 0x11f0 <eMBFuncWriteCoil+0x64>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	05 c0       	rjmp	.+10     	; 0x11f0 <eMBFuncWriteCoil+0x64>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	03 c0       	rjmp	.+6      	; 0x11f0 <eMBFuncWriteCoil+0x64>
    11ea:	83 e0       	ldi	r24, 0x03	; 3
    11ec:	01 c0       	rjmp	.+2      	; 0x11f0 <eMBFuncWriteCoil+0x64>
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    11ee:	80 e0       	ldi	r24, 0x00	; 0
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	08 95       	ret

000011fa <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    11fe:	fb 01       	movw	r30, r22
    1200:	20 81       	ld	r18, Z
    1202:	31 81       	ldd	r19, Z+1	; 0x01
    1204:	26 30       	cpi	r18, 0x06	; 6
    1206:	31 05       	cpc	r19, r1
    1208:	d8 f1       	brcs	.+118    	; 0x1280 <eMBFuncWriteMultipleCoils+0x86>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
    120a:	fc 01       	movw	r30, r24
    120c:	43 81       	ldd	r20, Z+3	; 0x03
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	54 2f       	mov	r21, r20
    1212:	44 27       	eor	r20, r20
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
    1214:	24 81       	ldd	r18, Z+4	; 0x04
    1216:	42 2b       	or	r20, r18

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
    1218:	9a 01       	movw	r18, r20
    121a:	27 70       	andi	r18, 0x07	; 7
    121c:	33 27       	eor	r19, r19
    121e:	23 2b       	or	r18, r19
    1220:	49 f0       	breq	.+18     	; 0x1234 <eMBFuncWriteMultipleCoils+0x3a>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
    1222:	9a 01       	movw	r18, r20
    1224:	36 95       	lsr	r19
    1226:	27 95       	ror	r18
    1228:	36 95       	lsr	r19
    122a:	27 95       	ror	r18
    122c:	36 95       	lsr	r19
    122e:	27 95       	ror	r18
    1230:	2f 5f       	subi	r18, 0xFF	; 255
    1232:	07 c0       	rjmp	.+14     	; 0x1242 <eMBFuncWriteMultipleCoils+0x48>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
    1234:	9a 01       	movw	r18, r20
    1236:	36 95       	lsr	r19
    1238:	27 95       	ror	r18
    123a:	36 95       	lsr	r19
    123c:	27 95       	ror	r18
    123e:	36 95       	lsr	r19
    1240:	27 95       	ror	r18
        }

        if( ( usCoilCnt >= 1 ) &&
    1242:	fa 01       	movw	r30, r20
    1244:	31 97       	sbiw	r30, 0x01	; 1
    1246:	e0 3b       	cpi	r30, 0xB0	; 176
    1248:	f7 40       	sbci	r31, 0x07	; 7
    124a:	e0 f4       	brcc	.+56     	; 0x1284 <eMBFuncWriteMultipleCoils+0x8a>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
    124c:	fc 01       	movw	r30, r24
    124e:	35 81       	ldd	r19, Z+5	; 0x05
    1250:	23 13       	cpse	r18, r19
    1252:	1a c0       	rjmp	.+52     	; 0x1288 <eMBFuncWriteMultipleCoils+0x8e>
    1254:	eb 01       	movw	r28, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    1256:	61 81       	ldd	r22, Z+1	; 0x01
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	76 2f       	mov	r23, r22
    125c:	66 27       	eor	r22, r22
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    125e:	22 81       	ldd	r18, Z+2	; 0x02
    1260:	62 2b       	or	r22, r18

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
    1262:	6f 5f       	subi	r22, 0xFF	; 255
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	21 e0       	ldi	r18, 0x01	; 1
    1268:	06 96       	adiw	r24, 0x06	; 6
    126a:	46 dd       	rcall	.-1396   	; 0xcf8 <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    126c:	88 23       	and	r24, r24
            {
                eStatus = prveMBError2Exception( eRegStatus );
    126e:	11 f0       	breq	.+4      	; 0x1274 <eMBFuncWriteMultipleCoils+0x7a>
    1270:	1e d2       	rcall	.+1084   	; 0x16ae <prveMBError2Exception>
    1272:	0b c0       	rjmp	.+22     	; 0x128a <eMBFuncWriteMultipleCoils+0x90>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    1274:	85 e0       	ldi	r24, 0x05	; 5
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	99 83       	std	Y+1, r25	; 0x01
    127a:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	05 c0       	rjmp	.+10     	; 0x128a <eMBFuncWriteMultipleCoils+0x90>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	03 c0       	rjmp	.+6      	; 0x128a <eMBFuncWriteMultipleCoils+0x90>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	01 c0       	rjmp	.+2      	; 0x128a <eMBFuncWriteMultipleCoils+0x90>
    1288:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    1296:	db 01       	movw	r26, r22
    1298:	2d 91       	ld	r18, X+
    129a:	3c 91       	ld	r19, X
    129c:	25 30       	cpi	r18, 0x05	; 5
    129e:	31 05       	cpc	r19, r1
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <eMBFuncReadDiscreteInputs+0x14>
    12a2:	54 c0       	rjmp	.+168    	; 0x134c <eMBFuncReadDiscreteInputs+0xbc>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
    12a4:	fc 01       	movw	r30, r24
    12a6:	43 81       	ldd	r20, Z+3	; 0x03
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	54 2f       	mov	r21, r20
    12ac:	44 27       	eor	r20, r20
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
    12ae:	24 81       	ldd	r18, Z+4	; 0x04
    12b0:	42 2b       	or	r20, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
    12b2:	9a 01       	movw	r18, r20
    12b4:	21 50       	subi	r18, 0x01	; 1
    12b6:	31 09       	sbc	r19, r1
    12b8:	2f 3c       	cpi	r18, 0xCF	; 207
    12ba:	37 40       	sbci	r19, 0x07	; 7
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <eMBFuncReadDiscreteInputs+0x30>
    12be:	48 c0       	rjmp	.+144    	; 0x1350 <eMBFuncReadDiscreteInputs+0xc0>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    12c0:	dc 01       	movw	r26, r24
    12c2:	11 96       	adiw	r26, 0x01	; 1
    12c4:	3c 91       	ld	r19, X
    12c6:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    12c8:	12 96       	adiw	r26, 0x02	; 2
    12ca:	2c 91       	ld	r18, X
    12cc:	12 97       	sbiw	r26, 0x02	; 2
        if( ( usDiscreteCnt >= 1 ) &&
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    12ce:	fb 01       	movw	r30, r22
    12d0:	11 82       	std	Z+1, r1	; 0x01
    12d2:	10 82       	st	Z, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
    12d4:	e2 e0       	ldi	r30, 0x02	; 2
    12d6:	ec 93       	st	X, r30
            *usLen += 1;
    12d8:	db 01       	movw	r26, r22
    12da:	ed 91       	ld	r30, X+
    12dc:	fc 91       	ld	r31, X
    12de:	11 97       	sbiw	r26, 0x01	; 1
    12e0:	31 96       	adiw	r30, 0x01	; 1
    12e2:	ed 93       	st	X+, r30
    12e4:	fc 93       	st	X, r31

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
    12e6:	fa 01       	movw	r30, r20
    12e8:	e7 70       	andi	r30, 0x07	; 7
    12ea:	ff 27       	eor	r31, r31
    12ec:	ef 2b       	or	r30, r31
    12ee:	51 f0       	breq	.+20     	; 0x1304 <eMBFuncReadDiscreteInputs+0x74>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
    12f0:	fa 01       	movw	r30, r20
    12f2:	f6 95       	lsr	r31
    12f4:	e7 95       	ror	r30
    12f6:	f6 95       	lsr	r31
    12f8:	e7 95       	ror	r30
    12fa:	f6 95       	lsr	r31
    12fc:	e7 95       	ror	r30
    12fe:	11 e0       	ldi	r17, 0x01	; 1
    1300:	1e 0f       	add	r17, r30
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <eMBFuncReadDiscreteInputs+0x84>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
    1304:	fa 01       	movw	r30, r20
    1306:	f6 95       	lsr	r31
    1308:	e7 95       	ror	r30
    130a:	f6 95       	lsr	r31
    130c:	e7 95       	ror	r30
    130e:	f6 95       	lsr	r31
    1310:	e7 95       	ror	r30
    1312:	1e 2f       	mov	r17, r30
    1314:	eb 01       	movw	r28, r22
            }
            *pucFrameCur++ = ucNBytes;
    1316:	fc 01       	movw	r30, r24
    1318:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
    131a:	68 81       	ld	r22, Y
    131c:	79 81       	ldd	r23, Y+1	; 0x01
    131e:	6f 5f       	subi	r22, 0xFF	; 255
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	79 83       	std	Y+1, r23	; 0x01
    1324:	68 83       	st	Y, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1326:	62 2f       	mov	r22, r18
    1328:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    132a:	73 2b       	or	r23, r19
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    132c:	6f 5f       	subi	r22, 0xFF	; 255
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	02 96       	adiw	r24, 0x02	; 2
    1332:	e4 dc       	rcall	.-1592   	; 0xcfc <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1334:	88 23       	and	r24, r24
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1336:	11 f0       	breq	.+4      	; 0x133c <eMBFuncReadDiscreteInputs+0xac>
    1338:	ba d1       	rcall	.+884    	; 0x16ae <prveMBError2Exception>
    133a:	0b c0       	rjmp	.+22     	; 0x1352 <eMBFuncReadDiscreteInputs+0xc2>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    133c:	88 81       	ld	r24, Y
    133e:	99 81       	ldd	r25, Y+1	; 0x01
    1340:	81 0f       	add	r24, r17
    1342:	91 1d       	adc	r25, r1
    1344:	99 83       	std	Y+1, r25	; 0x01
    1346:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <eMBFuncReadDiscreteInputs+0xc2>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    134c:	83 e0       	ldi	r24, 0x03	; 3
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <eMBFuncReadDiscreteInputs+0xc2>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1350:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	08 95       	ret

0000135a <eMBFuncWriteHoldingRegister>:
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    135a:	fb 01       	movw	r30, r22
    135c:	20 81       	ld	r18, Z
    135e:	31 81       	ldd	r19, Z+1	; 0x01
    1360:	25 30       	cpi	r18, 0x05	; 5
    1362:	31 05       	cpc	r19, r1
    1364:	91 f4       	brne	.+36     	; 0x138a <eMBFuncWriteHoldingRegister+0x30>
    1366:	fc 01       	movw	r30, r24
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    1368:	61 81       	ldd	r22, Z+1	; 0x01
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	76 2f       	mov	r23, r22
    136e:	66 27       	eor	r22, r22
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    1370:	22 81       	ldd	r18, Z+2	; 0x02
    1372:	62 2b       	or	r22, r18
        usRegAddress++;

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
    1374:	6f 5f       	subi	r22, 0xFF	; 255
    1376:	7f 4f       	sbci	r23, 0xFF	; 255
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	41 e0       	ldi	r20, 0x01	; 1
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	03 96       	adiw	r24, 0x03	; 3
    1380:	df db       	rcall	.-2114   	; 0xb40 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
    1382:	88 23       	and	r24, r24
        {
            eStatus = prveMBError2Exception( eRegStatus );
    1384:	21 f0       	breq	.+8      	; 0x138e <eMBFuncWriteHoldingRegister+0x34>
    1386:	93 c1       	rjmp	.+806    	; 0x16ae <prveMBError2Exception>
    1388:	08 95       	ret
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	08 95       	ret

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    138e:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1390:	08 95       	ret

00001392 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    1396:	fb 01       	movw	r30, r22
    1398:	20 81       	ld	r18, Z
    139a:	31 81       	ldd	r19, Z+1	; 0x01
    139c:	26 30       	cpi	r18, 0x06	; 6
    139e:	31 05       	cpc	r19, r1
    13a0:	40 f1       	brcs	.+80     	; 0x13f2 <eMBFuncWriteMultipleHoldingRegister+0x60>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
    13a2:	fc 01       	movw	r30, r24
    13a4:	43 81       	ldd	r20, Z+3	; 0x03
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	54 2f       	mov	r21, r20
    13aa:	44 27       	eor	r20, r20
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
    13ac:	24 81       	ldd	r18, Z+4	; 0x04
    13ae:	42 2b       	or	r20, r18

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
    13b0:	9a 01       	movw	r18, r20
    13b2:	21 50       	subi	r18, 0x01	; 1
    13b4:	31 09       	sbc	r19, r1
    13b6:	28 37       	cpi	r18, 0x78	; 120
    13b8:	31 05       	cpc	r19, r1
    13ba:	e8 f4       	brcc	.+58     	; 0x13f6 <eMBFuncWriteMultipleHoldingRegister+0x64>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
    13bc:	35 81       	ldd	r19, Z+5	; 0x05
    13be:	24 2f       	mov	r18, r20
    13c0:	22 0f       	add	r18, r18
    13c2:	32 13       	cpse	r19, r18
    13c4:	1a c0       	rjmp	.+52     	; 0x13fa <eMBFuncWriteMultipleHoldingRegister+0x68>
    13c6:	eb 01       	movw	r28, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    13c8:	61 81       	ldd	r22, Z+1	; 0x01
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	76 2f       	mov	r23, r22
    13ce:	66 27       	eor	r22, r22
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    13d0:	22 81       	ldd	r18, Z+2	; 0x02
    13d2:	62 2b       	or	r22, r18
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
    13d4:	6f 5f       	subi	r22, 0xFF	; 255
    13d6:	7f 4f       	sbci	r23, 0xFF	; 255
    13d8:	21 e0       	ldi	r18, 0x01	; 1
    13da:	06 96       	adiw	r24, 0x06	; 6
    13dc:	b1 db       	rcall	.-2206   	; 0xb40 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    13de:	88 23       	and	r24, r24
            {
                eStatus = prveMBError2Exception( eRegStatus );
    13e0:	11 f0       	breq	.+4      	; 0x13e6 <eMBFuncWriteMultipleHoldingRegister+0x54>
    13e2:	65 d1       	rcall	.+714    	; 0x16ae <prveMBError2Exception>
    13e4:	0b c0       	rjmp	.+22     	; 0x13fc <eMBFuncWriteMultipleHoldingRegister+0x6a>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    13e6:	85 e0       	ldi	r24, 0x05	; 5
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	99 83       	std	Y+1, r25	; 0x01
    13ec:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	05 c0       	rjmp	.+10     	; 0x13fc <eMBFuncWriteMultipleHoldingRegister+0x6a>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    13f2:	83 e0       	ldi	r24, 0x03	; 3
    13f4:	03 c0       	rjmp	.+6      	; 0x13fc <eMBFuncWriteMultipleHoldingRegister+0x6a>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    13f6:	83 e0       	ldi	r24, 0x03	; 3
    13f8:	01 c0       	rjmp	.+2      	; 0x13fc <eMBFuncWriteMultipleHoldingRegister+0x6a>
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    140a:	fb 01       	movw	r30, r22
    140c:	20 81       	ld	r18, Z
    140e:	31 81       	ldd	r19, Z+1	; 0x01
    1410:	25 30       	cpi	r18, 0x05	; 5
    1412:	31 05       	cpc	r19, r1
    1414:	a1 f5       	brne	.+104    	; 0x147e <eMBFuncReadHoldingRegister+0x7c>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
    1416:	fc 01       	movw	r30, r24
    1418:	24 81       	ldd	r18, Z+4	; 0x04
    141a:	02 2f       	mov	r16, r18
    141c:	10 e0       	ldi	r17, 0x00	; 0

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
    141e:	a8 01       	movw	r20, r16
    1420:	41 50       	subi	r20, 0x01	; 1
    1422:	51 09       	sbc	r21, r1
    1424:	4d 37       	cpi	r20, 0x7D	; 125
    1426:	51 05       	cpc	r21, r1
    1428:	60 f5       	brcc	.+88     	; 0x1482 <eMBFuncReadHoldingRegister+0x80>
    142a:	eb 01       	movw	r28, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    142c:	31 81       	ldd	r19, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    142e:	62 81       	ldd	r22, Z+2	; 0x02
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    1430:	19 82       	std	Y+1, r1	; 0x01
    1432:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
    1434:	83 e0       	ldi	r24, 0x03	; 3
    1436:	80 83       	st	Z, r24
            *usLen += 1;
    1438:	88 81       	ld	r24, Y
    143a:	99 81       	ldd	r25, Y+1	; 0x01
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	99 83       	std	Y+1, r25	; 0x01
    1440:	88 83       	st	Y, r24

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
    1442:	22 0f       	add	r18, r18
    1444:	21 83       	std	Z+1, r18	; 0x01
            *usLen += 1;
    1446:	88 81       	ld	r24, Y
    1448:	99 81       	ldd	r25, Y+1	; 0x01
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	99 83       	std	Y+1, r25	; 0x01
    144e:	88 83       	st	Y, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1450:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1452:	73 2b       	or	r23, r19
            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
    1454:	6f 5f       	subi	r22, 0xFF	; 255
    1456:	7f 4f       	sbci	r23, 0xFF	; 255
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	a8 01       	movw	r20, r16
    145c:	cf 01       	movw	r24, r30
    145e:	02 96       	adiw	r24, 0x02	; 2
    1460:	6f db       	rcall	.-2338   	; 0xb40 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1462:	88 23       	and	r24, r24
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1464:	11 f0       	breq	.+4      	; 0x146a <eMBFuncReadHoldingRegister+0x68>
    1466:	23 d1       	rcall	.+582    	; 0x16ae <prveMBError2Exception>
    1468:	0d c0       	rjmp	.+26     	; 0x1484 <eMBFuncReadHoldingRegister+0x82>
            }
            else
            {
                *usLen += usRegCount * 2;
    146a:	00 0f       	add	r16, r16
    146c:	11 1f       	adc	r17, r17
    146e:	88 81       	ld	r24, Y
    1470:	99 81       	ldd	r25, Y+1	; 0x01
    1472:	08 0f       	add	r16, r24
    1474:	19 1f       	adc	r17, r25
    1476:	19 83       	std	Y+1, r17	; 0x01
    1478:	08 83       	st	Y, r16
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	03 c0       	rjmp	.+6      	; 0x1484 <eMBFuncReadHoldingRegister+0x82>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <eMBFuncReadHoldingRegister+0x82>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1482:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	08 95       	ret

0000148e <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    148e:	cf 92       	push	r12
    1490:	df 92       	push	r13
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    149e:	fb 01       	movw	r30, r22
    14a0:	20 81       	ld	r18, Z
    14a2:	31 81       	ldd	r19, Z+1	; 0x01
    14a4:	2a 30       	cpi	r18, 0x0A	; 10
    14a6:	31 05       	cpc	r19, r1
    14a8:	08 f4       	brcc	.+2      	; 0x14ac <eMBFuncReadWriteMultipleHoldingRegister+0x1e>
    14aa:	64 c0       	rjmp	.+200    	; 0x1574 <eMBFuncReadWriteMultipleHoldingRegister+0xe6>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
    14ac:	fc 01       	movw	r30, r24
    14ae:	c3 81       	ldd	r28, Z+3	; 0x03
    14b0:	d0 e0       	ldi	r29, 0x00	; 0
    14b2:	dc 2f       	mov	r29, r28
    14b4:	cc 27       	eor	r28, r28
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
    14b6:	24 81       	ldd	r18, Z+4	; 0x04
    14b8:	c2 2b       	or	r28, r18
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    14ba:	9e 01       	movw	r18, r28
    14bc:	21 50       	subi	r18, 0x01	; 1
    14be:	31 09       	sbc	r19, r1
    14c0:	2d 37       	cpi	r18, 0x7D	; 125
    14c2:	31 05       	cpc	r19, r1
    14c4:	08 f0       	brcs	.+2      	; 0x14c8 <eMBFuncReadWriteMultipleHoldingRegister+0x3a>
    14c6:	58 c0       	rjmp	.+176    	; 0x1578 <eMBFuncReadWriteMultipleHoldingRegister+0xea>

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
    14c8:	47 81       	ldd	r20, Z+7	; 0x07
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	54 2f       	mov	r21, r20
    14ce:	44 27       	eor	r20, r20
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
    14d0:	20 85       	ldd	r18, Z+8	; 0x08
    14d2:	42 2b       	or	r20, r18

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    14d4:	9a 01       	movw	r18, r20
    14d6:	21 50       	subi	r18, 0x01	; 1
    14d8:	31 09       	sbc	r19, r1
    14da:	29 37       	cpi	r18, 0x79	; 121
    14dc:	31 05       	cpc	r19, r1
    14de:	08 f0       	brcs	.+2      	; 0x14e2 <eMBFuncReadWriteMultipleHoldingRegister+0x54>
    14e0:	4d c0       	rjmp	.+154    	; 0x157c <eMBFuncReadWriteMultipleHoldingRegister+0xee>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
    14e2:	21 85       	ldd	r18, Z+9	; 0x09
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	fa 01       	movw	r30, r20
    14e8:	ee 0f       	add	r30, r30
    14ea:	ff 1f       	adc	r31, r31
    14ec:	e2 17       	cp	r30, r18
    14ee:	f3 07       	cpc	r31, r19
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <eMBFuncReadWriteMultipleHoldingRegister+0x66>
    14f2:	46 c0       	rjmp	.+140    	; 0x1580 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
    14f4:	8b 01       	movw	r16, r22
    14f6:	7c 01       	movw	r14, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
    14f8:	fc 01       	movw	r30, r24
    14fa:	c1 80       	ldd	r12, Z+1	; 0x01
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
    14fc:	d2 80       	ldd	r13, Z+2	; 0x02
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
    14fe:	65 81       	ldd	r22, Z+5	; 0x05
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	76 2f       	mov	r23, r22
    1504:	66 27       	eor	r22, r22
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
    1506:	86 81       	ldd	r24, Z+6	; 0x06
    1508:	68 2b       	or	r22, r24
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
    150a:	6f 5f       	subi	r22, 0xFF	; 255
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	21 e0       	ldi	r18, 0x01	; 1
    1510:	c7 01       	movw	r24, r14
    1512:	0a 96       	adiw	r24, 0x0a	; 10
    1514:	15 db       	rcall	.-2518   	; 0xb40 <eMBRegHoldingCB>
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
    1516:	81 11       	cpse	r24, r1
    1518:	35 c0       	rjmp	.+106    	; 0x1584 <eMBFuncReadWriteMultipleHoldingRegister+0xf6>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
    151a:	f8 01       	movw	r30, r16
    151c:	11 82       	std	Z+1, r1	; 0x01
    151e:	10 82       	st	Z, r1

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
    1520:	87 e1       	ldi	r24, 0x17	; 23
    1522:	f7 01       	movw	r30, r14
    1524:	80 83       	st	Z, r24
                *usLen += 1;
    1526:	f8 01       	movw	r30, r16
    1528:	80 81       	ld	r24, Z
    152a:	91 81       	ldd	r25, Z+1	; 0x01
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
    1532:	8c 2f       	mov	r24, r28
    1534:	88 0f       	add	r24, r24
    1536:	f7 01       	movw	r30, r14
    1538:	81 83       	std	Z+1, r24	; 0x01
                *usLen += 1;
    153a:	f8 01       	movw	r30, r16
    153c:	80 81       	ld	r24, Z
    153e:	91 81       	ldd	r25, Z+1	; 0x01
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
    1546:	6d 2d       	mov	r22, r13
    1548:	70 e0       	ldi	r23, 0x00	; 0
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
    154a:	7c 29       	or	r23, r12
                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;

                /* Make the read callback. */
                eRegStatus =
    154c:	6f 5f       	subi	r22, 0xFF	; 255
    154e:	7f 4f       	sbci	r23, 0xFF	; 255
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	ae 01       	movw	r20, r28
    1554:	c7 01       	movw	r24, r14
    1556:	02 96       	adiw	r24, 0x02	; 2
    1558:	f3 da       	rcall	.-2586   	; 0xb40 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
    155a:	81 11       	cpse	r24, r1
    155c:	13 c0       	rjmp	.+38     	; 0x1584 <eMBFuncReadWriteMultipleHoldingRegister+0xf6>
                {
                    *usLen += 2 * usRegReadCount;
    155e:	cc 0f       	add	r28, r28
    1560:	dd 1f       	adc	r29, r29
    1562:	f8 01       	movw	r30, r16
    1564:	80 81       	ld	r24, Z
    1566:	91 81       	ldd	r25, Z+1	; 0x01
    1568:	8c 0f       	add	r24, r28
    156a:	9d 1f       	adc	r25, r29
    156c:	91 83       	std	Z+1, r25	; 0x01
    156e:	80 83       	st	Z, r24
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	09 c0       	rjmp	.+18     	; 0x1586 <eMBFuncReadWriteMultipleHoldingRegister+0xf8>
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	07 c0       	rjmp	.+14     	; 0x1586 <eMBFuncReadWriteMultipleHoldingRegister+0xf8>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1578:	83 e0       	ldi	r24, 0x03	; 3
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <eMBFuncReadWriteMultipleHoldingRegister+0xf8>
    157c:	83 e0       	ldi	r24, 0x03	; 3
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <eMBFuncReadWriteMultipleHoldingRegister+0xf8>
    1580:	83 e0       	ldi	r24, 0x03	; 3
                    *usLen += 2 * usRegReadCount;
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <eMBFuncReadWriteMultipleHoldingRegister+0xf8>
    1584:	94 d0       	rcall	.+296    	; 0x16ae <prveMBError2Exception>
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
        }
    }
    return eStatus;
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	df 90       	pop	r13
    1594:	cf 90       	pop	r12
    1596:	08 95       	ret

00001598 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    15a0:	fb 01       	movw	r30, r22
    15a2:	20 81       	ld	r18, Z
    15a4:	31 81       	ldd	r19, Z+1	; 0x01
    15a6:	25 30       	cpi	r18, 0x05	; 5
    15a8:	31 05       	cpc	r19, r1
    15aa:	b9 f5       	brne	.+110    	; 0x161a <eMBFuncReadInputRegister+0x82>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
    15ac:	fc 01       	movw	r30, r24
    15ae:	03 81       	ldd	r16, Z+3	; 0x03
    15b0:	10 e0       	ldi	r17, 0x00	; 0
    15b2:	10 2f       	mov	r17, r16
    15b4:	00 27       	eor	r16, r16
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
    15b6:	24 81       	ldd	r18, Z+4	; 0x04
    15b8:	02 2b       	or	r16, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
    15ba:	98 01       	movw	r18, r16
    15bc:	21 50       	subi	r18, 0x01	; 1
    15be:	31 09       	sbc	r19, r1
    15c0:	2c 37       	cpi	r18, 0x7C	; 124
    15c2:	31 05       	cpc	r19, r1
    15c4:	60 f5       	brcc	.+88     	; 0x161e <eMBFuncReadInputRegister+0x86>
    15c6:	eb 01       	movw	r28, r22
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    15c8:	21 81       	ldd	r18, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    15ca:	62 81       	ldd	r22, Z+2	; 0x02
        if( ( usRegCount >= 1 )
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    15cc:	19 82       	std	Y+1, r1	; 0x01
    15ce:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
    15d0:	84 e0       	ldi	r24, 0x04	; 4
    15d2:	80 83       	st	Z, r24
            *usLen += 1;
    15d4:	88 81       	ld	r24, Y
    15d6:	99 81       	ldd	r25, Y+1	; 0x01
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	99 83       	std	Y+1, r25	; 0x01
    15dc:	88 83       	st	Y, r24

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
    15de:	80 2f       	mov	r24, r16
    15e0:	88 0f       	add	r24, r24
    15e2:	81 83       	std	Z+1, r24	; 0x01
            *usLen += 1;
    15e4:	88 81       	ld	r24, Y
    15e6:	99 81       	ldd	r25, Y+1	; 0x01
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	99 83       	std	Y+1, r25	; 0x01
    15ec:	88 83       	st	Y, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    15ee:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    15f0:	72 2b       	or	r23, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;

            eRegStatus =
    15f2:	6f 5f       	subi	r22, 0xFF	; 255
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	a8 01       	movw	r20, r16
    15f8:	cf 01       	movw	r24, r30
    15fa:	02 96       	adiw	r24, 0x02	; 2
    15fc:	82 da       	rcall	.-2812   	; 0xb02 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    15fe:	88 23       	and	r24, r24
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1600:	11 f0       	breq	.+4      	; 0x1606 <eMBFuncReadInputRegister+0x6e>
    1602:	55 d0       	rcall	.+170    	; 0x16ae <prveMBError2Exception>
    1604:	0d c0       	rjmp	.+26     	; 0x1620 <eMBFuncReadInputRegister+0x88>
            }
            else
            {
                *usLen += usRegCount * 2;
    1606:	00 0f       	add	r16, r16
    1608:	11 1f       	adc	r17, r17
    160a:	88 81       	ld	r24, Y
    160c:	99 81       	ldd	r25, Y+1	; 0x01
    160e:	08 0f       	add	r16, r24
    1610:	19 1f       	adc	r17, r25
    1612:	19 83       	std	Y+1, r17	; 0x01
    1614:	08 83       	st	Y, r16
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <eMBFuncReadInputRegister+0x88>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    161a:	83 e0       	ldi	r24, 0x03	; 3
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <eMBFuncReadInputRegister+0x88>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    161e:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <eMBSetSlaveID>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    eMBErrorCode    eStatus = MB_ENOERR;

    /* the first byte and second byte in the buffer is reserved for
     * the parameter ucSlaveID and the running flag. The rest of
     * the buffer is available for additional data. */
    if( usAdditionalLen + 2 < MB_FUNC_OTHER_REP_SLAVEID_BUF )
    162e:	e9 01       	movw	r28, r18
    1630:	22 96       	adiw	r28, 0x02	; 2
    1632:	c0 32       	cpi	r28, 0x20	; 32
    1634:	d1 05       	cpc	r29, r1
    1636:	e8 f4       	brcc	.+58     	; 0x1672 <eMBSetSlaveID+0x48>
    {
        usMBSlaveIDLen = 0;
        ucMBSlaveID[usMBSlaveIDLen++] = ucSlaveID;
    1638:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <ucMBSlaveID>
        ucMBSlaveID[usMBSlaveIDLen++] = ( UCHAR )( xIsRunning ? 0xFF : 0x00 );
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <usMBSlaveIDLen+0x1>
    1644:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <usMBSlaveIDLen>
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	61 11       	cpse	r22, r1
    164c:	01 c0       	rjmp	.+2      	; 0x1650 <eMBSetSlaveID+0x26>
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	81 95       	neg	r24
    1652:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <ucMBSlaveID+0x1>
        if( usAdditionalLen > 0 )
    1656:	21 15       	cp	r18, r1
    1658:	31 05       	cpc	r19, r1
    165a:	69 f0       	breq	.+26     	; 0x1676 <eMBSetSlaveID+0x4c>
    165c:	ba 01       	movw	r22, r20
        {
            memcpy( &ucMBSlaveID[usMBSlaveIDLen], pucAdditional,
    165e:	a9 01       	movw	r20, r18
    1660:	80 e2       	ldi	r24, 0x20	; 32
    1662:	94 e0       	ldi	r25, 0x04	; 4
    1664:	fe d3       	rcall	.+2044   	; 0x1e62 <memcpy>
                    ( size_t )usAdditionalLen );
            usMBSlaveIDLen += usAdditionalLen;
    1666:	d0 93 1d 04 	sts	0x041D, r29	; 0x80041d <usMBSlaveIDLen+0x1>
    166a:	c0 93 1c 04 	sts	0x041C, r28	; 0x80041c <usMBSlaveIDLen>

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <eMBSetSlaveID+0x4e>
            usMBSlaveIDLen += usAdditionalLen;
        }
    }
    else
    {
        eStatus = MB_ENORES;
    1672:	84 e0       	ldi	r24, 0x04	; 4
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <eMBSetSlaveID+0x4e>

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    1676:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_ENORES;
    }
    return eStatus;
}
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	08 95       	ret

0000167e <eMBFuncReportSlaveID>:

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	8b 01       	movw	r16, r22
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
    1688:	c0 91 1c 04 	lds	r28, 0x041C	; 0x80041c <usMBSlaveIDLen>
    168c:	d0 91 1d 04 	lds	r29, 0x041D	; 0x80041d <usMBSlaveIDLen+0x1>
    1690:	ae 01       	movw	r20, r28
    1692:	6e e1       	ldi	r22, 0x1E	; 30
    1694:	74 e0       	ldi	r23, 0x04	; 4
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	e4 d3       	rcall	.+1992   	; 0x1e62 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
    169a:	21 96       	adiw	r28, 0x01	; 1
    169c:	f8 01       	movw	r30, r16
    169e:	d1 83       	std	Z+1, r29	; 0x01
    16a0:	c0 83       	st	Z, r28
    return MB_EX_NONE;
}
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	08 95       	ret

000016ae <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	21 f0       	breq	.+8      	; 0x16ba <prveMBError2Exception+0xc>
    16b2:	48 f0       	brcs	.+18     	; 0x16c6 <prveMBError2Exception+0x18>
    16b4:	87 30       	cpi	r24, 0x07	; 7
    16b6:	19 f0       	breq	.+6      	; 0x16be <prveMBError2Exception+0x10>
    16b8:	04 c0       	rjmp	.+8      	; 0x16c2 <prveMBError2Exception+0x14>
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
            break;

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	08 95       	ret
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
    16be:	86 e0       	ldi	r24, 0x06	; 6
            break;
    16c0:	08 95       	ret

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
    16c2:	84 e0       	ldi	r24, 0x04	; 4
            break;
    16c4:	08 95       	ret
    eMBException    eStatus;

    switch ( eErrorCode )
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
    16c6:	80 e0       	ldi	r24, 0x00	; 0
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
    16c8:	08 95       	ret

000016ca <eMBInit>:
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
    16ca:	cf 92       	push	r12
    16cc:	df 92       	push	r13
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	9f ef       	ldi	r25, 0xFF	; 255
    16da:	96 0f       	add	r25, r22
    16dc:	97 3f       	cpi	r25, 0xF7	; 247
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <eMBInit+0x18>
    16e0:	49 c0       	rjmp	.+146    	; 0x1774 <eMBInit+0xaa>
    16e2:	5e 2d       	mov	r21, r14
    16e4:	68 01       	movw	r12, r16
    16e6:	79 01       	movw	r14, r18
    16e8:	74 2f       	mov	r23, r20
    16ea:	96 2f       	mov	r25, r22
    16ec:	60 93 55 04 	sts	0x0455, r22	; 0x800455 <_ZL11ucMBAddress>
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	b1 f5       	brne	.+108    	; 0x1760 <eMBInit+0x96>
    16f4:	29 e9       	ldi	r18, 0x99	; 153
    16f6:	36 e0       	ldi	r19, 0x06	; 6
    16f8:	30 93 52 04 	sts	0x0452, r19	; 0x800452 <_ZL17pvMBFrameStartCur+0x1>
    16fc:	20 93 51 04 	sts	0x0451, r18	; 0x800451 <_ZL17pvMBFrameStartCur>
    1700:	23 ea       	ldi	r18, 0xA3	; 163
    1702:	36 e0       	ldi	r19, 0x06	; 6
    1704:	30 93 50 04 	sts	0x0450, r19	; 0x800450 <_ZL16pvMBFrameStopCur+0x1>
    1708:	20 93 4f 04 	sts	0x044F, r18	; 0x80044f <_ZL16pvMBFrameStopCur>
    170c:	20 ee       	ldi	r18, 0xE0	; 224
    170e:	36 e0       	ldi	r19, 0x06	; 6
    1710:	30 93 54 04 	sts	0x0454, r19	; 0x800454 <_ZL16peMBFrameSendCur+0x1>
    1714:	20 93 53 04 	sts	0x0453, r18	; 0x800453 <_ZL16peMBFrameSendCur>
    1718:	2a ea       	ldi	r18, 0xAA	; 170
    171a:	36 e0       	ldi	r19, 0x06	; 6
    171c:	30 93 4e 04 	sts	0x044E, r19	; 0x80044e <_ZL19peMBFrameReceiveCur+0x1>
    1720:	20 93 4d 04 	sts	0x044D, r18	; 0x80044d <_ZL19peMBFrameReceiveCur>
    1724:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <_ZL17pvMBFrameCloseCur+0x1>
    1728:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <_ZL17pvMBFrameCloseCur>
    172c:	29 e2       	ldi	r18, 0x29	; 41
    172e:	37 e0       	ldi	r19, 0x07	; 7
    1730:	30 93 4a 04 	sts	0x044A, r19	; 0x80044a <pxMBFrameCBByteReceived+0x1>
    1734:	20 93 49 04 	sts	0x0449, r18	; 0x800449 <pxMBFrameCBByteReceived>
    1738:	27 ec       	ldi	r18, 0xC7	; 199
    173a:	37 e0       	ldi	r19, 0x07	; 7
    173c:	30 93 48 04 	sts	0x0448, r19	; 0x800448 <pxMBFrameCBTransmitterEmpty+0x1>
    1740:	20 93 47 04 	sts	0x0447, r18	; 0x800447 <pxMBFrameCBTransmitterEmpty>
    1744:	26 e5       	ldi	r18, 0x56	; 86
    1746:	38 e0       	ldi	r19, 0x08	; 8
    1748:	30 93 46 04 	sts	0x0446, r19	; 0x800446 <pxMBPortCBTimerExpired+0x1>
    174c:	20 93 45 04 	sts	0x0445, r18	; 0x800445 <pxMBPortCBTimerExpired>
    1750:	05 2f       	mov	r16, r21
    1752:	a7 01       	movw	r20, r14
    1754:	96 01       	movw	r18, r12
    1756:	67 2f       	mov	r22, r23
    1758:	89 2f       	mov	r24, r25
    175a:	d2 da       	rcall	.-2652   	; 0xd00 <eMBASCIIInit>
    175c:	c8 2f       	mov	r28, r24
    175e:	01 c0       	rjmp	.+2      	; 0x1762 <eMBInit+0x98>
    1760:	c2 e0       	ldi	r28, 0x02	; 2
    1762:	c1 11       	cpse	r28, r1
    1764:	0a c0       	rjmp	.+20     	; 0x177a <eMBInit+0xb0>
    1766:	d3 d0       	rcall	.+422    	; 0x190e <xMBPortEventInit>
    1768:	88 23       	and	r24, r24
    176a:	31 f0       	breq	.+12     	; 0x1778 <eMBInit+0xae>
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_ZL8eMBState>
    1772:	03 c0       	rjmp	.+6      	; 0x177a <eMBInit+0xb0>
    1774:	c2 e0       	ldi	r28, 0x02	; 2
    1776:	01 c0       	rjmp	.+2      	; 0x177a <eMBInit+0xb0>
    1778:	c3 e0       	ldi	r28, 0x03	; 3
    177a:	8c 2f       	mov	r24, r28
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	ff 90       	pop	r15
    1784:	ef 90       	pop	r14
    1786:	df 90       	pop	r13
    1788:	cf 90       	pop	r12
    178a:	08 95       	ret

0000178c <eMBEnable>:
    178c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_ZL8eMBState>
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	49 f4       	brne	.+18     	; 0x17a6 <eMBEnable+0x1a>
    1794:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <_ZL17pvMBFrameStartCur>
    1798:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <_ZL17pvMBFrameStartCur+0x1>
    179c:	09 95       	icall
    179e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <_ZL8eMBState>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	08 95       	ret
    17a6:	86 e0       	ldi	r24, 0x06	; 6
    17a8:	08 95       	ret

000017aa <eMBPoll>:

eMBErrorCode
eMBPoll( void )
{
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	1f 92       	push	r1
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    17b4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <_ZL8eMBState>
    17b8:	81 11       	cpse	r24, r1
    17ba:	97 c0       	rjmp	.+302    	; 0x18ea <eMBPoll+0x140>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
    17bc:	ce 01       	movw	r24, r28
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	b1 d0       	rcall	.+354    	; 0x1924 <xMBPortEventGet>
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <eMBPoll+0x1e>
    17c6:	93 c0       	rjmp	.+294    	; 0x18ee <eMBPoll+0x144>
    {
        switch ( eEvent )
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	19 f0       	breq	.+6      	; 0x17d4 <eMBPoll+0x2a>
    17ce:	82 30       	cpi	r24, 0x02	; 2
    17d0:	d1 f0       	breq	.+52     	; 0x1806 <eMBPoll+0x5c>
    17d2:	8f c0       	rjmp	.+286    	; 0x18f2 <eMBPoll+0x148>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
    17d4:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <_ZL19peMBFrameReceiveCur>
    17d8:	f0 91 4e 04 	lds	r31, 0x044E	; 0x80044e <_ZL19peMBFrameReceiveCur+0x1>
    17dc:	40 e4       	ldi	r20, 0x40	; 64
    17de:	54 e0       	ldi	r21, 0x04	; 4
    17e0:	62 e4       	ldi	r22, 0x42	; 66
    17e2:	74 e0       	ldi	r23, 0x04	; 4
    17e4:	84 e4       	ldi	r24, 0x44	; 68
    17e6:	94 e0       	ldi	r25, 0x04	; 4
    17e8:	09 95       	icall
            if( eStatus == MB_ENOERR )
    17ea:	81 11       	cpse	r24, r1
    17ec:	84 c0       	rjmp	.+264    	; 0x18f6 <eMBPoll+0x14c>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
    17ee:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_ZZ7eMBPollE12ucRcvAddress>
    17f2:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <_ZL11ucMBAddress>
    17f6:	89 17       	cp	r24, r25
    17f8:	11 f0       	breq	.+4      	; 0x17fe <eMBPoll+0x54>
    17fa:	81 11       	cpse	r24, r1
    17fc:	7e c0       	rjmp	.+252    	; 0x18fa <eMBPoll+0x150>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	8a d0       	rcall	.+276    	; 0x1916 <xMBPortEventPost>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	80 c0       	rjmp	.+256    	; 0x1906 <eMBPoll+0x15c>
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
    1806:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <_ZZ7eMBPollE9ucMBFrame>
    180a:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <_ZZ7eMBPollE9ucMBFrame+0x1>
    180e:	4c 91       	ld	r20, X
    1810:	40 93 3f 04 	sts	0x043F, r20	; 0x80043f <_ZZ7eMBPollE14ucFunctionCode>
            eException = MB_EX_ILLEGAL_FUNCTION;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <_ZZ7eMBPollE10eException>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
    181a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <_ZL13xFuncHandlers>
    181e:	99 23       	and	r25, r25
    1820:	09 f4       	brne	.+2      	; 0x1824 <eMBPoll+0x7a>
    1822:	6d c0       	rjmp	.+218    	; 0x18fe <eMBPoll+0x154>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
    1824:	49 17       	cp	r20, r25
    1826:	59 f0       	breq	.+22     	; 0x183e <eMBPoll+0x94>
    1828:	e7 e0       	ldi	r30, 0x07	; 7
    182a:	f1 e0       	ldi	r31, 0x01	; 1
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    182c:	21 e0       	ldi	r18, 0x01	; 1
    182e:	30 e0       	ldi	r19, 0x00	; 0
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
    1830:	90 81       	ld	r25, Z
    1832:	99 23       	and	r25, r25
    1834:	09 f4       	brne	.+2      	; 0x1838 <eMBPoll+0x8e>
    1836:	63 c0       	rjmp	.+198    	; 0x18fe <eMBPoll+0x154>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
    1838:	49 13       	cpse	r20, r25
    183a:	1a c0       	rjmp	.+52     	; 0x1870 <eMBPoll+0xc6>
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <eMBPoll+0x98>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
    1842:	f9 01       	movw	r30, r18
    1844:	ee 0f       	add	r30, r30
    1846:	ff 1f       	adc	r31, r31
    1848:	2e 0f       	add	r18, r30
    184a:	3f 1f       	adc	r19, r31
    184c:	f9 01       	movw	r30, r18
    184e:	ec 5f       	subi	r30, 0xFC	; 252
    1850:	fe 4f       	sbci	r31, 0xFE	; 254
    1852:	01 80       	ldd	r0, Z+1	; 0x01
    1854:	f2 81       	ldd	r31, Z+2	; 0x02
    1856:	e0 2d       	mov	r30, r0
    1858:	60 e4       	ldi	r22, 0x40	; 64
    185a:	74 e0       	ldi	r23, 0x04	; 4
    185c:	cd 01       	movw	r24, r26
    185e:	09 95       	icall
    1860:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <_ZZ7eMBPollE10eException>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
    1864:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_ZZ7eMBPollE12ucRcvAddress>
    1868:	91 11       	cpse	r25, r1
    186a:	09 c0       	rjmp	.+18     	; 0x187e <eMBPoll+0xd4>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	4b c0       	rjmp	.+150    	; 0x1906 <eMBPoll+0x15c>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    1870:	2f 5f       	subi	r18, 0xFF	; 255
    1872:	3f 4f       	sbci	r19, 0xFF	; 255
    1874:	33 96       	adiw	r30, 0x03	; 3
    1876:	20 31       	cpi	r18, 0x10	; 16
    1878:	31 05       	cpc	r19, r1
    187a:	d1 f6       	brne	.-76     	; 0x1830 <eMBPoll+0x86>
    187c:	40 c0       	rjmp	.+128    	; 0x18fe <eMBPoll+0x154>

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
            {
                if( eException != MB_EX_NONE )
    187e:	88 23       	and	r24, r24
    1880:	19 f1       	breq	.+70     	; 0x18c8 <eMBPoll+0x11e>
    1882:	01 c0       	rjmp	.+2      	; 0x1886 <eMBPoll+0xdc>
    1884:	81 e0       	ldi	r24, 0x01	; 1
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
    1886:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <_ZZ7eMBPollE9ucMBFrame>
    188a:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <_ZZ7eMBPollE9ucMBFrame+0x1>
    188e:	21 e0       	ldi	r18, 0x01	; 1
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	30 93 41 04 	sts	0x0441, r19	; 0x800441 <_ZZ7eMBPollE8usLength+0x1>
    1896:	20 93 40 04 	sts	0x0440, r18	; 0x800440 <_ZZ7eMBPollE8usLength>
    189a:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <_ZZ7eMBPollE14ucFunctionCode>
    189e:	90 68       	ori	r25, 0x80	; 128
    18a0:	90 83       	st	Z, r25
                    ucMBFrame[usLength++] = eException;
    18a2:	40 91 42 04 	lds	r20, 0x0442	; 0x800442 <_ZZ7eMBPollE9ucMBFrame>
    18a6:	50 91 43 04 	lds	r21, 0x0443	; 0x800443 <_ZZ7eMBPollE9ucMBFrame+0x1>
    18aa:	20 91 40 04 	lds	r18, 0x0440	; 0x800440 <_ZZ7eMBPollE8usLength>
    18ae:	30 91 41 04 	lds	r19, 0x0441	; 0x800441 <_ZZ7eMBPollE8usLength+0x1>
    18b2:	b9 01       	movw	r22, r18
    18b4:	6f 5f       	subi	r22, 0xFF	; 255
    18b6:	7f 4f       	sbci	r23, 0xFF	; 255
    18b8:	70 93 41 04 	sts	0x0441, r23	; 0x800441 <_ZZ7eMBPollE8usLength+0x1>
    18bc:	60 93 40 04 	sts	0x0440, r22	; 0x800440 <_ZZ7eMBPollE8usLength>
    18c0:	fa 01       	movw	r30, r20
    18c2:	e2 0f       	add	r30, r18
    18c4:	f3 1f       	adc	r31, r19
    18c6:	80 83       	st	Z, r24
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
    18c8:	40 91 40 04 	lds	r20, 0x0440	; 0x800440 <_ZZ7eMBPollE8usLength>
    18cc:	50 91 41 04 	lds	r21, 0x0441	; 0x800441 <_ZZ7eMBPollE8usLength+0x1>
    18d0:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <_ZZ7eMBPollE9ucMBFrame>
    18d4:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <_ZZ7eMBPollE9ucMBFrame+0x1>
    18d8:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <_ZL16peMBFrameSendCur>
    18dc:	f0 91 54 04 	lds	r31, 0x0454	; 0x800454 <_ZL16peMBFrameSendCur+0x1>
    18e0:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <_ZL11ucMBAddress>
    18e4:	09 95       	icall

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	0e c0       	rjmp	.+28     	; 0x1906 <eMBPoll+0x15c>
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
    18ea:	86 e0       	ldi	r24, 0x06	; 6
    18ec:	0c c0       	rjmp	.+24     	; 0x1906 <eMBPoll+0x15c>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	0a c0       	rjmp	.+20     	; 0x1906 <eMBPoll+0x15c>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	08 c0       	rjmp	.+16     	; 0x1906 <eMBPoll+0x15c>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	06 c0       	rjmp	.+12     	; 0x1906 <eMBPoll+0x15c>
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <eMBPoll+0x15c>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
    18fe:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_ZZ7eMBPollE12ucRcvAddress>
    1902:	81 11       	cpse	r24, r1
    1904:	bf cf       	rjmp	.-130    	; 0x1884 <eMBPoll+0xda>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
    1906:	0f 90       	pop	r0
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	08 95       	ret

0000190e <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
    190e:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <xEventInQueue>
    return TRUE;
}
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	08 95       	ret

00001916 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <xEventInQueue>
    eQueuedEvent = eEvent;
    191c:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <eQueuedEvent>
    return TRUE;
}
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	08 95       	ret

00001924 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    1924:	fc 01       	movw	r30, r24
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
    1926:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <xEventInQueue>
    192a:	99 23       	and	r25, r25
    192c:	39 f0       	breq	.+14     	; 0x193c <xMBPortEventGet+0x18>
    {
        *eEvent = eQueuedEvent;
    192e:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <eQueuedEvent>
    1932:	80 83       	st	Z, r24
        xEventInQueue = FALSE;
    1934:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <xEventInQueue>
        xEventHappened = TRUE;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	08 95       	ret
}

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
    193c:	80 e0       	ldi	r24, 0x00	; 0
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
    193e:	08 95       	ret

00001940 <vMBPortSerialEnable>:

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
#ifdef RTS_ENABLE
    UCSRB |= _BV( TXEN ) | _BV(TXCIE);
    1940:	e1 ec       	ldi	r30, 0xC1	; 193
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	90 81       	ld	r25, Z
    1946:	98 64       	ori	r25, 0x48	; 72
    1948:	90 83       	st	Z, r25
#else
    UCSRB |= _BV( TXEN );
#endif

    if( xRxEnable )
    194a:	88 23       	and	r24, r24
    194c:	21 f0       	breq	.+8      	; 0x1956 <vMBPortSerialEnable+0x16>
    {
        UCSRB |= _BV( RXEN ) | _BV( RXCIE );
    194e:	80 81       	ld	r24, Z
    1950:	80 69       	ori	r24, 0x90	; 144
    1952:	80 83       	st	Z, r24
    1954:	05 c0       	rjmp	.+10     	; 0x1960 <vMBPortSerialEnable+0x20>
    }
    else
    {
        UCSRB &= ~( _BV( RXEN ) | _BV( RXCIE ) );
    1956:	e1 ec       	ldi	r30, 0xC1	; 193
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	8f 76       	andi	r24, 0x6F	; 111
    195e:	80 83       	st	Z, r24
    }

    if( xTxEnable )
    1960:	66 23       	and	r22, r22
    1962:	39 f0       	breq	.+14     	; 0x1972 <vMBPortSerialEnable+0x32>
    {
        UCSRB |= _BV( TXEN ) | _BV( UDRE );
    1964:	e1 ec       	ldi	r30, 0xC1	; 193
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	88 62       	ori	r24, 0x28	; 40
    196c:	80 83       	st	Z, r24
#ifdef RTS_ENABLE
        RTS_HIGH;
    196e:	5f 9a       	sbi	0x0b, 7	; 11
    1970:	08 95       	ret
#endif
    }
    else
    {
        UCSRB &= ~( _BV( UDRE ) );
    1972:	e1 ec       	ldi	r30, 0xC1	; 193
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8f 7d       	andi	r24, 0xDF	; 223
    197a:	80 83       	st	Z, r24
    197c:	08 95       	ret

0000197e <xMBPortSerialInit>:
    }
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
    197e:	0f 93       	push	r16
    1980:	cf 93       	push	r28
    1982:	c2 2f       	mov	r28, r18
    UCHAR ucUCSRC = 0;

    /* prevent compiler warning. */
    (void)ucPORT;
	
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );
    1984:	db 01       	movw	r26, r22
    1986:	ca 01       	movw	r24, r20
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	aa 1f       	adc	r26, r26
    198e:	bb 1f       	adc	r27, r27
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	aa 1f       	adc	r26, r26
    1996:	bb 1f       	adc	r27, r27
    1998:	9c 01       	movw	r18, r24
    199a:	ad 01       	movw	r20, r26
    199c:	22 0f       	add	r18, r18
    199e:	33 1f       	adc	r19, r19
    19a0:	44 1f       	adc	r20, r20
    19a2:	55 1f       	adc	r21, r21
    19a4:	22 0f       	add	r18, r18
    19a6:	33 1f       	adc	r19, r19
    19a8:	44 1f       	adc	r20, r20
    19aa:	55 1f       	adc	r21, r21
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	74 e2       	ldi	r23, 0x24	; 36
    19b0:	84 ef       	ldi	r24, 0xF4	; 244
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	1c d2       	rcall	.+1080   	; 0x1dee <__udivmodsi4>
    19b6:	21 50       	subi	r18, 0x01	; 1
    19b8:	31 09       	sbc	r19, r1
    19ba:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    19be:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

    switch ( eParity )
    19c2:	01 30       	cpi	r16, 0x01	; 1
    19c4:	21 f0       	breq	.+8      	; 0x19ce <xMBPortSerialInit+0x50>
    19c6:	02 30       	cpi	r16, 0x02	; 2
    19c8:	21 f4       	brne	.+8      	; 0x19d2 <xMBPortSerialInit+0x54>
    {
        case MB_PAR_EVEN:
            ucUCSRC |= _BV( UPM1 );
    19ca:	90 e2       	ldi	r25, 0x20	; 32
    19cc:	03 c0       	rjmp	.+6      	; 0x19d4 <xMBPortSerialInit+0x56>
            break;
        case MB_PAR_ODD:
            ucUCSRC |= _BV( UPM1 ) | _BV( UPM0 );
    19ce:	90 e3       	ldi	r25, 0x30	; 48
            break;
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <xMBPortSerialInit+0x56>
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
    UCHAR ucUCSRC = 0;
    19d2:	90 e0       	ldi	r25, 0x00	; 0
            break;
        case MB_PAR_NONE:
            break;
    }

    switch ( ucDataBits )
    19d4:	c7 30       	cpi	r28, 0x07	; 7
    19d6:	21 f0       	breq	.+8      	; 0x19e0 <xMBPortSerialInit+0x62>
    19d8:	c8 30       	cpi	r28, 0x08	; 8
    19da:	19 f4       	brne	.+6      	; 0x19e2 <xMBPortSerialInit+0x64>
    {
        case 8:
            ucUCSRC |= _BV( UCSZ0 ) | _BV( UCSZ1 );
    19dc:	96 60       	ori	r25, 0x06	; 6
            break;
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <xMBPortSerialInit+0x64>
        case 7:
            ucUCSRC |= _BV( UCSZ1 );
    19e0:	94 60       	ori	r25, 0x04	; 4
    }

#if defined (__AVR_ATmega168__) | defined (__AVR_ATmega328__)
    UCSRC |= ucUCSRC;
#elif defined (__AVR_ATmega1284__) | defined (__AVR_ATmega1284P__)
	UCSRC |= ucUCSRC;
    19e2:	e2 ec       	ldi	r30, 0xC2	; 194
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	89 2b       	or	r24, r25
    19ea:	80 83       	st	Z, r24
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega128__)
    UCSRC |= ucUCSRC;
#endif

    vMBPortSerialEnable( FALSE, FALSE );
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	a7 df       	rcall	.-178    	; 0x1940 <vMBPortSerialEnable>

#ifdef RTS_ENABLE
    RTS_INIT;
    19f2:	57 9a       	sbi	0x0a, 7	; 10
    19f4:	5f 98       	cbi	0x0b, 7	; 11
#endif
    return TRUE;
}
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	cf 91       	pop	r28
    19fa:	0f 91       	pop	r16
    19fc:	08 95       	ret

000019fe <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
    UDR = ucByte;
    19fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    return TRUE;
}
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	08 95       	ret

00001a06 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
    *pucByte = UDR;
    1a06:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	20 83       	st	Z, r18
    return TRUE;
}
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	08 95       	ret

00001a12 <__vector_21>:
ISR( USART0_UDRE_vect )
#else
#error "Part Not Supported"
#endif
/*SIGNAL( SIG_USART_DATA )*/
{
    1a12:	1f 92       	push	r1
    1a14:	0f 92       	push	r0
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	0f 92       	push	r0
    1a1a:	11 24       	eor	r1, r1
    1a1c:	0b b6       	in	r0, 0x3b	; 59
    1a1e:	0f 92       	push	r0
    1a20:	2f 93       	push	r18
    1a22:	3f 93       	push	r19
    1a24:	4f 93       	push	r20
    1a26:	5f 93       	push	r21
    1a28:	6f 93       	push	r22
    1a2a:	7f 93       	push	r23
    1a2c:	8f 93       	push	r24
    1a2e:	9f 93       	push	r25
    1a30:	af 93       	push	r26
    1a32:	bf 93       	push	r27
    1a34:	ef 93       	push	r30
    1a36:	ff 93       	push	r31
    pxMBFrameCBTransmitterEmpty(  );
    1a38:	e0 91 47 04 	lds	r30, 0x0447	; 0x800447 <pxMBFrameCBTransmitterEmpty>
    1a3c:	f0 91 48 04 	lds	r31, 0x0448	; 0x800448 <pxMBFrameCBTransmitterEmpty+0x1>
    1a40:	09 95       	icall
}
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	bf 91       	pop	r27
    1a48:	af 91       	pop	r26
    1a4a:	9f 91       	pop	r25
    1a4c:	8f 91       	pop	r24
    1a4e:	7f 91       	pop	r23
    1a50:	6f 91       	pop	r22
    1a52:	5f 91       	pop	r21
    1a54:	4f 91       	pop	r20
    1a56:	3f 91       	pop	r19
    1a58:	2f 91       	pop	r18
    1a5a:	0f 90       	pop	r0
    1a5c:	0b be       	out	0x3b, r0	; 59
    1a5e:	0f 90       	pop	r0
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	0f 90       	pop	r0
    1a64:	1f 90       	pop	r1
    1a66:	18 95       	reti

00001a68 <__vector_20>:
ISR( USART0_RX_vect )
#else
#error "Part Not Supported"
#endif
/*SIGNAL( SIG_USART_RECV )*/
{
    1a68:	1f 92       	push	r1
    1a6a:	0f 92       	push	r0
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	0f 92       	push	r0
    1a70:	11 24       	eor	r1, r1
    1a72:	0b b6       	in	r0, 0x3b	; 59
    1a74:	0f 92       	push	r0
    1a76:	2f 93       	push	r18
    1a78:	3f 93       	push	r19
    1a7a:	4f 93       	push	r20
    1a7c:	5f 93       	push	r21
    1a7e:	6f 93       	push	r22
    1a80:	7f 93       	push	r23
    1a82:	8f 93       	push	r24
    1a84:	9f 93       	push	r25
    1a86:	af 93       	push	r26
    1a88:	bf 93       	push	r27
    1a8a:	ef 93       	push	r30
    1a8c:	ff 93       	push	r31
    pxMBFrameCBByteReceived(  );
    1a8e:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <pxMBFrameCBByteReceived>
    1a92:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <pxMBFrameCBByteReceived+0x1>
    1a96:	09 95       	icall
}
    1a98:	ff 91       	pop	r31
    1a9a:	ef 91       	pop	r30
    1a9c:	bf 91       	pop	r27
    1a9e:	af 91       	pop	r26
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	7f 91       	pop	r23
    1aa6:	6f 91       	pop	r22
    1aa8:	5f 91       	pop	r21
    1aaa:	4f 91       	pop	r20
    1aac:	3f 91       	pop	r19
    1aae:	2f 91       	pop	r18
    1ab0:	0f 90       	pop	r0
    1ab2:	0b be       	out	0x3b, r0	; 59
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	0f 90       	pop	r0
    1aba:	1f 90       	pop	r1
    1abc:	18 95       	reti

00001abe <__vector_22>:
ISR( USART0_TX_vect )
#else
#error "Part Not Supported"
#endif
/*SIGNAL( SIG_UART_TRANS )*/
{
    1abe:	1f 92       	push	r1
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    RTS_LOW;
    1ac8:	5f 98       	cbi	0x0b, 7	; 11
}
    1aca:	0f 90       	pop	r0
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	0f 90       	pop	r0
    1ad0:	1f 90       	pop	r1
    1ad2:	18 95       	reti

00001ad4 <xMBPortTimersInit>:
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );

    usTimerOCRDeltaHi = usTimerOCRADelta >> 8;
    1ad4:	9c 01       	movw	r18, r24
    1ad6:	a9 e0       	ldi	r26, 0x09	; 9
    1ad8:	bd e3       	ldi	r27, 0x3D	; 61
    1ada:	b4 d1       	rcall	.+872    	; 0x1e44 <__umulhisi3>
    1adc:	20 e2       	ldi	r18, 0x20	; 32
    1ade:	3e e4       	ldi	r19, 0x4E	; 78
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	84 d1       	rcall	.+776    	; 0x1dee <__udivmodsi4>
    1ae6:	30 93 59 04 	sts	0x0459, r19	; 0x800459 <usTimerOCRDeltaHi>
#endif

    vMBPortTimersDisable(  );

    return TRUE;
}
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	08 95       	ret

00001aee <vMBPortTimersEnable>:
inline void
vMBPortTimersEnable(  )
{

    //TCNT1 = 0x0000;
	TCNT2_Hi = 0;
    1aee:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <TCNT2_Hi>
	TCNT2 = 0;
    1af2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    1af6:	08 95       	ret

00001af8 <vMBPortTimersDisable>:
#endif
}

inline void
vMBPortTimersDisable(  )
{
    1af8:	08 95       	ret

00001afa <__vector_9>:
#elif defined(__AVR_ATmega8__)
ISR( TIMER2_COMP_vect )
#else
#error "Part Not Supported"
#endif
{
    1afa:	1f 92       	push	r1
    1afc:	0f 92       	push	r0
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	0f 92       	push	r0
    1b02:	11 24       	eor	r1, r1
    1b04:	0b b6       	in	r0, 0x3b	; 59
    1b06:	0f 92       	push	r0
    1b08:	2f 93       	push	r18
    1b0a:	3f 93       	push	r19
    1b0c:	4f 93       	push	r20
    1b0e:	5f 93       	push	r21
    1b10:	6f 93       	push	r22
    1b12:	7f 93       	push	r23
    1b14:	8f 93       	push	r24
    1b16:	9f 93       	push	r25
    1b18:	af 93       	push	r26
    1b1a:	bf 93       	push	r27
    1b1c:	ef 93       	push	r30
    1b1e:	ff 93       	push	r31
    ( void )pxMBPortCBTimerExpired(  );
    1b20:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <pxMBPortCBTimerExpired>
    1b24:	f0 91 46 04 	lds	r31, 0x0446	; 0x800446 <pxMBPortCBTimerExpired+0x1>
    1b28:	09 95       	icall
}
    1b2a:	ff 91       	pop	r31
    1b2c:	ef 91       	pop	r30
    1b2e:	bf 91       	pop	r27
    1b30:	af 91       	pop	r26
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	7f 91       	pop	r23
    1b38:	6f 91       	pop	r22
    1b3a:	5f 91       	pop	r21
    1b3c:	4f 91       	pop	r20
    1b3e:	3f 91       	pop	r19
    1b40:	2f 91       	pop	r18
    1b42:	0f 90       	pop	r0
    1b44:	0b be       	out	0x3b, r0	; 59
    1b46:	0f 90       	pop	r0
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	0f 90       	pop	r0
    1b4c:	1f 90       	pop	r1
    1b4e:	18 95       	reti

00001b50 <__vector_11>:

ISR( TIMER2_OVF_vect )
{
    1b50:	1f 92       	push	r1
    1b52:	0f 92       	push	r0
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	0f 92       	push	r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	0b b6       	in	r0, 0x3b	; 59
    1b5c:	0f 92       	push	r0
    1b5e:	2f 93       	push	r18
    1b60:	3f 93       	push	r19
    1b62:	4f 93       	push	r20
    1b64:	5f 93       	push	r21
    1b66:	6f 93       	push	r22
    1b68:	7f 93       	push	r23
    1b6a:	8f 93       	push	r24
    1b6c:	9f 93       	push	r25
    1b6e:	af 93       	push	r26
    1b70:	bf 93       	push	r27
    1b72:	ef 93       	push	r30
    1b74:	ff 93       	push	r31
	TCNT2_Hi++;
    1b76:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <TCNT2_Hi>
    1b7a:	8f 5f       	subi	r24, 0xFF	; 255
    1b7c:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <TCNT2_Hi>
	if (TCNT2_Hi < OCR2_Hi)
	{
		//TCNT2_Hi < OCR2_Hi
	}
	else if (TCNT2_Hi == OCR2_Hi)
    1b80:	88 23       	and	r24, r24
    1b82:	29 f0       	breq	.+10     	; 0x1b8e <__vector_11+0x3e>

	}
	else
	{	//TCNT2_Hi > OCR2_Hi
		//for sanity's sake
	    ( void )pxMBPortCBTimerExpired(  );
    1b84:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <pxMBPortCBTimerExpired>
    1b88:	f0 91 46 04 	lds	r31, 0x0446	; 0x800446 <pxMBPortCBTimerExpired+0x1>
    1b8c:	09 95       	icall
	}
}
    1b8e:	ff 91       	pop	r31
    1b90:	ef 91       	pop	r30
    1b92:	bf 91       	pop	r27
    1b94:	af 91       	pop	r26
    1b96:	9f 91       	pop	r25
    1b98:	8f 91       	pop	r24
    1b9a:	7f 91       	pop	r23
    1b9c:	6f 91       	pop	r22
    1b9e:	5f 91       	pop	r21
    1ba0:	4f 91       	pop	r20
    1ba2:	3f 91       	pop	r19
    1ba4:	2f 91       	pop	r18
    1ba6:	0f 90       	pop	r0
    1ba8:	0b be       	out	0x3b, r0	; 59
    1baa:	0f 90       	pop	r0
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	0f 90       	pop	r0
    1bb0:	1f 90       	pop	r1
    1bb2:	18 95       	reti

00001bb4 <__fixunssfsi>:
    1bb4:	70 d0       	rcall	.+224    	; 0x1c96 <__fp_splitA>
    1bb6:	88 f0       	brcs	.+34     	; 0x1bda <__fixunssfsi+0x26>
    1bb8:	9f 57       	subi	r25, 0x7F	; 127
    1bba:	90 f0       	brcs	.+36     	; 0x1be0 <__fixunssfsi+0x2c>
    1bbc:	b9 2f       	mov	r27, r25
    1bbe:	99 27       	eor	r25, r25
    1bc0:	b7 51       	subi	r27, 0x17	; 23
    1bc2:	a0 f0       	brcs	.+40     	; 0x1bec <__fixunssfsi+0x38>
    1bc4:	d1 f0       	breq	.+52     	; 0x1bfa <__fixunssfsi+0x46>
    1bc6:	66 0f       	add	r22, r22
    1bc8:	77 1f       	adc	r23, r23
    1bca:	88 1f       	adc	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	1a f0       	brmi	.+6      	; 0x1bd6 <__fixunssfsi+0x22>
    1bd0:	ba 95       	dec	r27
    1bd2:	c9 f7       	brne	.-14     	; 0x1bc6 <__fixunssfsi+0x12>
    1bd4:	12 c0       	rjmp	.+36     	; 0x1bfa <__fixunssfsi+0x46>
    1bd6:	b1 30       	cpi	r27, 0x01	; 1
    1bd8:	81 f0       	breq	.+32     	; 0x1bfa <__fixunssfsi+0x46>
    1bda:	77 d0       	rcall	.+238    	; 0x1cca <__fp_zero>
    1bdc:	b1 e0       	ldi	r27, 0x01	; 1
    1bde:	08 95       	ret
    1be0:	74 c0       	rjmp	.+232    	; 0x1cca <__fp_zero>
    1be2:	67 2f       	mov	r22, r23
    1be4:	78 2f       	mov	r23, r24
    1be6:	88 27       	eor	r24, r24
    1be8:	b8 5f       	subi	r27, 0xF8	; 248
    1bea:	39 f0       	breq	.+14     	; 0x1bfa <__fixunssfsi+0x46>
    1bec:	b9 3f       	cpi	r27, 0xF9	; 249
    1bee:	cc f3       	brlt	.-14     	; 0x1be2 <__fixunssfsi+0x2e>
    1bf0:	86 95       	lsr	r24
    1bf2:	77 95       	ror	r23
    1bf4:	67 95       	ror	r22
    1bf6:	b3 95       	inc	r27
    1bf8:	d9 f7       	brne	.-10     	; 0x1bf0 <__fixunssfsi+0x3c>
    1bfa:	3e f4       	brtc	.+14     	; 0x1c0a <__fixunssfsi+0x56>
    1bfc:	90 95       	com	r25
    1bfe:	80 95       	com	r24
    1c00:	70 95       	com	r23
    1c02:	61 95       	neg	r22
    1c04:	7f 4f       	sbci	r23, 0xFF	; 255
    1c06:	8f 4f       	sbci	r24, 0xFF	; 255
    1c08:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0a:	08 95       	ret

00001c0c <__floatunsisf>:
    1c0c:	e8 94       	clt
    1c0e:	09 c0       	rjmp	.+18     	; 0x1c22 <__floatsisf+0x12>

00001c10 <__floatsisf>:
    1c10:	97 fb       	bst	r25, 7
    1c12:	3e f4       	brtc	.+14     	; 0x1c22 <__floatsisf+0x12>
    1c14:	90 95       	com	r25
    1c16:	80 95       	com	r24
    1c18:	70 95       	com	r23
    1c1a:	61 95       	neg	r22
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c20:	9f 4f       	sbci	r25, 0xFF	; 255
    1c22:	99 23       	and	r25, r25
    1c24:	a9 f0       	breq	.+42     	; 0x1c50 <__floatsisf+0x40>
    1c26:	f9 2f       	mov	r31, r25
    1c28:	96 e9       	ldi	r25, 0x96	; 150
    1c2a:	bb 27       	eor	r27, r27
    1c2c:	93 95       	inc	r25
    1c2e:	f6 95       	lsr	r31
    1c30:	87 95       	ror	r24
    1c32:	77 95       	ror	r23
    1c34:	67 95       	ror	r22
    1c36:	b7 95       	ror	r27
    1c38:	f1 11       	cpse	r31, r1
    1c3a:	f8 cf       	rjmp	.-16     	; 0x1c2c <__floatsisf+0x1c>
    1c3c:	fa f4       	brpl	.+62     	; 0x1c7c <__floatsisf+0x6c>
    1c3e:	bb 0f       	add	r27, r27
    1c40:	11 f4       	brne	.+4      	; 0x1c46 <__floatsisf+0x36>
    1c42:	60 ff       	sbrs	r22, 0
    1c44:	1b c0       	rjmp	.+54     	; 0x1c7c <__floatsisf+0x6c>
    1c46:	6f 5f       	subi	r22, 0xFF	; 255
    1c48:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4e:	16 c0       	rjmp	.+44     	; 0x1c7c <__floatsisf+0x6c>
    1c50:	88 23       	and	r24, r24
    1c52:	11 f0       	breq	.+4      	; 0x1c58 <__floatsisf+0x48>
    1c54:	96 e9       	ldi	r25, 0x96	; 150
    1c56:	11 c0       	rjmp	.+34     	; 0x1c7a <__floatsisf+0x6a>
    1c58:	77 23       	and	r23, r23
    1c5a:	21 f0       	breq	.+8      	; 0x1c64 <__floatsisf+0x54>
    1c5c:	9e e8       	ldi	r25, 0x8E	; 142
    1c5e:	87 2f       	mov	r24, r23
    1c60:	76 2f       	mov	r23, r22
    1c62:	05 c0       	rjmp	.+10     	; 0x1c6e <__floatsisf+0x5e>
    1c64:	66 23       	and	r22, r22
    1c66:	71 f0       	breq	.+28     	; 0x1c84 <__floatsisf+0x74>
    1c68:	96 e8       	ldi	r25, 0x86	; 134
    1c6a:	86 2f       	mov	r24, r22
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	2a f0       	brmi	.+10     	; 0x1c7c <__floatsisf+0x6c>
    1c72:	9a 95       	dec	r25
    1c74:	66 0f       	add	r22, r22
    1c76:	77 1f       	adc	r23, r23
    1c78:	88 1f       	adc	r24, r24
    1c7a:	da f7       	brpl	.-10     	; 0x1c72 <__floatsisf+0x62>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	96 95       	lsr	r25
    1c80:	87 95       	ror	r24
    1c82:	97 f9       	bld	r25, 7
    1c84:	08 95       	ret

00001c86 <__fp_split3>:
    1c86:	57 fd       	sbrc	r21, 7
    1c88:	90 58       	subi	r25, 0x80	; 128
    1c8a:	44 0f       	add	r20, r20
    1c8c:	55 1f       	adc	r21, r21
    1c8e:	59 f0       	breq	.+22     	; 0x1ca6 <__fp_splitA+0x10>
    1c90:	5f 3f       	cpi	r21, 0xFF	; 255
    1c92:	71 f0       	breq	.+28     	; 0x1cb0 <__fp_splitA+0x1a>
    1c94:	47 95       	ror	r20

00001c96 <__fp_splitA>:
    1c96:	88 0f       	add	r24, r24
    1c98:	97 fb       	bst	r25, 7
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	61 f0       	breq	.+24     	; 0x1cb6 <__fp_splitA+0x20>
    1c9e:	9f 3f       	cpi	r25, 0xFF	; 255
    1ca0:	79 f0       	breq	.+30     	; 0x1cc0 <__fp_splitA+0x2a>
    1ca2:	87 95       	ror	r24
    1ca4:	08 95       	ret
    1ca6:	12 16       	cp	r1, r18
    1ca8:	13 06       	cpc	r1, r19
    1caa:	14 06       	cpc	r1, r20
    1cac:	55 1f       	adc	r21, r21
    1cae:	f2 cf       	rjmp	.-28     	; 0x1c94 <__fp_split3+0xe>
    1cb0:	46 95       	lsr	r20
    1cb2:	f1 df       	rcall	.-30     	; 0x1c96 <__fp_splitA>
    1cb4:	08 c0       	rjmp	.+16     	; 0x1cc6 <__fp_splitA+0x30>
    1cb6:	16 16       	cp	r1, r22
    1cb8:	17 06       	cpc	r1, r23
    1cba:	18 06       	cpc	r1, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	f1 cf       	rjmp	.-30     	; 0x1ca2 <__fp_splitA+0xc>
    1cc0:	86 95       	lsr	r24
    1cc2:	71 05       	cpc	r23, r1
    1cc4:	61 05       	cpc	r22, r1
    1cc6:	08 94       	sec
    1cc8:	08 95       	ret

00001cca <__fp_zero>:
    1cca:	e8 94       	clt

00001ccc <__fp_szero>:
    1ccc:	bb 27       	eor	r27, r27
    1cce:	66 27       	eor	r22, r22
    1cd0:	77 27       	eor	r23, r23
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	97 f9       	bld	r25, 7
    1cd6:	08 95       	ret

00001cd8 <__mulsf3>:
    1cd8:	0b d0       	rcall	.+22     	; 0x1cf0 <__mulsf3x>
    1cda:	78 c0       	rjmp	.+240    	; 0x1dcc <__fp_round>
    1cdc:	69 d0       	rcall	.+210    	; 0x1db0 <__fp_pscA>
    1cde:	28 f0       	brcs	.+10     	; 0x1cea <__mulsf3+0x12>
    1ce0:	6e d0       	rcall	.+220    	; 0x1dbe <__fp_pscB>
    1ce2:	18 f0       	brcs	.+6      	; 0x1cea <__mulsf3+0x12>
    1ce4:	95 23       	and	r25, r21
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <__mulsf3+0x12>
    1ce8:	5a c0       	rjmp	.+180    	; 0x1d9e <__fp_inf>
    1cea:	5f c0       	rjmp	.+190    	; 0x1daa <__fp_nan>
    1cec:	11 24       	eor	r1, r1
    1cee:	ee cf       	rjmp	.-36     	; 0x1ccc <__fp_szero>

00001cf0 <__mulsf3x>:
    1cf0:	ca df       	rcall	.-108    	; 0x1c86 <__fp_split3>
    1cf2:	a0 f3       	brcs	.-24     	; 0x1cdc <__mulsf3+0x4>

00001cf4 <__mulsf3_pse>:
    1cf4:	95 9f       	mul	r25, r21
    1cf6:	d1 f3       	breq	.-12     	; 0x1cec <__mulsf3+0x14>
    1cf8:	95 0f       	add	r25, r21
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	55 1f       	adc	r21, r21
    1cfe:	62 9f       	mul	r22, r18
    1d00:	f0 01       	movw	r30, r0
    1d02:	72 9f       	mul	r23, r18
    1d04:	bb 27       	eor	r27, r27
    1d06:	f0 0d       	add	r31, r0
    1d08:	b1 1d       	adc	r27, r1
    1d0a:	63 9f       	mul	r22, r19
    1d0c:	aa 27       	eor	r26, r26
    1d0e:	f0 0d       	add	r31, r0
    1d10:	b1 1d       	adc	r27, r1
    1d12:	aa 1f       	adc	r26, r26
    1d14:	64 9f       	mul	r22, r20
    1d16:	66 27       	eor	r22, r22
    1d18:	b0 0d       	add	r27, r0
    1d1a:	a1 1d       	adc	r26, r1
    1d1c:	66 1f       	adc	r22, r22
    1d1e:	82 9f       	mul	r24, r18
    1d20:	22 27       	eor	r18, r18
    1d22:	b0 0d       	add	r27, r0
    1d24:	a1 1d       	adc	r26, r1
    1d26:	62 1f       	adc	r22, r18
    1d28:	73 9f       	mul	r23, r19
    1d2a:	b0 0d       	add	r27, r0
    1d2c:	a1 1d       	adc	r26, r1
    1d2e:	62 1f       	adc	r22, r18
    1d30:	83 9f       	mul	r24, r19
    1d32:	a0 0d       	add	r26, r0
    1d34:	61 1d       	adc	r22, r1
    1d36:	22 1f       	adc	r18, r18
    1d38:	74 9f       	mul	r23, r20
    1d3a:	33 27       	eor	r19, r19
    1d3c:	a0 0d       	add	r26, r0
    1d3e:	61 1d       	adc	r22, r1
    1d40:	23 1f       	adc	r18, r19
    1d42:	84 9f       	mul	r24, r20
    1d44:	60 0d       	add	r22, r0
    1d46:	21 1d       	adc	r18, r1
    1d48:	82 2f       	mov	r24, r18
    1d4a:	76 2f       	mov	r23, r22
    1d4c:	6a 2f       	mov	r22, r26
    1d4e:	11 24       	eor	r1, r1
    1d50:	9f 57       	subi	r25, 0x7F	; 127
    1d52:	50 40       	sbci	r21, 0x00	; 0
    1d54:	8a f0       	brmi	.+34     	; 0x1d78 <__mulsf3_pse+0x84>
    1d56:	e1 f0       	breq	.+56     	; 0x1d90 <__mulsf3_pse+0x9c>
    1d58:	88 23       	and	r24, r24
    1d5a:	4a f0       	brmi	.+18     	; 0x1d6e <__mulsf3_pse+0x7a>
    1d5c:	ee 0f       	add	r30, r30
    1d5e:	ff 1f       	adc	r31, r31
    1d60:	bb 1f       	adc	r27, r27
    1d62:	66 1f       	adc	r22, r22
    1d64:	77 1f       	adc	r23, r23
    1d66:	88 1f       	adc	r24, r24
    1d68:	91 50       	subi	r25, 0x01	; 1
    1d6a:	50 40       	sbci	r21, 0x00	; 0
    1d6c:	a9 f7       	brne	.-22     	; 0x1d58 <__mulsf3_pse+0x64>
    1d6e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d70:	51 05       	cpc	r21, r1
    1d72:	70 f0       	brcs	.+28     	; 0x1d90 <__mulsf3_pse+0x9c>
    1d74:	14 c0       	rjmp	.+40     	; 0x1d9e <__fp_inf>
    1d76:	aa cf       	rjmp	.-172    	; 0x1ccc <__fp_szero>
    1d78:	5f 3f       	cpi	r21, 0xFF	; 255
    1d7a:	ec f3       	brlt	.-6      	; 0x1d76 <__mulsf3_pse+0x82>
    1d7c:	98 3e       	cpi	r25, 0xE8	; 232
    1d7e:	dc f3       	brlt	.-10     	; 0x1d76 <__mulsf3_pse+0x82>
    1d80:	86 95       	lsr	r24
    1d82:	77 95       	ror	r23
    1d84:	67 95       	ror	r22
    1d86:	b7 95       	ror	r27
    1d88:	f7 95       	ror	r31
    1d8a:	e7 95       	ror	r30
    1d8c:	9f 5f       	subi	r25, 0xFF	; 255
    1d8e:	c1 f7       	brne	.-16     	; 0x1d80 <__mulsf3_pse+0x8c>
    1d90:	fe 2b       	or	r31, r30
    1d92:	88 0f       	add	r24, r24
    1d94:	91 1d       	adc	r25, r1
    1d96:	96 95       	lsr	r25
    1d98:	87 95       	ror	r24
    1d9a:	97 f9       	bld	r25, 7
    1d9c:	08 95       	ret

00001d9e <__fp_inf>:
    1d9e:	97 f9       	bld	r25, 7
    1da0:	9f 67       	ori	r25, 0x7F	; 127
    1da2:	80 e8       	ldi	r24, 0x80	; 128
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	08 95       	ret

00001daa <__fp_nan>:
    1daa:	9f ef       	ldi	r25, 0xFF	; 255
    1dac:	80 ec       	ldi	r24, 0xC0	; 192
    1dae:	08 95       	ret

00001db0 <__fp_pscA>:
    1db0:	00 24       	eor	r0, r0
    1db2:	0a 94       	dec	r0
    1db4:	16 16       	cp	r1, r22
    1db6:	17 06       	cpc	r1, r23
    1db8:	18 06       	cpc	r1, r24
    1dba:	09 06       	cpc	r0, r25
    1dbc:	08 95       	ret

00001dbe <__fp_pscB>:
    1dbe:	00 24       	eor	r0, r0
    1dc0:	0a 94       	dec	r0
    1dc2:	12 16       	cp	r1, r18
    1dc4:	13 06       	cpc	r1, r19
    1dc6:	14 06       	cpc	r1, r20
    1dc8:	05 06       	cpc	r0, r21
    1dca:	08 95       	ret

00001dcc <__fp_round>:
    1dcc:	09 2e       	mov	r0, r25
    1dce:	03 94       	inc	r0
    1dd0:	00 0c       	add	r0, r0
    1dd2:	11 f4       	brne	.+4      	; 0x1dd8 <__fp_round+0xc>
    1dd4:	88 23       	and	r24, r24
    1dd6:	52 f0       	brmi	.+20     	; 0x1dec <__fp_round+0x20>
    1dd8:	bb 0f       	add	r27, r27
    1dda:	40 f4       	brcc	.+16     	; 0x1dec <__fp_round+0x20>
    1ddc:	bf 2b       	or	r27, r31
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <__fp_round+0x18>
    1de0:	60 ff       	sbrs	r22, 0
    1de2:	04 c0       	rjmp	.+8      	; 0x1dec <__fp_round+0x20>
    1de4:	6f 5f       	subi	r22, 0xFF	; 255
    1de6:	7f 4f       	sbci	r23, 0xFF	; 255
    1de8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dea:	9f 4f       	sbci	r25, 0xFF	; 255
    1dec:	08 95       	ret

00001dee <__udivmodsi4>:
    1dee:	a1 e2       	ldi	r26, 0x21	; 33
    1df0:	1a 2e       	mov	r1, r26
    1df2:	aa 1b       	sub	r26, r26
    1df4:	bb 1b       	sub	r27, r27
    1df6:	fd 01       	movw	r30, r26
    1df8:	0d c0       	rjmp	.+26     	; 0x1e14 <__udivmodsi4_ep>

00001dfa <__udivmodsi4_loop>:
    1dfa:	aa 1f       	adc	r26, r26
    1dfc:	bb 1f       	adc	r27, r27
    1dfe:	ee 1f       	adc	r30, r30
    1e00:	ff 1f       	adc	r31, r31
    1e02:	a2 17       	cp	r26, r18
    1e04:	b3 07       	cpc	r27, r19
    1e06:	e4 07       	cpc	r30, r20
    1e08:	f5 07       	cpc	r31, r21
    1e0a:	20 f0       	brcs	.+8      	; 0x1e14 <__udivmodsi4_ep>
    1e0c:	a2 1b       	sub	r26, r18
    1e0e:	b3 0b       	sbc	r27, r19
    1e10:	e4 0b       	sbc	r30, r20
    1e12:	f5 0b       	sbc	r31, r21

00001e14 <__udivmodsi4_ep>:
    1e14:	66 1f       	adc	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	1a 94       	dec	r1
    1e1e:	69 f7       	brne	.-38     	; 0x1dfa <__udivmodsi4_loop>
    1e20:	60 95       	com	r22
    1e22:	70 95       	com	r23
    1e24:	80 95       	com	r24
    1e26:	90 95       	com	r25
    1e28:	9b 01       	movw	r18, r22
    1e2a:	ac 01       	movw	r20, r24
    1e2c:	bd 01       	movw	r22, r26
    1e2e:	cf 01       	movw	r24, r30
    1e30:	08 95       	ret

00001e32 <__tablejump2__>:
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	00 24       	eor	r0, r0
    1e38:	00 1c       	adc	r0, r0
    1e3a:	0b be       	out	0x3b, r0	; 59
    1e3c:	07 90       	elpm	r0, Z+
    1e3e:	f6 91       	elpm	r31, Z
    1e40:	e0 2d       	mov	r30, r0
    1e42:	09 94       	ijmp

00001e44 <__umulhisi3>:
    1e44:	a2 9f       	mul	r26, r18
    1e46:	b0 01       	movw	r22, r0
    1e48:	b3 9f       	mul	r27, r19
    1e4a:	c0 01       	movw	r24, r0
    1e4c:	a3 9f       	mul	r26, r19
    1e4e:	70 0d       	add	r23, r0
    1e50:	81 1d       	adc	r24, r1
    1e52:	11 24       	eor	r1, r1
    1e54:	91 1d       	adc	r25, r1
    1e56:	b2 9f       	mul	r27, r18
    1e58:	70 0d       	add	r23, r0
    1e5a:	81 1d       	adc	r24, r1
    1e5c:	11 24       	eor	r1, r1
    1e5e:	91 1d       	adc	r25, r1
    1e60:	08 95       	ret

00001e62 <memcpy>:
    1e62:	fb 01       	movw	r30, r22
    1e64:	dc 01       	movw	r26, r24
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <memcpy+0xa>
    1e68:	01 90       	ld	r0, Z+
    1e6a:	0d 92       	st	X+, r0
    1e6c:	41 50       	subi	r20, 0x01	; 1
    1e6e:	50 40       	sbci	r21, 0x00	; 0
    1e70:	d8 f7       	brcc	.-10     	; 0x1e68 <memcpy+0x6>
    1e72:	08 95       	ret

00001e74 <_exit>:
    1e74:	f8 94       	cli

00001e76 <__stop_program>:
    1e76:	ff cf       	rjmp	.-2      	; 0x1e76 <__stop_program>
